				;file E:\				;1	//products mode:   X1
				;2	//functional description: 
				;3	//MCU mode:        HT66F018
				;4	//MCU frequency:   8MHz
				;5	//designer:        JerryJiang
				;6	//data:    2018/12/20
				;7	//record:
				;8	
				;9	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				;10	#include "base.h"
				;11	#define EXTERN
				;12	#define VAR_DEFINE
				;13	#include "Var.h"
				;14	
				;15	extern  int ntc_val;
				;16	void Dealy(void)
				;17	{//				;18		unsigned int i,j;
				;19		for(i=0;i<50;i++)
				_Dealy:
				_Dealy:
0110	5F79	clr     i[0]
0111	5F7A	clr     i[1]
0112	2924	jmp     _L2
0121	54F9	inc     i[0]
0122	3D0A	sz      Z
0123	54FA	inc     i[1]
				_L2:
0124	0F31	mov     a, 31H
0125	4279	sub     a, i[0]
0126	0F00	mov     a, 0H
0127	527A	sbc     a, i[1]
0128	3C0A	sz      C
0129	2913	jmp     _L5
012A	0003	ret
				;20		{
				;21			for(j=0;j<50;j++)
				_L5:
0113	5F7B	clr     j[0]
0114	5F7C	clr     j[1]
0115	291B	jmp     _L3
0118	54FB	inc     j[0]
0119	3D0A	sz      Z
011A	54FC	inc     j[1]
				_L3:
011B	0F31	mov     a, 31H
011C	427B	sub     a, j[0]
011D	0F00	mov     a, 0H
011E	527C	sbc     a, j[1]
011F	3C0A	sz      C
0120	2916	jmp     _L4
				;22			{
				;23				 GCC_CLRWDT();
				_L4:
0116	0001	clr     wdt
				;24				_nop();
0117	0000	nop
				;25			}
				;26		}	
				;27	}
				;28	//~~~~~~~~~~~~~~~~ 				;29	void SleepMode(void)
				;30	{
				;31		_idlen 	= 0;				// IDLEN 				_SleepMode:
				_SleepMode:
012B	348B	clr     IDLEN
				;32		_wdtc 	= 0b10101000;		// 012C	0FA8	mov     a, A8H
012D	009A	mov     WDTC, a
				;33		_lvden 	= 0x00;		  		// 012E	360C	clr     LVDEN
				;34		GCC_HALT();	
012F	0002	halt
0130	0003	ret
				;35	}
				;36	
				;37	void Sleep(void)
				;38	{
				;39	 	COM1_OFF;		 	
				_Sleep:
				_Sleep:
0131	34C0	clr     PC1
				;40	 	COM2_OFF;
0132	3540	clr     PC2
				;41	 	COM3_OFF;			 	
0133	3494	clr     PA1
				;42		_adoff = true;
0134	32A2	set     ADOFF
				;43		Dealy();
0135	2110	call    _Dealy
				;44		do
				;45		{
				;46			_emi = 0;		
0136	340E	clr     EMI
				;47			SleepMode();			//0137	212B	call    _SleepMode
				;48			_emi = 1;
0138	300E	set     EMI
				;49			break;		
				;50		}while(1);
				;51		_adoff = false;
0139	36A2	clr     ADOFF
013A	0003	ret
				;52	}
				;53	
				;54	void main(void)
				;55	{	
				@code .SECTION 'CODE'
				include HT66F018.inc
0000	2814	jmp     begin_startup_value
0001	0000	nop
0002	0000	nop
0003	0000	nop
				startupend3:
				@start .SECTION 'CODE'
004E	293B	jmp     _main
				startup_value:
				@ROMDATA_BASE .SECTION 'CODE'
004F	0011	jmp     L0011
0050	00C1	mov     PCC, a
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
0051	0000	nop
0052	0000	nop
0053	0000	nop
				;56	    InitSys();					//				_main:
				_main:
013B	214F	call    _InitSys
				;57	    VarInit();					//013C	218C	call    _VarInit
				;58	    TimerInit();				//013D	225E	call    _TimerInit
				;59	    while(1)
				;60	    {
				;61			GCC_CLRWDT();			//				_L10:
013E	0001	clr     wdt
				;62			if(TaskADRdyFlag)		//4ms013F	4721	mov     a, maiFlagB[0]
0140	40DC	mov     ra, a
0141	0F20	mov     a, 20H
0142	46DC	andm    a, ra
0143	50DC	sz      ra
0144	2946	jmp     _LI1
0145	2949	jmp     _L9
				;63			{
				;64				TaskADRdyFlag = false;
				_LI1:
0146	76A1	clr     maiFlagB[0].5
				;65				GetPTCValu();	     	//0147	26AB	call    _GetPTCValu
				;66				GetAroudTempValu();		//0148	6146	call    _GetAroudTempValu
				;67			}
				;68			TaskKey();				//				_L9:
0149	2425	call    _TaskKey
				;69			TaskFunc();				//014A	64B4	call    _TaskFunc
				;70			TaskBatOp();			//014B	643A	call    _TaskBatOp
				;71			TaskBuzzer();     		//014C	2613	call    _TaskBuzzer
				;72	    }
014D	293E	jmp     _L10
014E	294E	jmp     $
				;73	}
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	#define INIT_NO_DETECT_TIME	3
				;6	volatile static unsigned char Time1SClearCnt __attribute__ ((at(0x1d7)));
				;7	
				;8	unsigned char Time500mSCnt = 0,Time4mSCnt = 0;
				;9	
				;10	/********************************************************/
				;11	volatile unsigned int PWMCnt = 0;
				;12	volatile unsigned int HuxiCnt = 0;
				;13	volatile unsigned int PWMValu = 10;
0054	000A	dc	0000AH
0055	0000	nop
0056	0000	nop
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
0057	0000	nop
0058	0000	nop
0059	0000	nop
005A	0000	nop
				;14	
				;15	#define HUXI_VAL 		1600
				;16	#define PWM_CYCLE		12
				;17	
				;18	/***************** 				;19	void LED_Breathe(void)
				;20	{
				;21		if((Breathe_Flag == 1) && (BatSta != BATTRY_FULL))
				_LED_Breathe:
				_LED_Breathe:
01B5	4722	mov     a, LEDG[0]
01B6	40E0	mov     ra10, a
01B7	0F01	mov     a, 1H
01B8	46E0	andm    a, ra10
01B9	50E0	sz      ra10
01BA	29BC	jmp     _LI1
01BB	2A46	jmp     _L1
				_LI1:
01BC	473E	mov     a, BatSta[0]
01BD	40E0	mov     ra10, a
01BE	4760	mov     a, ra10
01BF	0A03	sub     a, 3H
01C0	3D0A	sz      Z
01C1	2A46	jmp     _L1
				;22		{
				;23		    PWMCnt++;
01C2	4743	mov     a, PWMCnt[0]
01C3	40E0	mov     ra10, a
01C4	4744	mov     a, PWMCnt[1]
01C5	40E1	mov     rb10, a
01C6	54E0	inc     ra10
01C7	3D0A	sz      Z
01C8	54E1	inc     rb10
01C9	4760	mov     a, ra10
01CA	40C3	mov     PWMCnt[0], a
01CB	4761	mov     a, rb10
01CC	40C4	mov     PWMCnt[1], a
				;24		    HuxiCnt++;
01CD	4745	mov     a, HuxiCnt[0]
01CE	40E0	mov     ra10, a
01CF	4746	mov     a, HuxiCnt[1]
01D0	40E1	mov     rb10, a
01D1	54E0	inc     ra10
01D2	3D0A	sz      Z
01D3	54E1	inc     rb10
01D4	4760	mov     a, ra10
01D5	40C5	mov     HuxiCnt[0], a
01D6	4761	mov     a, rb10
01D7	40C6	mov     HuxiCnt[1], a
				;25		    if(PWMCnt == PWMValu)      //01D8	4743	mov     a, PWMCnt[0]
01D9	40E2	mov     rc10, a
01DA	4744	mov     a, PWMCnt[1]
01DB	40E3	mov     rd10, a
01DC	4747	mov     a, PWMValu[0]
01DD	40E0	mov     ra10, a
01DE	4748	mov     a, PWMValu[1]
01DF	40E1	mov     rb10, a
01E0	4762	mov     a, rc10
01E1	4460	xor     a, ra10
01E2	4763	mov     a, rd10
01E3	3D0A	sz      Z
01E4	4461	xor     a, rb10
01E5	390A	snz     Z
01E6	29E8	jmp     _L3
				;26		    {
				;27		        LED_Breathe_ON;       	//01E7	3794	clr     PA7
				;28		    }
				;29		    if(PWMCnt == PWM_CYCLE)   	//				_L3:
01E8	4743	mov     a, PWMCnt[0]
01E9	40E0	mov     ra10, a
01EA	4744	mov     a, PWMCnt[1]
01EB	40E1	mov     rb10, a
01EC	4760	mov     a, ra10
01ED	0C0C	xor     a, CH
01EE	4561	or      a, rb10
01EF	390A	snz     Z
01F0	29F4	jmp     _L4
				;30		    {
				;31		        LED_Breathe_OFF;      	//01F1	3394	set     PA7
				;32		        PWMCnt = 0;              //01F2	5F43	clr     PWMCnt[0]
01F3	5F44	clr     PWMCnt[1]
				;33		    }
				;34		    if((HuxiCnt == HUXI_VAL) && (direc_flag == 0))
				_L4:
01F4	4745	mov     a, HuxiCnt[0]
01F5	40E0	mov     ra10, a
01F6	4746	mov     a, HuxiCnt[1]
01F7	40E1	mov     rb10, a
01F8	4760	mov     a, ra10
01F9	0C40	xor     a, 40H
01FA	4761	mov     a, rb10
01FB	3D0A	sz      Z
01FC	0C06	xor     a, 6H
01FD	390A	snz     Z
01FE	2A1C	jmp     _L5
01FF	4720	mov     a, maiFlagA[0]
0200	40E0	mov     ra10, a
0201	0F40	mov     a, 40H
0202	46E0	andm    a, ra10
0203	50E0	sz      ra10
0204	2A1C	jmp     _L5
				;35		    {                               //				;36		        HuxiCnt = 0;
0205	5F45	clr     HuxiCnt[0]
0206	5F46	clr     HuxiCnt[1]
				;37		        PWMValu++;
0207	4747	mov     a, PWMValu[0]
0208	40E0	mov     ra10, a
0209	4748	mov     a, PWMValu[1]
020A	40E1	mov     rb10, a
020B	54E0	inc     ra10
020C	3D0A	sz      Z
020D	54E1	inc     rb10
020E	4760	mov     a, ra10
020F	40C7	mov     PWMValu[0], a
0210	4761	mov     a, rb10
0211	40C8	mov     PWMValu[1], a
				;38		        if(PWMValu == PWM_CYCLE)  	//0212	4747	mov     a, PWMValu[0]
0213	40E0	mov     ra10, a
0214	4748	mov     a, PWMValu[1]
0215	40E1	mov     rb10, a
0216	4760	mov     a, ra10
0217	0C0C	xor     a, CH
0218	4561	or      a, rb10
0219	390A	snz     Z
021A	2A1C	jmp     _L5
				;39		            direc_flag = 1; 
021B	7320	set     maiFlagA[0].6
				;40		    }
				;41	 	    if((HuxiCnt == HUXI_VAL) && (direc_flag == 1))
				_L5:
021C	4745	mov     a, HuxiCnt[0]
021D	40E0	mov     ra10, a
021E	4746	mov     a, HuxiCnt[1]
021F	40E1	mov     rb10, a
0220	4760	mov     a, ra10
0221	0C40	xor     a, 40H
0222	4761	mov     a, rb10
0223	3D0A	sz      Z
0224	0C06	xor     a, 6H
0225	390A	snz     Z
0226	2A46	jmp     _L1
0227	4720	mov     a, maiFlagA[0]
0228	40E0	mov     ra10, a
0229	0F40	mov     a, 40H
022A	46E0	andm    a, ra10
022B	50E0	sz      ra10
022C	2A2E	jmp     _LI2
022D	2A46	jmp     _L1
				;42		    {                               //				;43		        HuxiCnt = 0;
				_LI2:
022E	5F45	clr     HuxiCnt[0]
022F	5F46	clr     HuxiCnt[1]
				;44		        PWMValu--;
0230	4747	mov     a, PWMValu[0]
0231	40E0	mov     ra10, a
0232	4748	mov     a, PWMValu[1]
0233	40E1	mov     rb10, a
0234	0FFF	mov     a, FFH
0235	43E0	addm    a, ra10
0236	0FFF	mov     a, FFH
0237	53E1	adcm    a, rb10
0238	4760	mov     a, ra10
0239	40C7	mov     PWMValu[0], a
023A	4761	mov     a, rb10
023B	40C8	mov     PWMValu[1], a
				;45		        if(PWMValu == 1)          //023C	4747	mov     a, PWMValu[0]
023D	40E0	mov     ra10, a
023E	4748	mov     a, PWMValu[1]
023F	40E1	mov     rb10, a
0240	4760	mov     a, ra10
0241	0C01	xor     a, 1H
0242	4561	or      a, rb10
0243	390A	snz     Z
0244	2A46	jmp     _L1
				;46		            direc_flag = 0; 
0245	7720	clr     maiFlagA[0].6
				_L1:
0246	0003	ret
				;47		    } 	
				;48		}	
				;49	}
				;50	
				;51	/*****************************************************************/
				;52	extern  int ntc_val;		
				;53	//				;54	void HeatCtrDuty(u16 step_15)
				;55	{
				;56		if(!EnADCFlag)	
				_HeatCtrDuty:
				_HeatCtrDuty:
0247	4721	mov     a, maiFlagB[0]
0248	40DC	mov     ra, a
0249	0F10	mov     a, 10H
024A	46DC	andm    a, ra
024B	50DC	sz      ra
024C	2A5B	jmp     _L7
				;57		{
				;58			_tm0al = ((step_15&0xff));
024D	4779	mov     a, step_15[0]
024E	40DC	mov     ra, a
024F	475C	mov     a, ra
0250	00B3	mov     TM0AL, a
				;59			_tm0ah = ((step_15>>8));
0251	4779	mov     a, step_15[0]
0252	40DC	mov     ra, a
0253	477A	mov     a, step_15[1]
0254	40DD	mov     rb, a
0255	475D	mov     a, rb
0256	40DC	mov     ra, a
0257	5F5D	clr     rb
0258	475C	mov     a, ra
0259	00B4	mov     TM0AH, a
025A	2A5D	jmp     _L6
				;60		}
				;61		else
				;62		{
				;63			_tm0al = 0;		//				_L7:
025B	1F33	clr     TM0AL
				;64			_tm0ah = 0;		
025C	1F34	clr     TM0AH
				_L6:
025D	0003	ret
				;65		}	
				;66	}
				;67	/*********************************************************/
				;68	void TimerInit(void)
				;69	{               
				;70	//time0 PWM
				;71		_wdtc = 0xA8;  	
				_TimerInit:
				_TimerInit:
025E	0FA8	mov     a, A8H
025F	009A	mov     WDTC, a
				;72		_pac0 = 0;//PA0 output--PWM0260	3415	clr     PAC0
				;73		_t0cp = 1;//TP0(PA0)0261	3019	set     T0CP
				;74	
				;75		//				;76	//	_smod = 0x01;//fsys = fH   bit0 = 1
				;77		
				;78		//-------STM init-------
				;79		//				;80		_tm0al = 0x00;//0262	1F33	clr     TM0AL
				;81		_tm0ah = 0x00;//0263	1F34	clr     TM0AH
				;82		_tm0dl = 0x00;
0264	1F31	clr     TM0DL
				;83		_tm0dh = 0x00; 
0265	1F32	clr     TM0DH
				;84		_tm0rp = 0x08;//0266	0F08	mov     a, 8H
0267	00B5	mov     TM0RP, a
				;85		_tm0c1 = 0xA4;//0268	0FA4	mov     a, A4H
0269	00B0	mov     TM0C1, a
				;86		_tm0c0 = 0x28;//026A	0F28	mov     a, 28H
026B	00AF	mov     TM0C0, a
				;87	/*********************  TM_2 INIT ******************************************************/
				;88		_t2cp = 0;
026C	3519	clr     T2CP
				;89		_tm2al = 0xc8;     //  03e8  500us  07d0 = 1ms   c8 = 100us
026D	0FC8	mov     a, C8H
026E	00AC	mov     TM2AL, a
				;90		_tm2ah = 0x00;
026F	1F2D	clr     TM2AH
				;91		_tm2rp = 0xff;
0270	1FAE	set     TM2RP
				;92	
				;93		_tm2c1 = 0b11000001;     // 0271	0FC1	mov     a, C1H
0272	00A9	mov     TM2C1, a
				;94		_tm2c0 = 0b00001000;		// Tm2 0273	0F08	mov     a, 8H
0274	00A8	mov     TM2C0, a
				;95		
				;96		_t2af = 1;		// 0275	3392	set     T2AF
				;97		_t2ae = 1;		// a 0276	3192	set     T2AE
				;98		_mf2e = 0;		//0277	348F	clr     MF2E
				;99		
				;100		_mf1f = 1;
0278	320F	set     MF1F
				;101		_mf1e = 1;
0279	300F	set     MF1E
				;102			
				;103	/**************					;104		_int0s0 = 1;_int0s1 = 1;			// 10 027A	300D	set     INT0S0
027B	308D	set     INT0S1
				;105	    _int0e = true;  
027C	308E	set     INT0E
				;106		_emi = 1;      
027D	300E	set     EMI
				;107		Time1SClearCnt = 0;      
027E	0FD7	mov     a, D7H
027F	0083	mov     MP1, a
0280	0F01	mov     a, 1H
0281	0081	mov     MP0, a
0282	0701	mov     a, MP0
0283	0084	mov     BP, a
0284	0F00	mov     a, 0H
0285	0082	mov     [02H], a
0286	0003	ret
				;108	}
				;109	
				;110	/*********************************************************************************************************
				;111	** 				;112	** 				;113	** 				;114	** 				;115	** 				;116	** 				;117	********************************************************************************************************/
				;118	u16 Time100uSCnt = 0;
				;119	u16 ChargPlusDly = 0;
				;120	/**********************************************************
				;121	
				;122	 * 				;123	 * 				;124	 * 				;125	 * 				;126	 * 				;127	 **********************************************************/
				;128	unsigned char scan_num = 0;//				;129	void LEDDispKeyScan(void)
				;130	{
				;131		scan_num++;	
				_LEDDispKeyScan:
				_LEDDispKeyScan:
0287	474D	mov     a, scan_num[0]
0288	40E0	mov     ra10, a
0289	54E0	inc     ra10
028A	4760	mov     a, ra10
028B	40CD	mov     scan_num[0], a
				;132		switch(scan_num)	
028C	474D	mov     a, scan_num[0]
028D	40E0	mov     ra10, a
028E	5F61	clr     rb10
028F	4760	mov     a, ra10
0290	0C01	xor     a, 1H
0291	4561	or      a, rb10
0292	3D0A	sz      Z
0293	2AA4	jmp     _L12
0294	4760	mov     a, ra10
0295	0C02	xor     a, 2H
0296	4561	or      a, rb10
0297	3D0A	sz      Z
0298	2AB0	jmp     _L13
0299	4760	mov     a, ra10
029A	0C03	xor     a, 3H
029B	4561	or      a, rb10
029C	3D0A	sz      Z
029D	2ABC	jmp     _L14
029E	4760	mov     a, ra10
029F	0C04	xor     a, 4H
02A0	4561	or      a, rb10
02A1	3D0A	sz      Z
02A2	2AC8	jmp     _L15
				;133		{
				;134			case 1://				;135				if(LEDSta[0] == 1)	//				_L12:
02A4	472F	mov     a, LEDSta[0]
02A5	40E0	mov     ra10, a
02A6	5760	sdza    ra10
02A7	2AAC	jmp     _L16
				;136				{
				;137					COM2_ON;
02A8	3140	set     PC2
				;138					COM3_ON;
02A9	3094	set     PA1
				;139					COM1_OFF;
02AA	34C0	clr     PC1
				;140				}
				;141				else				//				;142				{
				;143					COM2_OFF;
				_L16:
02AC	3540	clr     PC2
				;144					COM3_OFF;
02AD	3494	clr     PA1
				;145					COM1_OFF;				
02AE	34C0	clr     PC1
				;146				}
				;147				break;
02AB	2AD4	jmp     _L10
02AF	2AD4	jmp     _L10
				;148			case 2:
				;149				if(LEDSta[1] == 1)	//				_L13:
02B0	4730	mov     a, LEDSta[1]
02B1	40E0	mov     ra10, a
02B2	5760	sdza    ra10
02B3	2AB8	jmp     _L19
				;150				{				
				;151					COM1_ON;
02B4	30C0	set     PC1
				;152					COM2_OFF;
02B5	3540	clr     PC2
				;153					COM3_OFF;
02B6	3494	clr     PA1
				;154				}
				;155				else
				;156				{
				;157					COM2_OFF;
				_L19:
02B8	3540	clr     PC2
				;158					COM3_OFF;
02B9	3494	clr     PA1
				;159					COM1_OFF;				
02BA	34C0	clr     PC1
				;160				}
				;161				break;
02B7	2AD4	jmp     _L10
02BB	2AD4	jmp     _L10
				;162			case 3:	
				;163				if(LEDSta[2] == 1)	//				_L14:
02BC	4731	mov     a, LEDSta[2]
02BD	40E0	mov     ra10, a
02BE	5760	sdza    ra10
02BF	2AC4	jmp     _L21
				;164				{
				;165					COM1_ON;
02C0	30C0	set     PC1
				;166					COM2_ON;
02C1	3140	set     PC2
				;167					COM3_OFF;
02C2	3494	clr     PA1
				;168				}
				;169				else
				;170				{
				;171					COM2_OFF;
				_L21:
02C4	3540	clr     PC2
				;172					COM3_OFF;
02C5	3494	clr     PA1
				;173					COM1_OFF;				
02C6	34C0	clr     PC1
				;174				}
				;175				break;
02C3	2AD4	jmp     _L10
02C7	2AD4	jmp     _L10
				;176	      	case 4:
				;177				if(LEDSta[3] == 1)	//				_L15:
02C8	4732	mov     a, LEDSta[3]
02C9	40E0	mov     ra10, a
02CA	5760	sdza    ra10
02CB	2AD0	jmp     _L23
				;178				{
				;179					COM3_ON;
02CC	3094	set     PA1
				;180					COM1_OFF;
02CD	34C0	clr     PC1
				;181					COM2_OFF;
02CE	3540	clr     PC2
02CF	2AD3	jmp     _L24
				;182				}
				;183				else
				;184				{
				;185					COM2_OFF;
				_L23:
02D0	3540	clr     PC2
				;186					COM3_OFF;
02D1	3494	clr     PA1
				;187					COM1_OFF;				
02D2	34C0	clr     PC1
				;188				}
				;189	 			scan_num = 0;
				_L24:
02D3	5F4D	clr     scan_num[0]
				;190		      	break;
				_L10:
02D4	0003	ret
				;191	      default:
				;192		      break;
02A3	2AD4	jmp     _L10
				;193	   }
				;194	}
				;195	
				;196	#define CNT_4MS		40 	//4ms
				;197	#define CNT_1S		250	//1s
				;198	void __attribute((interrupt(0x10))) ISR_tmr2 (void)
				;199	{
				@dummy12 .SECTION 'CODE'
				@ISR_tmr2_code .SECTION 'CODE'
0010	40E4	mov     r110, a
				L0011:
0011	0704	mov     a, BP
0012	40E5	mov     r210, a
0013	2AD5	jmp     _ISR_tmr2
				_ISR_tmr2:
				_ISR_tmr2:
02D5	070A	mov     a, STATUS
02D6	40E6	mov     r310, a
02D7	0703	mov     a, MP1
02D8	40E7	mov     r410, a
02D9	0701	mov     a, MP0
02DA	40E8	mov     r510, a
02DB	0707	mov     a, TBLP
02DC	40E9	mov     r610, a
02DD	0709	mov     a, TBHP
02DE	40EA	mov     r710, a
				;200	//	static u8 i =0;
				;201	//	u8 j = 0;
				;202		_t2af = 0;
02DF	3792	clr     T2AF
				;203		Time100uSCnt++;	
02E0	4749	mov     a, Time100uSCnt[0]
02E1	40E0	mov     ra10, a
02E2	474A	mov     a, Time100uSCnt[1]
02E3	40E1	mov     rb10, a
02E4	54E0	inc     ra10
02E5	3D0A	sz      Z
02E6	54E1	inc     rb10
02E7	4760	mov     a, ra10
02E8	40C9	mov     Time100uSCnt[0], a
02E9	4761	mov     a, rb10
02EA	40CA	mov     Time100uSCnt[1], a
				;204		LED_Breathe();						//02EB	21B5	call    _LED_Breathe
				;205		if(Time100uSCnt >= CNT_4MS)			//4ms
02EC	4749	mov     a, Time100uSCnt[0]
02ED	40E0	mov     ra10, a
02EE	474A	mov     a, Time100uSCnt[1]
02EF	40E1	mov     rb10, a
02F0	0F27	mov     a, 27H
02F1	4260	sub     a, ra10
02F2	0F00	mov     a, 0H
02F3	5261	sbc     a, rb10
02F4	3C0A	sz      C
02F5	2BD3	jmp     _L25
				;206		{
				;207			Time100uSCnt = 0;
02F6	5F49	clr     Time100uSCnt[0]
02F7	5F4A	clr     Time100uSCnt[1]
				;208			LEDDispKeyScan();				//4ms02F8	2287	call    _LEDDispKeyScan
				;209			Time4mSCnt++;
02F9	4742	mov     a, Time4mSCnt[0]
02FA	40E0	mov     ra10, a
02FB	54E0	inc     ra10
02FC	4760	mov     a, ra10
02FD	40C2	mov     Time4mSCnt[0], a
				;210			if((Time4mSCnt&0x0f) == 0x0e)	//02FE	4742	mov     a, Time4mSCnt[0]
02FF	40E0	mov     ra10, a
0300	5F61	clr     rb10
0301	0F0F	mov     a, FH
0302	46E0	andm    a, ra10
0303	0F00	mov     a, 0H
0304	46E1	andm    a, rb10
0305	4760	mov     a, ra10
0306	0C0E	xor     a, EH
0307	4561	or      a, rb10
0308	390A	snz     Z
0309	2B0B	jmp     _L27
				;211			{
				;212				EnADCFlag = true;			
030A	7221	set     maiFlagB[0].4
				;213			}
				;214			if((Time4mSCnt&0x0f) == 0x0f)	//67ms				_L27:
030B	4742	mov     a, Time4mSCnt[0]
030C	40E0	mov     ra10, a
030D	5F61	clr     rb10
030E	0F0F	mov     a, FH
030F	46E0	andm    a, ra10
0310	0F00	mov     a, 0H
0311	46E1	andm    a, rb10
0312	4760	mov     a, ra10
0313	0C0F	xor     a, FH
0314	4561	or      a, rb10
0315	390A	snz     Z
0316	2B18	jmp     _L28
				;215			{
				;216				TaskBatRdyFlag = true;
0317	73A1	set     maiFlagB[0].7
				;217			}
				;218			if((Time4mSCnt&0x03) == 0x03)	//12ms				_L28:
0318	4742	mov     a, Time4mSCnt[0]
0319	40E0	mov     ra10, a
031A	5F61	clr     rb10
031B	0F03	mov     a, 3H
031C	46E0	andm    a, ra10
031D	0F00	mov     a, 0H
031E	46E1	andm    a, rb10
031F	4760	mov     a, ra10
0320	0C03	xor     a, 3H
0321	4561	or      a, rb10
0322	390A	snz     Z
0323	2B25	jmp     _L29
				;219			{
				;220				TaskADRdyFlag = true;
0324	72A1	set     maiFlagB[0].5
				;221			}
				;222			TaskBuzzerRdy  = true;
				_L29:
0325	71A2	set     LEDG[0].3
				;223			ChargPlusDly++;
0326	474B	mov     a, ChargPlusDly[0]
0327	40E0	mov     ra10, a
0328	474C	mov     a, ChargPlusDly[1]
0329	40E1	mov     rb10, a
032A	54E0	inc     ra10
032B	3D0A	sz      Z
032C	54E1	inc     rb10
032D	4760	mov     a, ra10
032E	40CB	mov     ChargPlusDly[0], a
032F	4761	mov     a, rb10
0330	40CC	mov     ChargPlusDly[1], a
				;224			if((Time4mSCnt & 0x02) == 0x02)	//0331	4742	mov     a, Time4mSCnt[0]
0332	40E0	mov     ra10, a
0333	5F61	clr     rb10
0334	0F02	mov     a, 2H
0335	46E0	andm    a, ra10
0336	0F00	mov     a, 0H
0337	46E1	andm    a, rb10
0338	4760	mov     a, ra10
0339	4561	or      a, rb10
033A	3D0A	sz      Z
033B	2B3D	jmp     _L30
				;225				TaskKeyRdy = true;
033C	72A2	set     LEDG[0].5
				;226			Open5V200msCnt++;
				_L30:
033D	4737	mov     a, Open5V200msCnt[0]
033E	40E0	mov     ra10, a
033F	4738	mov     a, Open5V200msCnt[1]
0340	40E1	mov     rb10, a
0341	54E0	inc     ra10
0342	3D0A	sz      Z
0343	54E1	inc     rb10
0344	4760	mov     a, ra10
0345	40B7	mov     Open5V200msCnt[0], a
0346	4761	mov     a, rb10
0347	40B8	mov     Open5V200msCnt[1], a
				;227			Time500mSCnt++;		
0348	4741	mov     a, Time500mSCnt[0]
0349	40E0	mov     ra10, a
034A	54E0	inc     ra10
034B	4760	mov     a, ra10
034C	40C1	mov     Time500mSCnt[0], a
				;228			if(Time4mSCnt >= CNT_1S)		//1s
034D	4742	mov     a, Time4mSCnt[0]
034E	40E0	mov     ra10, a
034F	0FF9	mov     a, F9H
0350	4260	sub     a, ra10
0351	3C0A	sz      C
0352	2B9B	jmp     _L31
				;229			{
				;230				Time4mSCnt = 0;
0353	5F42	clr     Time4mSCnt[0]
				;231				Time1SCnt++;
0354	4739	mov     a, Time1SCnt[0]
0355	40E0	mov     ra10, a
0356	54E0	inc     ra10
0357	4760	mov     a, ra10
0358	40B9	mov     Time1SCnt[0], a
				;232				Sys1SCnt++;
0359	473A	mov     a, Sys1SCnt[0]
035A	40E0	mov     ra10, a
035B	54E0	inc     ra10
035C	4760	mov     a, ra10
035D	40BA	mov     Sys1SCnt[0], a
				;233				Time1SClearCnt++;
035E	0FD7	mov     a, D7H
035F	0083	mov     MP1, a
0360	0F01	mov     a, 1H
0361	0081	mov     MP0, a
0362	0701	mov     a, MP0
0363	0084	mov     BP, a
0364	0702	mov     a, [02H]
0365	40E0	mov     ra10, a
0366	54E0	inc     ra10
0367	0FD7	mov     a, D7H
0368	0083	mov     MP1, a
0369	0F01	mov     a, 1H
036A	0081	mov     MP0, a
036B	0701	mov     a, MP0
036C	0084	mov     BP, a
036D	4760	mov     a, ra10
036E	0082	mov     [02H], a
				;234				SumOfEdge++;
036F	473D	mov     a, SumOfEdge[0]
0370	40E0	mov     ra10, a
0371	54E0	inc     ra10
0372	4760	mov     a, ra10
0373	40BD	mov     SumOfEdge[0], a
				;235				Stay45Cnt++;				//0374	4740	mov     a, Stay45Cnt[0]
0375	40E0	mov     ra10, a
0376	54E0	inc     ra10
0377	4760	mov     a, ra10
0378	40C0	mov     Stay45Cnt[0], a
				;236				if(WorkMode == READY_MODE)	//0379	4733	mov     a, WorkMode[0]
037A	40E0	mov     ra10, a
037B	50E0	sz      ra10
037C	2B82	jmp     _L32
				;237				{
				;238					SleepCnt++;				
037D	4724	mov     a, SleepCnt[0]
037E	40E0	mov     ra10, a
037F	54E0	inc     ra10
0380	4760	mov     a, ra10
0381	40A4	mov     SleepCnt[0], a
				;239				}
				;240				if((Sys1SCnt % 5) == 0)
				_L32:
0382	473A	mov     a, Sys1SCnt[0]
0383	40E0	mov     ra10, a
0384	5F77	clr     rb04[4]
0385	4760	mov     a, ra10
0386	40F4	mov     rb04[1], a
0387	0F05	mov     a, 5H
0388	40F5	mov     rb04[2], a
0389	65ED	call    L0DED
038A	4776	mov     a, rb04[3]
038B	40E0	mov     ra10, a
038C	50E0	sz      ra10
038D	2B8F	jmp     _L33
				;241				{
				;242					Task5SFlag = true;
038E	7123	set     LEDH[0].2
				;243				}
				;244				if(BATLow3p5Flag)			//				_L33:
038F	4722	mov     a, LEDG[0]
0390	40E0	mov     ra10, a
0391	0F02	mov     a, 2H
0392	46E0	andm    a, ra10
0393	50E0	sz      ra10
0394	2B96	jmp     _LI3
0395	2B9B	jmp     _L31
				;245				{
				;246					LowBatShutDnSCnt++;
				_LI3:
0396	473B	mov     a, LowBatShutDnSCnt[0]
0397	40E0	mov     ra10, a
0398	54E0	inc     ra10
0399	4760	mov     a, ra10
039A	40BB	mov     LowBatShutDnSCnt[0], a
				;247				}
				;248			}
				;249			if(Time500mSCnt >= 125)			//500ms
				_L31:
039B	4741	mov     a, Time500mSCnt[0]
039C	40E0	mov     ra10, a
039D	0F7C	mov     a, 7CH
039E	4260	sub     a, ra10
039F	3C0A	sz      C
03A0	2BA3	jmp     _L34
				;250			{			
				;251				Task500msFlag = true;
03A1	70A3	set     LEDH[0].1
				;252				Time500mSCnt = 0;
03A2	5F41	clr     Time500mSCnt[0]
				;253			}
				;254			if(Time1SClearCnt >= 5)			//5S				_L34:
03A3	0FD7	mov     a, D7H
03A4	0083	mov     MP1, a
03A5	0F01	mov     a, 1H
03A6	0081	mov     MP0, a
03A7	0701	mov     a, MP0
03A8	0084	mov     BP, a
03A9	0702	mov     a, [02H]
03AA	40E0	mov     ra10, a
03AB	0F04	mov     a, 4H
03AC	4260	sub     a, ra10
03AD	3C0A	sz      C
03AE	2BB9	jmp     _L35
				;255			{
				;256				Time1SClearCnt = 0;
03AF	0FD7	mov     a, D7H
03B0	0083	mov     MP1, a
03B1	0F01	mov     a, 1H
03B2	0081	mov     MP0, a
03B3	0701	mov     a, MP0
03B4	0084	mov     BP, a
03B5	0F00	mov     a, 0H
03B6	0082	mov     [02H], a
				;257				IntCnt = 0;
03B7	5F3F	clr     IntCnt[0]
				;258				ChargIngFlag = false;
03B8	7721	clr     maiFlagB[0].6
				;259			}
				;260			if(Sys1SCnt >= 60)
				_L35:
03B9	473A	mov     a, Sys1SCnt[0]
03BA	40E0	mov     ra10, a
03BB	0F3B	mov     a, 3BH
03BC	4260	sub     a, ra10
03BD	3C0A	sz      C
03BE	2BD3	jmp     _L25
				;261			{
				;262				Sys1SCnt = 0;
03BF	5F3A	clr     Sys1SCnt[0]
				;263				if(BATUp4p1Flag)					//4.1V03C0	4722	mov     a, LEDG[0]
03C1	40E0	mov     ra10, a
03C2	0F04	mov     a, 4H
03C3	46E0	andm    a, ra10
03C4	50E0	sz      ra10
03C5	2BC7	jmp     _LI4
03C6	2BD3	jmp     _L25
				;264				{
				;265					BATChargeFullCnt++;
				_LI4:
03C7	473C	mov     a, BATChargeFullCnt[0]
03C8	40E0	mov     ra10, a
03C9	54E0	inc     ra10
03CA	4760	mov     a, ra10
03CB	40BC	mov     BATChargeFullCnt[0], a
				;266					if(BATChargeFullCnt >= CHARG_FULL_TIME)
03CC	473C	mov     a, BATChargeFullCnt[0]
03CD	40E0	mov     ra10, a
03CE	0F02	mov     a, 2H
03CF	4260	sub     a, ra10
03D0	3C0A	sz      C
03D1	2BD3	jmp     _L25
				;267					{
				;268						ChargeFullFlag = true;		//03D2	7023	set     LEDH[0].0
				_L25:
03D3	4765	mov     a, r210
03D4	0084	mov     BP, a
03D5	4766	mov     a, r310
03D6	008A	mov     STATUS, a
03D7	4767	mov     a, r410
03D8	0083	mov     MP1, a
03D9	4768	mov     a, r510
03DA	0081	mov     MP0, a
03DB	4769	mov     a, r610
03DC	0087	mov     TBLP, a
03DD	476A	mov     a, r710
03DE	0089	mov     TBHP, a
03DF	1D05	tabrd   ACC
03E0	4764	mov     a, r110
03E1	0004	reti
				;269					}
				;270				}
				;271			}			
				;272		} 	
				;273	}
				;274	/*********************************************************************************************************/
				;275	
				;276	void __attribute((interrupt(0x0c))) ISR_tmr0 (void)
				;277	{
				@ISR_tmr0_code .SECTION 'CODE'
000C	40EB	mov     r10c, a
000D	070A	mov     a, STATUS
000E	40EC	mov     r20c, a
000F	2BE2	jmp     _ISR_tmr0
				;278	/*	_t0af=0;*/									// clr TM0 Comparator A match interrupt req flg.
				;279		_t0pf = 0;//				_ISR_tmr0:
				_ISR_tmr0:
03E2	3611	clr     T0PF
				;280		_nop();	
03E3	0000	nop
03E4	476C	mov     a, r20c
03E5	008A	mov     STATUS, a
03E6	476B	mov     a, r10c
03E7	0004	reti
				;281	}
				;282	
				;283	/*********************************************************************************************************
				;284	** 				;285	** 				;286	** 				;287	** 				;288	** 				;289	** 				;290	********************************************************************************************************/
				;291	void __attribute((interrupt(0x04))) ISR_int0 (void)
				;292	{
				@ISR_int0_code .SECTION 'CODE'
0004	40ED	mov     r104, a
0005	0704	mov     a, BP
0006	40EE	mov     r204, a
0007	2BE8	jmp     _ISR_int0
				@dummy4 .SECTION 'CODE'
0008	0000	nop
0009	0000	nop
000A	0000	nop
000B	0000	nop
				_ISR_int0:
				_ISR_int0:
03E8	070A	mov     a, STATUS
03E9	40EF	mov     r304, a
03EA	0703	mov     a, MP1
03EB	40F0	mov     r404, a
03EC	0701	mov     a, MP0
03ED	40F1	mov     r504, a
				;293	    _int0f=0;
03EE	360E	clr     INT0F
				;294		if((ChargPlusDly > 170 ) && (ChargPlusDly < 350))	//03EF	474B	mov     a, ChargPlusDly[0]
03F0	40F2	mov     ra04, a
03F1	474C	mov     a, ChargPlusDly[1]
03F2	40F3	mov     rb04, a
03F3	0FAA	mov     a, AAH
03F4	4272	sub     a, ra04
03F5	0F00	mov     a, 0H
03F6	5273	sbc     a, rb04
03F7	3C0A	sz      C
03F8	2C18	jmp     _L38
03F9	474B	mov     a, ChargPlusDly[0]
03FA	40F2	mov     ra04, a
03FB	474C	mov     a, ChargPlusDly[1]
03FC	40F3	mov     rb04, a
03FD	0F5D	mov     a, 5DH
03FE	4272	sub     a, ra04
03FF	0F01	mov     a, 1H
0400	5273	sbc     a, rb04
0401	380A	snz     C
0402	2C18	jmp     _L38
				;295		{		
				;296			if(IntCnt++ >= 2)								//20403	473F	mov     a, IntCnt[0]
0404	40F2	mov     ra04, a
0405	4772	mov     a, ra04
0406	40F3	mov     rb04, a
0407	5473	inca    rb04
0408	40F2	mov     ra04, a
0409	4772	mov     a, ra04
040A	40BF	mov     IntCnt[0], a
040B	0F01	mov     a, 1H
040C	4273	sub     a, rb04
040D	3C0A	sz      C
040E	2C10	jmp     _L39
				;297			{
				;298				ChargIngFlag = true;						//040F	7321	set     maiFlagB[0].6
				;299			}
				;300			Time1SClearCnt = 0;								//				_L39:
0410	0FD7	mov     a, D7H
0411	0083	mov     MP1, a
0412	0F01	mov     a, 1H
0413	0081	mov     MP0, a
0414	0701	mov     a, MP0
0415	0084	mov     BP, a
0416	0F00	mov     a, 0H
0417	0082	mov     [02H], a
				;301		}
				;302		SleepCnt = 0;										//				_L38:
0418	5F24	clr     SleepCnt[0]
				;303		ChargPlusDly = 0;
0419	5F4B	clr     ChargPlusDly[0]
041A	5F4C	clr     ChargPlusDly[1]
041B	476E	mov     a, r204
041C	0084	mov     BP, a
041D	476F	mov     a, r304
041E	008A	mov     STATUS, a
041F	4770	mov     a, r404
0420	0083	mov     MP1, a
0421	4771	mov     a, r504
0422	0081	mov     MP0, a
0423	476D	mov     a, r104
0424	0004	reti
				;304	}
				;file E:\				;1	;;--------------------------------------------------------------;;
				;2	;;    This file is part of the Holtek C Compiler V3 package     ;;
				;3	;;    For the initialization of static linkage variables        ;;
				;4	;;    Copyright (C) 2017 Holtek Semiconductor Inc.              ;;
				;5	;;    Version: 1.07 (Above IDE3000 V7.94)                       ;;
				;6	;;    Date:    2017/03/06                                        ;;
				;7	;;--------------------------------------------------------------;;
				;8	
				;9	acc equ [05h]
				;10	tblp equ [07h]
				;11	tblh equ [08h]
				;12	;;tbhp equ [09h] 
				;13	r0 equ [00h]
				;14	mp0 equ [01h]
				;15	r1 equ [02h]
				;16	mp1l equ [03h]
				;17	mp1h equ [04h]
				;18	z equ [0ah].2
				;19	c equ [0ah].0
				;20	
				;21	ifndef tbhp
				;22	tbhp equ [09h]
				;23	endif
				;24	 
				;25	extern startup_value_1:near
				;26	
				;27	@start .section 'code'
				;28	begin_startup_value:
				;29	  mov a,low (offset startup_value_1) 
				begin_startup_value:
				@start .SECTION 'CODE'
				@dummy16 .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0014	0F4E	mov     a, 4EH
				;30	  mov tblp,a
0015	0087	mov     TBLP, a
				;31	  mov a,high (offset startup_value_1) 
0016	0F00	mov     a, 0H
				;32	  mov tbhp,a
0017	0089	mov     TBHP, a
				;33	next_table:
				;34	  ;CLR WDT
				;35	  inc tblp
				next_table:
0018	1487	inc     TBLP
				;36	  sz z
0019	3D0A	sz      Z
				;37	  inc tbhp
001A	1489	inc     TBHP
				;38	ifdef USE_TABRDC
				;39	  tabrdc mp0
				;40	else
				;41	  tabrd mp0
001B	1D01	tabrd   MP0
				;42	endif
				;43	  sz mp0
001C	1081	sz      MP0
				;44	  jmp read_data
001D	281F	jmp     read_data
				;45	  jmp startupend1
001E	2834	jmp     startupend1
				;46	read_data:
				;47	  inc tblp
				read_data:
001F	1487	inc     TBLP
				;48	  sz z
0020	3D0A	sz      Z
				;49	  inc tbhp
0021	1489	inc     TBHP
				;50	ifdef USE_TABRDC
				;51	  tabrdc mp1l
				;52	else
				;53	  tabrd mp1l
0022	1D03	tabrd   MP1
				;54	endif
				;55	  mov a,tblh
0023	0708	mov     a, TBLH
				;56	  mov mp1h,a
0024	0084	mov     BP, a
				;57	next_data:
				;58	  inc tblp
				next_data:
0025	1487	inc     TBLP
				;59	  sz z
0026	3D0A	sz      Z
				;60	  inc tbhp
0027	1489	inc     TBHP
				;61	ifdef USE_TABRDC
				;62	  tabrdc acc
				;63	else
				;64	  tabrd acc
0028	1D05	tabrd   ACC
				;65	endif
				;66	  mov r1,a
0029	0082	mov     [02H], a
				;67	  sdz mp0
002A	1781	sdz     MP0
				;68	  jmp $+2
002B	282D	jmp     L002D
				;69	  jmp next_table
002C	2818	jmp     next_table
				;70	  inc mp1l
				L002D:
002D	1483	inc     MP1
				;71	  mov a,tblh
002E	0708	mov     a, TBLH
				;72	  mov r1,a
002F	0082	mov     [02H], a
				;73	  inc mp1l
0030	1483	inc     MP1
				;74	  sdz mp0
0031	1781	sdz     MP0
				;75	  jmp next_data
0032	2825	jmp     next_data
				;76	  jmp next_table
0033	2818	jmp     next_table
				;77	
				;78	;end_startup_value:
				;79	
				;80	startupend1:
				;81	ifndef Disable_Bit_Initial
				;82		MOV A,high  bitdatasec1_start
				startupend1:
0034	0F00	mov     a, 0H
				;83		MOV mp1h,a
0035	0084	mov     BP, a
				;84		MOV A,offset bitdatasec1_end
0036	0FDB	mov     a, DBH
				;85		mov mp1l,A
0037	0083	mov     MP1, a
				;86		dec mp1l
0038	1583	dec     MP1
				;87		clr z
0039	350A	clr     Z
				;88		sub a,offset bitdatasec1_start
003A	0ADB	sub     a, DBH
				;89		sz z
003B	3D0A	sz      Z
				;90		jmp startupend2
003C	2841	jmp     startupend2
				;91	L0005:
				;92		set r1
				L0005:
003D	1F82	set     [02H]
				;93		dec mp1l
003E	1583	dec     MP1
				;94		sdz  acc
003F	1785	sdz     ACC
				;95		jmp L0005
0040	283D	jmp     L0005
				;96	
				;97	startupend2:
				;98		MOV A,high  bitdatasec0_start
				startupend2:
0041	0F00	mov     a, 0H
				;99		MOV mp1h,a
0042	0084	mov     BP, a
				;100		MOV A,offset bitdatasec0_end
0043	0FDB	mov     a, DBH
				;101		mov mp1l,A
0044	0083	mov     MP1, a
				;102		dec mp1l
0045	1583	dec     MP1
				;103		clr z
0046	350A	clr     Z
				;104		sub a,offset bitdatasec0_start
0047	0ADB	sub     a, DBH
				;105		sz  z
0048	3D0A	sz      Z
				;106		jmp startupend3
0049	284E	jmp     startupend3
				;107	L0006:
				;108		clr r1
				L0006:
004A	1F02	clr     [02H]
				;109		dec mp1l
004B	1583	dec     MP1
				;110		sdz  acc
004C	1785	sdz     ACC
				;111		jmp L0006
004D	284A	jmp     L0006
				;112	startupend3:
				;113	endif		
				;114	   
				;115	@ROMDATA_BASE .SECTION com_l 'CODE'  
				;116	startup_value:
				;117	;;linker range the initial value table here
				;118	
				;119	@BITDATASEC1 .SECTION com_l 'DATA'  
				;120	bitdatasec1_start:
				;121	
				;122	@BITDATASEC1 .SECTION com_e 'DATA'  
				;123	bitdatasec1_end:
				;124	
				;125	@BITDATASEC .SECTION com_l 'DATA'  
				;126	bitdatasec0_start:
				;127	
				;128	@BITDATASEC .SECTION com_e 'DATA'  
				;129	bitdatasec0_end:
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	#define MIN_VALU		500		//				;6	
				;7	#define Temp_20C		1820//2100		//   22c   11.4239  1912
				;8	#define Temp_22C		1911//2100		//   22c   11.4239  1912
				;9	#define Temp_37C		2396//2200		//   37c   6.0053   2560
				;10	#define Temp_45C		2478//2400		//   45c   4.3558   2853
				;11	
				;12	#define Bat_4_2V		1789		//4.2v 				;13	#define Bat_3_3V		1410		//3.3V 				;14	
				;15	extern  int ntc_val;
				;16	int k;
				;17	unsigned char adcsp = 0;
				;18	unsigned int k1,k2; 
				;19	unsigned char adcsp_2 = 0;
				;20	unsigned char adcsp_1 = 0;
				;21	
				;22	#define MAX_TEMP_ARRAY	100
				;23	//				;24	//0-9
				;25	//10-19						  	
				;26	//20-29
				;27	//30-39
				;28	//40-49
				;29	//...
				;30	//90-99
				;31	const u16 AroundTemp[MAX_TEMP_ARRAY] = {2537,2488,2438,2389,2339,2289,2239,2190,2140,2091,
005B	09E9	ret     a, E9H
005C	09B8	ret     a, B8H
005D	0986	ret     a, 86H
005E	0955	ret     a, 55H
005F	0923	ret     a, 23H
0060	08F1	dc	008F1H
0061	08BF	dc	008BFH
0062	088E	dc	0088EH
0063	085C	dc	0085CH
0064	082B	dc	0082BH
0065	07F9	dc	007F9H
0066	07C9	dc	007C9H
0067	0798	dc	00798H
0068	0768	mov     a, __pcpu[38]
0069	0738	mov     a, TM1DL
006A	0709	mov     a, TBHP
006B	06DB	andm    a, __pcpu[25]
006C	06AD	andm    a, TM2AH
006D	067F	and     a, __pcpu[61]
006E	0652	and     a, __pcpu[16]
006F	0626	and     a, PBC
0070	05FB	orm     a, __pcpu[57]
0071	05D0	orm     a, __pcpu[14]
0072	05A6	orm     a, PBC
0073	057D	or      a, __pcpu[59]
0074	0555	or      a, __pcpu[19]
0075	052D	or      a, TM2AH
0076	0507	or      a, TBLP
0077	04E1	xorm    a, __pcpu[31]
0078	04BC	xorm    a, TM1RPL
0079	0498	xorm    a, __pawu[1]
007A	0474	xor     a, __pcpu[50]
007B	0452	xor     a, __pcpu[16]
007C	0430	xor     a, TM0C1
007D	0410	xor     a, INTC2
007E	03F0	addm    a, __pcpu[46]
007F	03D1	addm    a, __pcpu[15]
0080	03B2	addm    a, TM0DH
0081	0395	addm    a, PAC
0082	0378	add     a, __pcpu[54]
0083	035C	add     a, __pcpu[26]
0084	0341	add     a, PCC
0085	0327	add     a, PBPU
0086	030D	add     a, INTEG
0087	02F5	subm    a, __pcpu[51]
0088	02DD	subm    a, __pcpu[27]
0089	02C5	subm    a, __pcpu[3]
008A	02AF	subm    a, TM0C0
008B	0299	subm    a, TMPC
008C	0284	subm    a, BP
008D	026F	sub     a, __pcpu[45]
008E	025B	sub     a, __pcpu[25]
008F	0248	sub     a, __pcpu[6]
0090	0235	sub     a, TM0RP
0091	0223	sub     a, ADCR1
0092	0212	sub     a, MFI1
0093	0201	sub     a, MP0
0094	01F1	cpl     __pcpu[47]
0095	01E1	cpl     __pcpu[31]
0096	01D2	cpl     __pcpu[16]
0097	01C3	cpl     __pcpu[1]
0098	01B5	cpl     TM0RP
0099	01A7	cpl     PBPU
009A	0199	cpl     TMPC
009B	018D	cpl     INTEG
009C	0180	cpl     [00H]
009D	0174	cpla    __pcpu[50]
009E	0168	cpla    __pcpu[38]
009F	015D	cpla    __pcpu[27]
00A0	0152	cpla    __pcpu[16]
00A1	0148	cpla    __pcpu[6]
00A2	013D	cpla    TM1RPH
00A3	0134	cpla    TM0AH
00A4	012A	cpla    TM2DL
00A5	0121	cpla    ADRH
00A6	0118	cpla    __pawu[1]
00A7	010F	cpla    INTC1
00A8	0107	cpla    TBLP
00A9	00FF	mov     __pcpu[61], a
00AA	00F7	mov     __pcpu[53], a
00AB	00F0	mov     __pcpu[46], a
00AC	00E9	mov     __pcpu[39], a
00AD	00E2	mov     __pcpu[32], a
00AE	00DB	mov     __pcpu[25], a
00AF	00D4	mov     __pcpu[18], a
00B0	00CE	mov     __pcpu[12], a
00B1	00C8	mov     __pcpu[6], a
00B2	00C2	mov     PCPU, a
00B3	00BC	mov     TM1RPL, a
00B4	00B7	mov     TM1C1, a
00B5	00B1	mov     TM0DL, a
00B6	00AC	mov     TM2AL, a
00B7	00A7	mov     PBPU, a
00B8	00A2	mov     ADCR0, a
00B9	009E	mov     EEA, a
00BA	0099	mov     TMPC, a
00BB	0095	mov     PAC, a
00BC	0090	mov     INTC2, a
00BD	008C	mov     LVDC, a
00BE	0088	mov     TBLH, a
				;32							    	        2041,1993,1944,1896,1848,1801,1755,1709,1663,1618,
				;33							    			1574,1531,1488,1446,1405,1365,1325,1287,1249,1212,
				;34							    			1176,1140,1106,1072,1040,1008,977,946,917,888,
				;35							    			860,833,807,781,757,733,709,687,665,644,
				;36							    			623,603,584,565,547,530,513,497,481,466,
				;37							    			451,437,423,409,397,384,372,360,349,338,
				;38							    			328,317,308,298,289,280,271,263,255,247,
				;39							    			240,233,226,219,212,206,200,194,188,183,
				;40							    			177,172,167,162,158,153,149,144,140,136};
				;41	//45				;42	//0-9
				;43	//10-19
				;44	//20-29
				;45	//30-39
				;46	//40-49 MAX_TEMP_ARRAY
				;47	#define POSITIVE_TEMP_ARRAY		81		//0-45				;48	const int ObjPositiveTemp[POSITIVE_TEMP_ARRAY] = {1117,1097,1077,1057,1037,1017,996,975,954,933,
00BF	045D	xor     a, __pcpu[27]
00C0	0449	xor     a, __pcpu[7]
00C1	0435	xor     a, TM0RP
00C2	0421	xor     a, ADRH
00C3	040D	xor     a, INTEG
00C4	03F9	addm    a, __pcpu[55]
00C5	03E4	addm    a, __pcpu[34]
00C6	03CF	addm    a, __pcpu[13]
00C7	03BA	addm    a, TM1AL
00C8	03A5	addm    a, PB
00C9	038F	addm    a, INTC1
00CA	0379	add     a, __pcpu[55]
00CB	0363	add     a, __pcpu[33]
00CC	034D	add     a, __pcpu[11]
00CD	0337	add     a, TM1C1
00CE	0320	add     a, ADRL
00CF	0309	add     a, TBHP
00D0	02F2	subm    a, __pcpu[48]
00D1	02DA	subm    a, __pcpu[24]
00D2	02C3	subm    a, __pcpu[1]
00D3	02AB	subm    a, TM2DH
00D4	0293	subm    a, MFI2
00D5	027A	sub     a, __pcpu[56]
00D6	0261	sub     a, __pcpu[31]
00D7	0249	sub     a, __pcpu[7]
00D8	022F	sub     a, TM0C0
00D9	0216	sub     a, PAPU
00DA	01FC	cpl     __pcpu[58]
00DB	01E2	cpl     __pcpu[32]
00DC	01C8	cpl     __pcpu[6]
00DD	01AE	cpl     TM2RP
00DE	0193	cpl     MFI2
00DF	0178	cpla    __pcpu[54]
00E0	015D	cpla    __pcpu[27]
00E1	0141	cpla    PCC
00E2	0125	cpla    PB
00E3	0109	cpla    TBHP
00E4	00ED	mov     __pcpu[43], a
00E5	00D0	mov     __pcpu[14], a
00E6	00B3	mov     TM0AL, a
00E7	0096	mov     PAPU, a
00E8	0079	dc	00079H
00E9	005B	dc	0005BH
00EA	003D	dc	0003DH
00EB	001F	dc	0001FH
00EC	0000	nop
00ED	FFE1	dc	0FFE1H
00EE	FFC2	dc	0FFC2H
00EF	FFA2	dc	0FFA2H
00F0	FF83	dc	0FF83H
00F1	FF63	dc	0FF63H
00F2	FF43	dc	0FF43H
00F3	FF2E	dc	0FF2EH
00F4	FF10	dc	0FF10H
00F5	FEF2	dc	0FEF2H
00F6	FEC3	dc	0FEC3H
00F7	FEA5	dc	0FEA5H
00F8	FE84	dc	0FE84H
00F9	FE66	dc	0FE66H
00FA	FE34	dc	0FE34H
00FB	FE17	dc	0FE17H
00FC	FBE6	dc	0FBE6H
00FD	FB6E	dc	0FB6EH
00FE	FD63	dc	0FD63H
00FF	FD44	dc	0FD44H
0100	FD3A	dc	0FD3AH
0101	FD1C	dc	0FD1CH
0102	FCFE	dc	0FCFEH
0103	FCA7	dc	0FCA7H
0104	FC90	dc	0FC90H
0105	FC72	dc	0FC72H
0106	FC54	dc	0FC54H
0107	FC36	dc	0FC36H
0108	FBE2	dc	0FBE2H
0109	FBC8	dc	0FBC8H
010A	FBA0	dc	0FBA0H
010B	FB82	dc	0FB82H
010C	FB15	dc	0FB15H
010D	0000	nop
010E	0000	nop
010F	0000	nop
				;49							 			 			911,889,867,845,823,800,777,754,730,707,
				;50							 			 			683,659,634,609,585,559,534,508,482,456,
				;51							 			 			430,403,376,349,321,293,265,237,208,179,
				;52							 			 			150,121,91,61,31,0,-31,-62,-94,-125,
				;53							 			 			-157,-189,-210,-240,-270,-317,-347,-380,-410,-460,
				;54							 			 			-489,-510.-540,-570.-600,-669,-700,-710,-740,-770,
				;55							 			 			-857,-880,-910,-940,-970,-1054,-1080,-1120,-1150,
				;56							 			 			-1259};	//				;57	#define NAGATIVE_TEMP_ARRAY		46		//0-45				;58							 			 
				;59	//const u16 ObjPositiveTemp[POSITIVE_TEMP_ARRAY] = {1117,1097,1077,1057,1037,1017,996,975,954,933,
				;60	//						 			 911,889,867,845,823,800,777,754,730,707,
				;61	//						 			 683,659,634,609,585,559,534,508,482,456,
				;62	//						 			 430,403,376,349,321,293,265,237,208,179,
				;63	//						 			 150,121,91,61,31,0};	//				;64							 
				;65	#define FOUR_DEGREES		150		//4				;66	#define BIAS_VALU			2047	//				;67	#define TEMP_ADD_H			282		//				;68	#define TEMP_ADD_STAY		191		//				;69	#define TEMP_ADD_L			482		//				;70	#define TEMP_DEC			200		//				;71	#define TEMP_30				453		//30				;72	u8 AroudTempIndex = 0;				//				;73	
				;74	//				;75	void GetPTCValu(void)  
				;76	{
				;77		unsigned char i;
				;78		unsigned int min,max;
				;79		volatile static unsigned short adcBuf[10] __attribute__ ((at(0x1c0)));  // 1C0-1d5
				;80	
				;81		_adcr0 = ADC_NTC;			//	NTC				_GetPTCValu:
				_GetPTCValu:
06AB	0F13	mov     a, 13H
06AC	00A2	mov     ADCR0, a
				;82		STAR_ADC();
06AD	37A2	clr     START
06AE	33A2	set     START
06AF	37A2	clr     START
				;83		while(_eocb);				// 				_L2:
06B0	0722	mov     a, ADCR0
06B1	40DC	mov     ra, a
06B2	0F40	mov     a, 40H
06B3	46DC	andm    a, ra
06B4	50DC	sz      ra
06B5	2EB0	jmp     _L2
				;84	    
				;85	    k = _adrh;
06B6	0721	mov     a, ADRH
06B7	40DC	mov     ra, a
06B8	5F5D	clr     rb
06B9	475C	mov     a, ra
06BA	40D2	mov     k[0], a
06BB	475D	mov     a, rb
06BC	40D3	mov     k[1], a
				;86	    k <<= 8;
06BD	4752	mov     a, k[0]
06BE	40DC	mov     ra, a
06BF	4753	mov     a, k[1]
06C0	40DD	mov     rb, a
06C1	475C	mov     a, ra
06C2	40DD	mov     rb, a
06C3	5F5C	clr     ra
06C4	475C	mov     a, ra
06C5	40D2	mov     k[0], a
06C6	475D	mov     a, rb
06C7	40D3	mov     k[1], a
				;87	    k += _adrl;
06C8	0720	mov     a, ADRL
06C9	40DC	mov     ra, a
06CA	475C	mov     a, ra
06CB	40DE	mov     rc, a
06CC	5F5F	clr     rd
06CD	4752	mov     a, k[0]
06CE	40DC	mov     ra, a
06CF	4753	mov     a, k[1]
06D0	40DD	mov     rb, a
06D1	475E	mov     a, rc
06D2	43DC	addm    a, ra
06D3	475F	mov     a, rd
06D4	53DD	adcm    a, rb
06D5	475C	mov     a, ra
06D6	40D2	mov     k[0], a
06D7	475D	mov     a, rb
06D8	40D3	mov     k[1], a
				;88	    if(adcsp < 10) 
06D9	474E	mov     a, adcsp[0]
06DA	40DC	mov     ra, a
06DB	0F09	mov     a, 9H
06DC	425C	sub     a, ra
06DD	380A	snz     C
06DE	2EE2	jmp     _L3
				;89	    	i = adcsp;
06DF	474E	mov     a, adcsp[0]
06E0	40F9	mov     i[0], a
06E1	2EE8	jmp     _L4
				;90	    else  
				;91	    	i = adcsp - 10;
				_L3:
06E2	474E	mov     a, adcsp[0]
06E3	40DC	mov     ra, a
06E4	0FF6	mov     a, F6H
06E5	43DC	addm    a, ra
06E6	475C	mov     a, ra
06E7	40F9	mov     i[0], a
				;92	    adcBuf[i] = k;
				_L4:
06E8	4779	mov     a, i[0]
06E9	40DC	mov     ra, a
06EA	5F5D	clr     rb
06EB	4752	mov     a, k[0]
06EC	40DE	mov     rc, a
06ED	4753	mov     a, k[1]
06EE	40DF	mov     rd, a
06EF	340A	clr     C
06F0	5ADC	rlc     ra
06F1	5ADD	rlc     rb
06F2	0FC0	mov     a, C0H
06F3	43DC	addm    a, ra
06F4	0F01	mov     a, 1H
06F5	53DD	adcm    a, rb
06F6	475C	mov     a, ra
06F7	0083	mov     MP1, a
06F8	475D	mov     a, rb
06F9	0081	mov     MP0, a
06FA	0701	mov     a, MP0
06FB	0084	mov     BP, a
06FC	475E	mov     a, rc
06FD	0082	mov     [02H], a
06FE	1483	inc     MP1
06FF	475F	mov     a, rd
0700	0082	mov     [02H], a
				;93	    if(adcsp < 11) 				//0701	474E	mov     a, adcsp[0]
0702	40DC	mov     ra, a
0703	0F0A	mov     a, AH
0704	425C	sub     a, ra
0705	380A	snz     C
0706	2F0D	jmp     _L5
				;94	    {
				;95	    	adcsp++; 
0707	474E	mov     a, adcsp[0]
0708	40DC	mov     ra, a
0709	54DC	inc     ra
070A	475C	mov     a, ra
070B	40CE	mov     adcsp[0], a
				;96	    	return;
070C	6945	jmp     _L1
				;97	    }
				;98	    adcsp = 0;
				_L5:
070D	5F4E	clr     adcsp[0]
				;99	    k = adcBuf[0];
070E	0FC0	mov     a, C0H
070F	0083	mov     MP1, a
0710	0F01	mov     a, 1H
0711	0081	mov     MP0, a
0712	0701	mov     a, MP0
0713	0084	mov     BP, a
0714	0702	mov     a, [02H]
0715	40DC	mov     ra, a
0716	1483	inc     MP1
0717	0702	mov     a, [02H]
0718	40DD	mov     rb, a
0719	475C	mov     a, ra
071A	40D2	mov     k[0], a
071B	475D	mov     a, rb
071C	40D3	mov     k[1], a
				;100	    min = k;
071D	4752	mov     a, k[0]
071E	40DC	mov     ra, a
071F	4753	mov     a, k[1]
0720	40DD	mov     rb, a
0721	475C	mov     a, ra
0722	40FA	mov     min[0], a
0723	475D	mov     a, rb
0724	40FB	mov     min[1], a
				;101	    max = k;
0725	4752	mov     a, k[0]
0726	40DC	mov     ra, a
0727	4753	mov     a, k[1]
0728	40DD	mov     rb, a
0729	475C	mov     a, ra
072A	40FC	mov     max[0], a
072B	475D	mov     a, rb
072C	40FD	mov     max[1], a
				;102	    for(i=1;i<10;i++)
072D	0F01	mov     a, 1H
072E	40F9	mov     i[0], a
072F	2FA6	jmp     _L7
07A2	4779	mov     a, i[0]
07A3	40DC	mov     ra, a
07A4	545C	inca    ra
07A5	40F9	mov     i[0], a
				_L7:
07A6	0F09	mov     a, 9H
07A7	4279	sub     a, i[0]
07A8	3C0A	sz      C
07A9	2F30	jmp     _L10
				;103	    {
				;104	        if(min > adcBuf[i])  
				_L10:
0730	4779	mov     a, i[0]
0731	40DC	mov     ra, a
0732	5F5D	clr     rb
0733	340A	clr     C
0734	5ADC	rlc     ra
0735	5ADD	rlc     rb
0736	0FC0	mov     a, C0H
0737	43DC	addm    a, ra
0738	0F01	mov     a, 1H
0739	53DD	adcm    a, rb
073A	475C	mov     a, ra
073B	0083	mov     MP1, a
073C	475D	mov     a, rb
073D	0081	mov     MP0, a
073E	65DE	call    L0DDE
073F	40DC	mov     ra, a
0740	65DB	call    L0DDB
0741	40DD	mov     rb, a
0742	475C	mov     a, ra
0743	427A	sub     a, min[0]
0744	475D	mov     a, rb
0745	527B	sbc     a, min[1]
0746	3C0A	sz      C
0747	2F5A	jmp     _L8
				;105	        	min = adcBuf[i];
0748	4779	mov     a, i[0]
0749	40DC	mov     ra, a
074A	5F5D	clr     rb
074B	340A	clr     C
074C	5ADC	rlc     ra
074D	5ADD	rlc     rb
074E	0FC0	mov     a, C0H
074F	43DC	addm    a, ra
0750	0F01	mov     a, 1H
0751	53DD	adcm    a, rb
0752	475C	mov     a, ra
0753	0083	mov     MP1, a
0754	475D	mov     a, rb
0755	0081	mov     MP0, a
0756	65DE	call    L0DDE
0757	40FA	mov     min[0], a
0758	65DB	call    L0DDB
0759	40FB	mov     min[1], a
				;106	        if(max < adcBuf[i])  
				_L8:
075A	4779	mov     a, i[0]
075B	40DC	mov     ra, a
075C	5F5D	clr     rb
075D	340A	clr     C
075E	5ADC	rlc     ra
075F	5ADD	rlc     rb
0760	0FC0	mov     a, C0H
0761	43DC	addm    a, ra
0762	0F01	mov     a, 1H
0763	53DD	adcm    a, rb
0764	475C	mov     a, ra
0765	0083	mov     MP1, a
0766	475D	mov     a, rb
0767	0081	mov     MP0, a
0768	65DE	call    L0DDE
0769	40DC	mov     ra, a
076A	65DB	call    L0DDB
076B	40DD	mov     rb, a
076C	477C	mov     a, max[0]
076D	425C	sub     a, ra
076E	477D	mov     a, max[1]
076F	525D	sbc     a, rb
0770	3C0A	sz      C
0771	2F84	jmp     _L9
				;107	        	max = adcBuf[i];
0772	4779	mov     a, i[0]
0773	40DC	mov     ra, a
0774	5F5D	clr     rb
0775	340A	clr     C
0776	5ADC	rlc     ra
0777	5ADD	rlc     rb
0778	0FC0	mov     a, C0H
0779	43DC	addm    a, ra
077A	0F01	mov     a, 1H
077B	53DD	adcm    a, rb
077C	475C	mov     a, ra
077D	0083	mov     MP1, a
077E	475D	mov     a, rb
077F	0081	mov     MP0, a
0780	65DE	call    L0DDE
0781	40FC	mov     max[0], a
0782	65DB	call    L0DDB
0783	40FD	mov     max[1], a
				;108	        k += adcBuf[i]; 
				_L9:
0784	4779	mov     a, i[0]
0785	40DC	mov     ra, a
0786	5F5D	clr     rb
0787	340A	clr     C
0788	5ADC	rlc     ra
0789	5ADD	rlc     rb
078A	0FC0	mov     a, C0H
078B	43DC	addm    a, ra
078C	0F01	mov     a, 1H
078D	53DD	adcm    a, rb
078E	475C	mov     a, ra
078F	0083	mov     MP1, a
0790	475D	mov     a, rb
0791	0081	mov     MP0, a
0792	65DE	call    L0DDE
0793	40DE	mov     rc, a
0794	65DB	call    L0DDB
0795	40DF	mov     rd, a
0796	4752	mov     a, k[0]
0797	40DC	mov     ra, a
0798	4753	mov     a, k[1]
0799	40DD	mov     rb, a
079A	475E	mov     a, rc
079B	43DC	addm    a, ra
079C	475F	mov     a, rd
079D	53DD	adcm    a, rb
079E	475C	mov     a, ra
079F	40D2	mov     k[0], a
07A0	475D	mov     a, rb
07A1	40D3	mov     k[1], a
				;109	    }
				;110	    k -= min; k -= max; k >>= 3;			//07AA	4752	mov     a, k[0]
07AB	40DC	mov     ra, a
07AC	4753	mov     a, k[1]
07AD	40DD	mov     rb, a
07AE	475C	mov     a, ra
07AF	427A	sub     a, min[0]
07B0	40DC	mov     ra, a
07B1	475D	mov     a, rb
07B2	527B	sbc     a, min[1]
07B3	40DD	mov     rb, a
07B4	475C	mov     a, ra
07B5	40D2	mov     k[0], a
07B6	475D	mov     a, rb
07B7	40D3	mov     k[1], a
07B8	4752	mov     a, k[0]
07B9	40DC	mov     ra, a
07BA	4753	mov     a, k[1]
07BB	40DD	mov     rb, a
07BC	475C	mov     a, ra
07BD	427C	sub     a, max[0]
07BE	40DC	mov     ra, a
07BF	475D	mov     a, rb
07C0	527D	sbc     a, max[1]
07C1	40DD	mov     rb, a
07C2	475C	mov     a, ra
07C3	40D2	mov     k[0], a
07C4	475D	mov     a, rb
07C5	40D3	mov     k[1], a
07C6	4752	mov     a, k[0]
07C7	40DC	mov     ra, a
07C8	4753	mov     a, k[1]
07C9	40DD	mov     rb, a
07CA	0F03	mov     a, 3H
				_LI1:
07CB	340A	clr     C
07CC	7FDD	sz      rb.7
07CD	300A	set     C
07CE	5BDD	rrc     rb
07CF	5BDC	rrc     ra
07D0	1785	sdz     ACC
07D1	2FCB	jmp     _LI1
07D2	475C	mov     a, ra
07D3	40D2	mov     k[0], a
07D4	475D	mov     a, rb
07D5	40D3	mov     k[1], a
				;111	/*******************************************************************************************/
				;112	//					;113	    if(k > BIAS_VALU)
07D6	4752	mov     a, k[0]
07D7	40DC	mov     ra, a
07D8	4753	mov     a, k[1]
07D9	40DD	mov     rb, a
07DA	0FFF	mov     a, FFH
07DB	425C	sub     a, ra
07DC	0F07	mov     a, 7H
07DD	525D	sbc     a, rb
07DE	1185	swap    ACC
07DF	040A	xor     a, STATUS
07E0	3985	snz     ACC.3
07E1	2FEF	jmp     _L11
				;114		{
				;115			k = k - BIAS_VALU;
07E2	4752	mov     a, k[0]
07E3	40DC	mov     ra, a
07E4	4753	mov     a, k[1]
07E5	40DD	mov     rb, a
07E6	0F01	mov     a, 1H
07E7	43DC	addm    a, ra
07E8	0FF8	mov     a, F8H
07E9	53DD	adcm    a, rb
07EA	475C	mov     a, ra
07EB	40D2	mov     k[0], a
07EC	475D	mov     a, rb
07ED	40D3	mov     k[1], a
07EE	2FF1	jmp     _L12
				;116		}
				;117		else
				;118		{
				;119			k = 0;
				_L11:
07EF	5F52	clr     k[0]
07F0	5F53	clr     k[1]
				;120		}
				;121		if(TempDir)											//				_L12:
07F1	4722	mov     a, LEDG[0]
07F2	40DC	mov     ra, a
07F3	0F80	mov     a, 80H
07F4	46DC	andm    a, ra
07F5	50DC	sz      ra
07F6	2FF8	jmp     _LI2
07F7	6880	jmp     _L13
				;122		{
				;123			max = ObjPositiveTemp[AroudTempIndex] + TEMP_ADD_H;	//				_LI2:
07F8	4751	mov     a, AroudTempIndex[0]
07F9	40DC	mov     ra, a
07FA	5F5D	clr     rb
07FB	340A	clr     C
07FC	5ADC	rlc     ra
07FD	5ADD	rlc     rb
07FE	0F7E	mov     a, 7EH
07FF	43DC	addm    a, ra
0800	0F81	mov     a, 81H
0801	53DD	adcm    a, rb
0802	475C	mov     a, ra
0803	0083	mov     MP1, a
0804	475D	mov     a, rb
0805	0081	mov     MP0, a
0806	65DE	call    L0DDE
0807	40DC	mov     ra, a
0808	65DB	call    L0DDB
0809	40DD	mov     rb, a
080A	0F1A	mov     a, 1AH
080B	43DC	addm    a, ra
080C	0F01	mov     a, 1H
080D	53DD	adcm    a, rb
080E	475C	mov     a, ra
080F	40FC	mov     max[0], a
0810	475D	mov     a, rb
0811	40FD	mov     max[1], a
				;124			if((k >= max)&&(TempSta != STAY_45))			//0812	4752	mov     a, k[0]
0813	40DC	mov     ra, a
0814	4753	mov     a, k[1]
0815	40DD	mov     rb, a
0816	475C	mov     a, ra
0817	427C	sub     a, max[0]
0818	475D	mov     a, rb
0819	527D	sbc     a, max[1]
081A	380A	snz     C
081B	6827	jmp     _L14
081C	4734	mov     a, TempSta[0]
081D	40DC	mov     ra, a
081E	475C	mov     a, ra
081F	0A02	sub     a, 2H
0820	3D0A	sz      Z
0821	6827	jmp     _L14
				;125			{
				;126		    	TempSta = UP_45;							//450822	0F03	mov     a, 3H
0823	40B4	mov     TempSta[0], a
				;127		    	TempDir = true;								//0824	73A2	set     LEDG[0].7
				;128		    	Stay45Cnt = 0;
0825	5F40	clr     Stay45Cnt[0]
0826	687E	jmp     _L15
				;129			}
				;130			else
				;131			{
				;132		    	TempSta = STAY_45;							//45				_L14:
0827	0F02	mov     a, 2H
0828	40B4	mov     TempSta[0], a
				;133				if(Stay45Cnt > WAIT_TIME)					//0829	4740	mov     a, Stay45Cnt[0]
082A	40DC	mov     ra, a
082B	0F78	mov     a, 78H
082C	425C	sub     a, ra
082D	3C0A	sz      C
082E	6859	jmp     _L16
				;134				{
				;135					max = ObjPositiveTemp[AroudTempIndex] + TEMP_ADD_H;	//082F	4751	mov     a, AroudTempIndex[0]
0830	40DC	mov     ra, a
0831	5F5D	clr     rb
0832	340A	clr     C
0833	5ADC	rlc     ra
0834	5ADD	rlc     rb
0835	0F7E	mov     a, 7EH
0836	43DC	addm    a, ra
0837	0F81	mov     a, 81H
0838	53DD	adcm    a, rb
0839	475C	mov     a, ra
083A	0083	mov     MP1, a
083B	475D	mov     a, rb
083C	0081	mov     MP0, a
083D	65DE	call    L0DDE
083E	40DC	mov     ra, a
083F	65DB	call    L0DDB
0840	40DD	mov     rb, a
0841	0F1A	mov     a, 1AH
0842	43DC	addm    a, ra
0843	0F01	mov     a, 1H
0844	53DD	adcm    a, rb
0845	475C	mov     a, ra
0846	40FC	mov     max[0], a
0847	475D	mov     a, rb
0848	40FD	mov     max[1], a
				;136					if(k >= max)
0849	4752	mov     a, k[0]
084A	40DC	mov     ra, a
084B	4753	mov     a, k[1]
084C	40DD	mov     rb, a
084D	475C	mov     a, ra
084E	427C	sub     a, max[0]
084F	475D	mov     a, rb
0850	527D	sbc     a, max[1]
0851	380A	snz     C
0852	6858	jmp     _L17
				;137					{
				;138				    	TempSta = UP_45;							//450853	0F03	mov     a, 3H
0854	40B4	mov     TempSta[0], a
				;139				    	TempDir = true;								//0855	73A2	set     LEDG[0].7
				;140				    	Stay45Cnt = 0;					
0856	5F40	clr     Stay45Cnt[0]
0857	6859	jmp     _L16
				;141					}
				;142					else
				;143					{
				;144		    			TempDir = false;						//				_L17:
0858	77A2	clr     LEDG[0].7
				;145					}
				;146				}
				;147		    	max = ObjPositiveTemp[AroudTempIndex] + TEMP_ADD_STAY;
				_L16:
0859	4751	mov     a, AroudTempIndex[0]
085A	40DC	mov     ra, a
085B	5F5D	clr     rb
085C	340A	clr     C
085D	5ADC	rlc     ra
085E	5ADD	rlc     rb
085F	0F7E	mov     a, 7EH
0860	43DC	addm    a, ra
0861	0F81	mov     a, 81H
0862	53DD	adcm    a, rb
0863	475C	mov     a, ra
0864	0083	mov     MP1, a
0865	475D	mov     a, rb
0866	0081	mov     MP0, a
0867	65DE	call    L0DDE
0868	40DC	mov     ra, a
0869	65DB	call    L0DDB
086A	40DD	mov     rb, a
086B	0FBF	mov     a, BFH
086C	43DC	addm    a, ra
086D	0F00	mov     a, 0H
086E	53DD	adcm    a, rb
086F	475C	mov     a, ra
0870	40FC	mov     max[0], a
0871	475D	mov     a, rb
0872	40FD	mov     max[1], a
				;148				if(k <= max)								//0873	4752	mov     a, k[0]
0874	40DC	mov     ra, a
0875	4753	mov     a, k[1]
0876	40DD	mov     rb, a
0877	477C	mov     a, max[0]
0878	425C	sub     a, ra
0879	477D	mov     a, max[1]
087A	525D	sbc     a, rb
087B	380A	snz     C
087C	687E	jmp     _L15
				;149				{
				;150		    		TempDir = false;						//087D	77A2	clr     LEDG[0].7
				;151				}
				;152			}
				;153	    	TempDirDnFlag = true;
				_L15:
087E	73A0	set     maiFlagA[0].7
087F	6945	jmp     _L1
				;154		}
				;155	    else
				;156	    {
				;157	    	max = ObjPositiveTemp[AroudTempIndex] + TEMP_ADD_L;
				_L13:
0880	4751	mov     a, AroudTempIndex[0]
0881	40DC	mov     ra, a
0882	5F5D	clr     rb
0883	340A	clr     C
0884	5ADC	rlc     ra
0885	5ADD	rlc     rb
0886	0F7E	mov     a, 7EH
0887	43DC	addm    a, ra
0888	0F81	mov     a, 81H
0889	53DD	adcm    a, rb
088A	475C	mov     a, ra
088B	0083	mov     MP1, a
088C	475D	mov     a, rb
088D	0081	mov     MP0, a
088E	65DE	call    L0DDE
088F	40DC	mov     ra, a
0890	65DB	call    L0DDB
0891	40DD	mov     rb, a
0892	0FE2	mov     a, E2H
0893	43DC	addm    a, ra
0894	0F01	mov     a, 1H
0895	53DD	adcm    a, rb
0896	475C	mov     a, ra
0897	40FC	mov     max[0], a
0898	475D	mov     a, rb
0899	40FD	mov     max[1], a
				;158	    	if(k >= max)									//089A	4752	mov     a, k[0]
089B	40DC	mov     ra, a
089C	4753	mov     a, k[1]
089D	40DD	mov     rb, a
089E	475C	mov     a, ra
089F	427C	sub     a, max[0]
08A0	475D	mov     a, rb
08A1	527D	sbc     a, max[1]
08A2	380A	snz     C
08A3	68A6	jmp     _L18
				;159	    	{
				;160		    	TempDir = true;								//08A4	73A2	set     LEDG[0].7
08A5	6945	jmp     _L1
				;161	    	}
				;162	    	else
				;163	    	{
				;164	    		if(TempDirDnFlag)							//				_L18:
08A6	4720	mov     a, maiFlagA[0]
08A7	40DC	mov     ra, a
08A8	0F80	mov     a, 80H
08A9	46DC	andm    a, ra
08AA	50DC	sz      ra
08AB	68AD	jmp     _LI3
08AC	691A	jmp     _L19
				;165	    		{
				;166	    			max = ObjPositiveTemp[AroudTempIndex] - TEMP_30;
				_LI3:
08AD	4751	mov     a, AroudTempIndex[0]
08AE	40DC	mov     ra, a
08AF	5F5D	clr     rb
08B0	340A	clr     C
08B1	5ADC	rlc     ra
08B2	5ADD	rlc     rb
08B3	0F7E	mov     a, 7EH
08B4	43DC	addm    a, ra
08B5	0F81	mov     a, 81H
08B6	53DD	adcm    a, rb
08B7	475C	mov     a, ra
08B8	0083	mov     MP1, a
08B9	475D	mov     a, rb
08BA	0081	mov     MP0, a
08BB	65DE	call    L0DDE
08BC	40DC	mov     ra, a
08BD	65DB	call    L0DDB
08BE	40DD	mov     rb, a
08BF	0F3B	mov     a, 3BH
08C0	43DC	addm    a, ra
08C1	0FFE	mov     a, FEH
08C2	53DD	adcm    a, rb
08C3	475C	mov     a, ra
08C4	40FC	mov     max[0], a
08C5	475D	mov     a, rb
08C6	40FD	mov     max[1], a
				;167		    		if(k >= max)//08C7	4752	mov     a, k[0]
08C8	40DC	mov     ra, a
08C9	4753	mov     a, k[1]
08CA	40DD	mov     rb, a
08CB	475C	mov     a, ra
08CC	427C	sub     a, max[0]
08CD	475D	mov     a, rb
08CE	527D	sbc     a, max[1]
08CF	380A	snz     C
08D0	6916	jmp     _L20
				;168		    		{
				;169				    	TempSta = IN_30_45;
08D1	0F01	mov     a, 1H
08D2	40B4	mov     TempSta[0], a
				;170				    	TempDirDnFlag = true;				//08D3	73A0	set     maiFlagA[0].7
				;171		    			max = max + TEMP_ADD_H;				//08D4	0F1A	mov     a, 1AH
08D5	43FC	addm    a, max[0]
08D6	0F01	mov     a, 1H
08D7	53FD	adcm    a, max[1]
				;172				    	ntc_val = (k - max) * 3;				//08D8	4752	mov     a, k[0]
08D9	40DC	mov     ra, a
08DA	4753	mov     a, k[1]
08DB	40DD	mov     rb, a
08DC	475C	mov     a, ra
08DD	427C	sub     a, max[0]
08DE	40DC	mov     ra, a
08DF	475D	mov     a, rb
08E0	527D	sbc     a, max[1]
08E1	40DD	mov     rb, a
08E2	475C	mov     a, ra
08E3	40DE	mov     rc, a
08E4	475D	mov     a, rb
08E5	40DF	mov     rd, a
08E6	340A	clr     C
08E7	5ADE	rlc     rc
08E8	5ADF	rlc     rd
08E9	475E	mov     a, rc
08EA	43DC	addm    a, ra
08EB	475F	mov     a, rd
08EC	53DD	adcm    a, rb
08ED	475C	mov     a, ra
08EE	40B5	mov     ntc_val[0], a
08EF	475D	mov     a, rb
08F0	40B6	mov     ntc_val[1], a
				;173				    	ntc_val = 2048 - ntc_val;			//08F1	4735	mov     a, ntc_val[0]
08F2	40DC	mov     ra, a
08F3	4736	mov     a, ntc_val[1]
08F4	40DD	mov     rb, a
08F5	0F00	mov     a, 0H
08F6	42DC	subm    a, ra
08F7	0F08	mov     a, 8H
08F8	52DD	sbcm    a, rb
08F9	475C	mov     a, ra
08FA	40B5	mov     ntc_val[0], a
08FB	475D	mov     a, rb
08FC	40B6	mov     ntc_val[1], a
				;174				    	if(ntc_val > 2045)					//08FD	4735	mov     a, ntc_val[0]
08FE	40DC	mov     ra, a
08FF	4736	mov     a, ntc_val[1]
0900	40DD	mov     rb, a
0901	0FFD	mov     a, FDH
0902	425C	sub     a, ra
0903	0F07	mov     a, 7H
0904	525D	sbc     a, rb
0905	1185	swap    ACC
0906	040A	xor     a, STATUS
0907	3985	snz     ACC.3
0908	690D	jmp     _L21
				;175				    		ntc_val = 2045;
0909	0FFD	mov     a, FDH
090A	40B5	mov     ntc_val[0], a
090B	0F07	mov     a, 7H
090C	40B6	mov     ntc_val[1], a
				;176				    	if(ntc_val < 0)
				_L21:
090D	4735	mov     a, ntc_val[0]
090E	40DC	mov     ra, a
090F	4736	mov     a, ntc_val[1]
0910	40DD	mov     rb, a
0911	7BDD	snz     rb.7
0912	6918	jmp     _L23
				;177				    		ntc_val = 0;	
0913	5F35	clr     ntc_val[0]
0914	5F36	clr     ntc_val[1]
0915	6918	jmp     _L23
				;178		    		}
				;179		    		else
				;180		    		{
				;181				    	TempSta = DOWN_30;
				_L20:
0916	5F34	clr     TempSta[0]
				;182				    	TempDirDnFlag = false;				//0917	77A0	clr     maiFlagA[0].7
				;183		    		}
				;184			    	TempDir = false;						//				_L23:
0918	77A2	clr     LEDG[0].7
0919	6945	jmp     _L1
				;185	    		}
				;186	    		else
				;187	    		{
				;188	    			max = ObjPositiveTemp[AroudTempIndex] - TEMP_DEC;
				_L19:
091A	4751	mov     a, AroudTempIndex[0]
091B	40DC	mov     ra, a
091C	5F5D	clr     rb
091D	340A	clr     C
091E	5ADC	rlc     ra
091F	5ADD	rlc     rb
0920	0F7E	mov     a, 7EH
0921	43DC	addm    a, ra
0922	0F81	mov     a, 81H
0923	53DD	adcm    a, rb
0924	475C	mov     a, ra
0925	0083	mov     MP1, a
0926	475D	mov     a, rb
0927	0081	mov     MP0, a
0928	65DE	call    L0DDE
0929	40DC	mov     ra, a
092A	65DB	call    L0DDB
092B	40DD	mov     rb, a
092C	0F38	mov     a, 38H
092D	43DC	addm    a, ra
092E	0FFF	mov     a, FFH
092F	53DD	adcm    a, rb
0930	475C	mov     a, ra
0931	40FC	mov     max[0], a
0932	475D	mov     a, rb
0933	40FD	mov     max[1], a
				;189		    		if(k >= max)							//0934	4752	mov     a, k[0]
0935	40DC	mov     ra, a
0936	4753	mov     a, k[1]
0937	40DD	mov     rb, a
0938	475C	mov     a, ra
0939	427C	sub     a, max[0]
093A	475D	mov     a, rb
093B	527D	sbc     a, max[1]
093C	380A	snz     C
093D	6942	jmp     _L24
				;190		    		{
				;191				    	TempSta = IN_30_45;
093E	0F01	mov     a, 1H
093F	40B4	mov     TempSta[0], a
				;192				    	TempDirDnFlag = true;				//0940	73A0	set     maiFlagA[0].7
0941	6944	jmp     _L25
				;193		    		}
				;194		    		else
				;195		    		{
				;196				    	TempSta = DOWN_30;					//				_L24:
0942	5F34	clr     TempSta[0]
				;197				    	TempDirDnFlag = false;
0943	77A0	clr     maiFlagA[0].7
				;198		    		}    			
				;199			    	TempDir = false;						//				_L25:
0944	77A2	clr     LEDG[0].7
				_L1:
0945	0003	ret
				;200	    		}    		    		    		
				;201	    	}
				;202	    }        		
				;203	}
				;204	//				;205	void GetAroudTempValu(void)  
				;206	{
				;207		unsigned char i;
				;208		unsigned int min,max;
				;209		volatile static unsigned short adcBuf[10] __attribute__ ((at(0x1eb)));  // 1eb -1d5
				;210	
				;211		_adcr0 = ADC_AROUD;			//				_GetAroudTempValu:
				_GetAroudTempValu:
0946	0F12	mov     a, 12H
0947	00A2	mov     ADCR0, a
				;212		STAR_ADC();
0948	37A2	clr     START
0949	33A2	set     START
094A	37A2	clr     START
				;213		while(_eocb);				// 				_L27:
094B	0722	mov     a, ADCR0
094C	40DC	mov     ra, a
094D	0F40	mov     a, 40H
094E	46DC	andm    a, ra
094F	50DC	sz      ra
0950	694B	jmp     _L27
				;214	    
				;215	    k2 = _adrh;
0951	0721	mov     a, ADRH
0952	40DC	mov     ra, a
0953	5F5D	clr     rb
0954	475C	mov     a, ra
0955	40D6	mov     k2[0], a
0956	475D	mov     a, rb
0957	40D7	mov     k2[1], a
				;216	    k2 <<= 8;
0958	4756	mov     a, k2[0]
0959	40DC	mov     ra, a
095A	4757	mov     a, k2[1]
095B	40DD	mov     rb, a
095C	475C	mov     a, ra
095D	40DD	mov     rb, a
095E	5F5C	clr     ra
095F	475C	mov     a, ra
0960	40D6	mov     k2[0], a
0961	475D	mov     a, rb
0962	40D7	mov     k2[1], a
				;217	    k2 += _adrl;
0963	0720	mov     a, ADRL
0964	40DC	mov     ra, a
0965	475C	mov     a, ra
0966	40DE	mov     rc, a
0967	5F5F	clr     rd
0968	4756	mov     a, k2[0]
0969	40DC	mov     ra, a
096A	4757	mov     a, k2[1]
096B	40DD	mov     rb, a
096C	475E	mov     a, rc
096D	43DC	addm    a, ra
096E	475F	mov     a, rd
096F	53DD	adcm    a, rb
0970	475C	mov     a, ra
0971	40D6	mov     k2[0], a
0972	475D	mov     a, rb
0973	40D7	mov     k2[1], a
				;218	    if(adcsp_2 < 10) 
0974	474F	mov     a, adcsp_2[0]
0975	40DC	mov     ra, a
0976	0F09	mov     a, 9H
0977	425C	sub     a, ra
0978	380A	snz     C
0979	697D	jmp     _L28
				;219	    	i = adcsp_2;
097A	474F	mov     a, adcsp_2[0]
097B	40F9	mov     i[0], a
097C	6983	jmp     _L29
				;220	    else  
				;221	    	i = adcsp_2 - 10;
				_L28:
097D	474F	mov     a, adcsp_2[0]
097E	40DC	mov     ra, a
097F	0FF6	mov     a, F6H
0980	43DC	addm    a, ra
0981	475C	mov     a, ra
0982	40F9	mov     i[0], a
				;222	    adcBuf[i] = k2;
				_L29:
0983	4779	mov     a, i[0]
0984	40DC	mov     ra, a
0985	5F5D	clr     rb
0986	4756	mov     a, k2[0]
0987	40DE	mov     rc, a
0988	4757	mov     a, k2[1]
0989	40DF	mov     rd, a
098A	340A	clr     C
098B	5ADC	rlc     ra
098C	5ADD	rlc     rb
098D	0FEB	mov     a, EBH
098E	43DC	addm    a, ra
098F	0F01	mov     a, 1H
0990	53DD	adcm    a, rb
0991	475C	mov     a, ra
0992	0083	mov     MP1, a
0993	475D	mov     a, rb
0994	0081	mov     MP0, a
0995	0701	mov     a, MP0
0996	0084	mov     BP, a
0997	475E	mov     a, rc
0998	0082	mov     [02H], a
0999	1483	inc     MP1
099A	475F	mov     a, rd
099B	0082	mov     [02H], a
				;223	    if(adcsp_2 < 11) 				//099C	474F	mov     a, adcsp_2[0]
099D	40DC	mov     ra, a
099E	0F0A	mov     a, AH
099F	425C	sub     a, ra
09A0	380A	snz     C
09A1	69A8	jmp     _L30
				;224	    {
				;225	    	adcsp_2++; 
09A2	474F	mov     a, adcsp_2[0]
09A3	40DC	mov     ra, a
09A4	54DC	inc     ra
09A5	475C	mov     a, ra
09A6	40CF	mov     adcsp_2[0], a
				;226	    	return;
09A7	6A90	jmp     _L26
				;227	    }
				;228	    adcsp_2 = 0;
				_L30:
09A8	5F4F	clr     adcsp_2[0]
				;229	    k2 = adcBuf[0];
09A9	0FEB	mov     a, EBH
09AA	0083	mov     MP1, a
09AB	0F01	mov     a, 1H
09AC	0081	mov     MP0, a
09AD	0701	mov     a, MP0
09AE	0084	mov     BP, a
09AF	0702	mov     a, [02H]
09B0	40DC	mov     ra, a
09B1	1483	inc     MP1
09B2	0702	mov     a, [02H]
09B3	40DD	mov     rb, a
09B4	475C	mov     a, ra
09B5	40D6	mov     k2[0], a
09B6	475D	mov     a, rb
09B7	40D7	mov     k2[1], a
				;230	    min = k2;
09B8	4756	mov     a, k2[0]
09B9	40FA	mov     min[0], a
09BA	4757	mov     a, k2[1]
09BB	40FB	mov     min[1], a
				;231	    max = k2;
09BC	4756	mov     a, k2[0]
09BD	40FC	mov     max[0], a
09BE	4757	mov     a, k2[1]
09BF	40FD	mov     max[1], a
				;232	    for(i=1;i<10;i++)
09C0	0F01	mov     a, 1H
09C1	40F9	mov     i[0], a
09C2	6A39	jmp     _L32
0A35	4779	mov     a, i[0]
0A36	40DC	mov     ra, a
0A37	545C	inca    ra
0A38	40F9	mov     i[0], a
				_L32:
0A39	0F09	mov     a, 9H
0A3A	4279	sub     a, i[0]
0A3B	3C0A	sz      C
0A3C	69C3	jmp     _L35
				;233	    {
				;234	        if(min > adcBuf[i])  
				_L35:
09C3	4779	mov     a, i[0]
09C4	40DC	mov     ra, a
09C5	5F5D	clr     rb
09C6	340A	clr     C
09C7	5ADC	rlc     ra
09C8	5ADD	rlc     rb
09C9	0FEB	mov     a, EBH
09CA	43DC	addm    a, ra
09CB	0F01	mov     a, 1H
09CC	53DD	adcm    a, rb
09CD	475C	mov     a, ra
09CE	0083	mov     MP1, a
09CF	475D	mov     a, rb
09D0	0081	mov     MP0, a
09D1	65DE	call    L0DDE
09D2	40DC	mov     ra, a
09D3	65DB	call    L0DDB
09D4	40DD	mov     rb, a
09D5	475C	mov     a, ra
09D6	427A	sub     a, min[0]
09D7	475D	mov     a, rb
09D8	527B	sbc     a, min[1]
09D9	3C0A	sz      C
09DA	69ED	jmp     _L33
				;235	        	min = adcBuf[i];
09DB	4779	mov     a, i[0]
09DC	40DC	mov     ra, a
09DD	5F5D	clr     rb
09DE	340A	clr     C
09DF	5ADC	rlc     ra
09E0	5ADD	rlc     rb
09E1	0FEB	mov     a, EBH
09E2	43DC	addm    a, ra
09E3	0F01	mov     a, 1H
09E4	53DD	adcm    a, rb
09E5	475C	mov     a, ra
09E6	0083	mov     MP1, a
09E7	475D	mov     a, rb
09E8	0081	mov     MP0, a
09E9	65DE	call    L0DDE
09EA	40FA	mov     min[0], a
09EB	65DB	call    L0DDB
09EC	40FB	mov     min[1], a
				;236	        if(max < adcBuf[i])  
				_L33:
09ED	4779	mov     a, i[0]
09EE	40DC	mov     ra, a
09EF	5F5D	clr     rb
09F0	340A	clr     C
09F1	5ADC	rlc     ra
09F2	5ADD	rlc     rb
09F3	0FEB	mov     a, EBH
09F4	43DC	addm    a, ra
09F5	0F01	mov     a, 1H
09F6	53DD	adcm    a, rb
09F7	475C	mov     a, ra
09F8	0083	mov     MP1, a
09F9	475D	mov     a, rb
09FA	0081	mov     MP0, a
09FB	65DE	call    L0DDE
09FC	40DC	mov     ra, a
09FD	65DB	call    L0DDB
09FE	40DD	mov     rb, a
09FF	477C	mov     a, max[0]
0A00	425C	sub     a, ra
0A01	477D	mov     a, max[1]
0A02	525D	sbc     a, rb
0A03	3C0A	sz      C
0A04	6A17	jmp     _L34
				;237	        	max = adcBuf[i];
0A05	4779	mov     a, i[0]
0A06	40DC	mov     ra, a
0A07	5F5D	clr     rb
0A08	340A	clr     C
0A09	5ADC	rlc     ra
0A0A	5ADD	rlc     rb
0A0B	0FEB	mov     a, EBH
0A0C	43DC	addm    a, ra
0A0D	0F01	mov     a, 1H
0A0E	53DD	adcm    a, rb
0A0F	475C	mov     a, ra
0A10	0083	mov     MP1, a
0A11	475D	mov     a, rb
0A12	0081	mov     MP0, a
0A13	65DE	call    L0DDE
0A14	40FC	mov     max[0], a
0A15	65DB	call    L0DDB
0A16	40FD	mov     max[1], a
				;238	        k2 += adcBuf[i]; 
				_L34:
0A17	4779	mov     a, i[0]
0A18	40DC	mov     ra, a
0A19	5F5D	clr     rb
0A1A	340A	clr     C
0A1B	5ADC	rlc     ra
0A1C	5ADD	rlc     rb
0A1D	0FEB	mov     a, EBH
0A1E	43DC	addm    a, ra
0A1F	0F01	mov     a, 1H
0A20	53DD	adcm    a, rb
0A21	475C	mov     a, ra
0A22	0083	mov     MP1, a
0A23	475D	mov     a, rb
0A24	0081	mov     MP0, a
0A25	65DE	call    L0DDE
0A26	40DE	mov     rc, a
0A27	65DB	call    L0DDB
0A28	40DF	mov     rd, a
0A29	4756	mov     a, k2[0]
0A2A	40DC	mov     ra, a
0A2B	4757	mov     a, k2[1]
0A2C	40DD	mov     rb, a
0A2D	475E	mov     a, rc
0A2E	43DC	addm    a, ra
0A2F	475F	mov     a, rd
0A30	53DD	adcm    a, rb
0A31	475C	mov     a, ra
0A32	40D6	mov     k2[0], a
0A33	475D	mov     a, rb
0A34	40D7	mov     k2[1], a
				;239	    }
				;240	    k2 -= min; k2 -= max; k2 >>= 3;			//0A3D	4756	mov     a, k2[0]
0A3E	40DC	mov     ra, a
0A3F	4757	mov     a, k2[1]
0A40	40DD	mov     rb, a
0A41	475C	mov     a, ra
0A42	427A	sub     a, min[0]
0A43	40DC	mov     ra, a
0A44	475D	mov     a, rb
0A45	527B	sbc     a, min[1]
0A46	40DD	mov     rb, a
0A47	475C	mov     a, ra
0A48	40D6	mov     k2[0], a
0A49	475D	mov     a, rb
0A4A	40D7	mov     k2[1], a
0A4B	4756	mov     a, k2[0]
0A4C	40DC	mov     ra, a
0A4D	4757	mov     a, k2[1]
0A4E	40DD	mov     rb, a
0A4F	475C	mov     a, ra
0A50	427C	sub     a, max[0]
0A51	40DC	mov     ra, a
0A52	475D	mov     a, rb
0A53	527D	sbc     a, max[1]
0A54	40DD	mov     rb, a
0A55	475C	mov     a, ra
0A56	40D6	mov     k2[0], a
0A57	475D	mov     a, rb
0A58	40D7	mov     k2[1], a
0A59	4756	mov     a, k2[0]
0A5A	40DC	mov     ra, a
0A5B	4757	mov     a, k2[1]
0A5C	40DD	mov     rb, a
0A5D	0F03	mov     a, 3H
				_LI4:
0A5E	340A	clr     C
0A5F	5BDD	rrc     rb
0A60	5BDC	rrc     ra
0A61	1785	sdz     ACC
0A62	6A5E	jmp     _LI4
0A63	475C	mov     a, ra
0A64	40D6	mov     k2[0], a
0A65	475D	mov     a, rb
0A66	40D7	mov     k2[1], a
				;241		for(i=0;i <MAX_TEMP_ARRAY;i++)			//0A67	5F79	clr     i[0]
0A68	6A8A	jmp     _L36
				_L37:
0A86	4779	mov     a, i[0]
0A87	40DC	mov     ra, a
0A88	545C	inca    ra
0A89	40F9	mov     i[0], a
				_L36:
0A8A	0F63	mov     a, 63H
0A8B	4279	sub     a, i[0]
0A8C	3C0A	sz      C
0A8D	6A69	jmp     _L39
				;242		{
				;243			if(k2 >= AroundTemp[i])
				_L39:
0A69	4779	mov     a, i[0]
0A6A	40DC	mov     ra, a
0A6B	5F5D	clr     rb
0A6C	340A	clr     C
0A6D	5ADC	rlc     ra
0A6E	5ADD	rlc     rb
0A6F	0FB6	mov     a, B6H
0A70	43DC	addm    a, ra
0A71	0F80	mov     a, 80H
0A72	53DD	adcm    a, rb
0A73	475C	mov     a, ra
0A74	0083	mov     MP1, a
0A75	475D	mov     a, rb
0A76	0081	mov     MP0, a
0A77	65DE	call    L0DDE
0A78	40DE	mov     rc, a
0A79	65DB	call    L0DDB
0A7A	40DF	mov     rd, a
0A7B	4756	mov     a, k2[0]
0A7C	40DC	mov     ra, a
0A7D	4757	mov     a, k2[1]
0A7E	40DD	mov     rb, a
0A7F	475C	mov     a, ra
0A80	425E	sub     a, rc
0A81	475D	mov     a, rb
0A82	525F	sbc     a, rd
0A83	380A	snz     C
0A84	6A86	jmp     _L37
				;244			{			
				;245				break;
0A85	6A8E	jmp     _L38
				;246			}
				;247		}
				;248		AroudTempIndex = i;						//				_L38:
0A8E	4779	mov     a, i[0]
0A8F	40D1	mov     AroudTempIndex[0], a
				_L26:
0A90	0003	ret
				;249	}
				;250	
				;251	#define LOW_BAT_VALU	2233		//1.8V				;252	#define LOW_BAT_VALU_UP	2357		//1.9V				;253	//#define LOW_BAT_VALU	2419		//1.65V				;254	//#define LOW_BAT_VALU_UP	2560		//1.8V				;255	
				;256	#define FULL_BAT_VALU	2556		//4.12V	4.12V				;257	
				;258	#define FULL_DOWN_VALU	2574		//				;259	//				;260	void GetBatValu(void)  
				;261	{
				;262		unsigned char i;
				;263		unsigned short min,max;
				;264		volatile static unsigned short adcBuf[10] __attribute__ ((at(0x1a0)));  // 1a0-1b4
				;265		static u8 TimesCnt = 0,TimesFullCnt = 0,TimesFullDnCnt = 0;
				;266		_adcr0 = ADC_BAT;			//				_GetBatValu:
				_GetBatValu:
0A91	0F15	mov     a, 15H
0A92	00A2	mov     ADCR0, a
				;267		STAR_ADC();
0A93	37A2	clr     START
0A94	33A2	set     START
0A95	37A2	clr     START
				;268		while(_eocb);				// 				_L41:
0A96	0722	mov     a, ADCR0
0A97	40DC	mov     ra, a
0A98	0F40	mov     a, 40H
0A99	46DC	andm    a, ra
0A9A	50DC	sz      ra
0A9B	6A96	jmp     _L41
				;269	    
				;270	    k1 = _adrh;
0A9C	0721	mov     a, ADRH
0A9D	40DC	mov     ra, a
0A9E	5F5D	clr     rb
0A9F	475C	mov     a, ra
0AA0	40D4	mov     k1[0], a
0AA1	475D	mov     a, rb
0AA2	40D5	mov     k1[1], a
				;271	    k1 <<= 8;
0AA3	4754	mov     a, k1[0]
0AA4	40DC	mov     ra, a
0AA5	4755	mov     a, k1[1]
0AA6	40DD	mov     rb, a
0AA7	475C	mov     a, ra
0AA8	40DD	mov     rb, a
0AA9	5F5C	clr     ra
0AAA	475C	mov     a, ra
0AAB	40D4	mov     k1[0], a
0AAC	475D	mov     a, rb
0AAD	40D5	mov     k1[1], a
				;272	    k1 += _adrl;
0AAE	0720	mov     a, ADRL
0AAF	40DC	mov     ra, a
0AB0	475C	mov     a, ra
0AB1	40DE	mov     rc, a
0AB2	5F5F	clr     rd
0AB3	4754	mov     a, k1[0]
0AB4	40DC	mov     ra, a
0AB5	4755	mov     a, k1[1]
0AB6	40DD	mov     rb, a
0AB7	475E	mov     a, rc
0AB8	43DC	addm    a, ra
0AB9	475F	mov     a, rd
0ABA	53DD	adcm    a, rb
0ABB	475C	mov     a, ra
0ABC	40D4	mov     k1[0], a
0ABD	475D	mov     a, rb
0ABE	40D5	mov     k1[1], a
				;273	    if(adcsp_1 < 10) 
0ABF	4750	mov     a, adcsp_1[0]
0AC0	40DC	mov     ra, a
0AC1	0F09	mov     a, 9H
0AC2	425C	sub     a, ra
0AC3	380A	snz     C
0AC4	6AC8	jmp     _L42
				;274	    	i = adcsp_1;
0AC5	4750	mov     a, adcsp_1[0]
0AC6	40F9	mov     i[0], a
0AC7	6ACE	jmp     _L43
				;275	    else  
				;276	    	i = adcsp_1 - 10;
				_L42:
0AC8	4750	mov     a, adcsp_1[0]
0AC9	40DC	mov     ra, a
0ACA	0FF6	mov     a, F6H
0ACB	43DC	addm    a, ra
0ACC	475C	mov     a, ra
0ACD	40F9	mov     i[0], a
				;277	    adcBuf[i] = k1;
				_L43:
0ACE	4779	mov     a, i[0]
0ACF	40DC	mov     ra, a
0AD0	5F5D	clr     rb
0AD1	4754	mov     a, k1[0]
0AD2	40DE	mov     rc, a
0AD3	4755	mov     a, k1[1]
0AD4	40DF	mov     rd, a
0AD5	340A	clr     C
0AD6	5ADC	rlc     ra
0AD7	5ADD	rlc     rb
0AD8	0FA0	mov     a, A0H
0AD9	43DC	addm    a, ra
0ADA	0F01	mov     a, 1H
0ADB	53DD	adcm    a, rb
0ADC	475C	mov     a, ra
0ADD	0083	mov     MP1, a
0ADE	475D	mov     a, rb
0ADF	0081	mov     MP0, a
0AE0	0701	mov     a, MP0
0AE1	0084	mov     BP, a
0AE2	475E	mov     a, rc
0AE3	0082	mov     [02H], a
0AE4	1483	inc     MP1
0AE5	475F	mov     a, rd
0AE6	0082	mov     [02H], a
				;278	    if(adcsp_1 < 11) 				//0AE7	4750	mov     a, adcsp_1[0]
0AE8	40DC	mov     ra, a
0AE9	0F0A	mov     a, AH
0AEA	425C	sub     a, ra
0AEB	380A	snz     C
0AEC	6AF3	jmp     _L44
				;279	    {
				;280	    	adcsp_1++; 
0AED	4750	mov     a, adcsp_1[0]
0AEE	40DC	mov     ra, a
0AEF	54DC	inc     ra
0AF0	475C	mov     a, ra
0AF1	40D0	mov     adcsp_1[0], a
				;281	    	return;
0AF2	6C39	jmp     _L40
				;282	    }
				;283	    adcsp_1 = 0;
				_L44:
0AF3	5F50	clr     adcsp_1[0]
				;284	    k1 = adcBuf[0];
0AF4	0FA0	mov     a, A0H
0AF5	0083	mov     MP1, a
0AF6	0F01	mov     a, 1H
0AF7	0081	mov     MP0, a
0AF8	0701	mov     a, MP0
0AF9	0084	mov     BP, a
0AFA	0702	mov     a, [02H]
0AFB	40DC	mov     ra, a
0AFC	1483	inc     MP1
0AFD	0702	mov     a, [02H]
0AFE	40DD	mov     rb, a
0AFF	475C	mov     a, ra
0B00	40D4	mov     k1[0], a
0B01	475D	mov     a, rb
0B02	40D5	mov     k1[1], a
				;285	    min = k1;
0B03	4754	mov     a, k1[0]
0B04	40FA	mov     min[0], a
0B05	4755	mov     a, k1[1]
0B06	40FB	mov     min[1], a
				;286	    max = k1;
0B07	4754	mov     a, k1[0]
0B08	40FC	mov     max[0], a
0B09	4755	mov     a, k1[1]
0B0A	40FD	mov     max[1], a
				;287	    for(i=1;i<10;i++)
0B0B	0F01	mov     a, 1H
0B0C	40F9	mov     i[0], a
0B0D	6B84	jmp     _L46
0B80	4779	mov     a, i[0]
0B81	40DC	mov     ra, a
0B82	545C	inca    ra
0B83	40F9	mov     i[0], a
				_L46:
0B84	0F09	mov     a, 9H
0B85	4279	sub     a, i[0]
0B86	3C0A	sz      C
0B87	6B0E	jmp     _L49
				;288	    {
				;289	        if(min > adcBuf[i])  
				_L49:
0B0E	4779	mov     a, i[0]
0B0F	40DC	mov     ra, a
0B10	5F5D	clr     rb
0B11	340A	clr     C
0B12	5ADC	rlc     ra
0B13	5ADD	rlc     rb
0B14	0FA0	mov     a, A0H
0B15	43DC	addm    a, ra
0B16	0F01	mov     a, 1H
0B17	53DD	adcm    a, rb
0B18	475C	mov     a, ra
0B19	0083	mov     MP1, a
0B1A	475D	mov     a, rb
0B1B	0081	mov     MP0, a
0B1C	65DE	call    L0DDE
0B1D	40DC	mov     ra, a
0B1E	65DB	call    L0DDB
0B1F	40DD	mov     rb, a
0B20	475C	mov     a, ra
0B21	427A	sub     a, min[0]
0B22	475D	mov     a, rb
0B23	527B	sbc     a, min[1]
0B24	3C0A	sz      C
0B25	6B38	jmp     _L47
				;290	        	min = adcBuf[i];
0B26	4779	mov     a, i[0]
0B27	40DC	mov     ra, a
0B28	5F5D	clr     rb
0B29	340A	clr     C
0B2A	5ADC	rlc     ra
0B2B	5ADD	rlc     rb
0B2C	0FA0	mov     a, A0H
0B2D	43DC	addm    a, ra
0B2E	0F01	mov     a, 1H
0B2F	53DD	adcm    a, rb
0B30	475C	mov     a, ra
0B31	0083	mov     MP1, a
0B32	475D	mov     a, rb
0B33	0081	mov     MP0, a
0B34	65DE	call    L0DDE
0B35	40FA	mov     min[0], a
0B36	65DB	call    L0DDB
0B37	40FB	mov     min[1], a
				;291	        if(max < adcBuf[i])  
				_L47:
0B38	4779	mov     a, i[0]
0B39	40DC	mov     ra, a
0B3A	5F5D	clr     rb
0B3B	340A	clr     C
0B3C	5ADC	rlc     ra
0B3D	5ADD	rlc     rb
0B3E	0FA0	mov     a, A0H
0B3F	43DC	addm    a, ra
0B40	0F01	mov     a, 1H
0B41	53DD	adcm    a, rb
0B42	475C	mov     a, ra
0B43	0083	mov     MP1, a
0B44	475D	mov     a, rb
0B45	0081	mov     MP0, a
0B46	65DE	call    L0DDE
0B47	40DC	mov     ra, a
0B48	65DB	call    L0DDB
0B49	40DD	mov     rb, a
0B4A	477C	mov     a, max[0]
0B4B	425C	sub     a, ra
0B4C	477D	mov     a, max[1]
0B4D	525D	sbc     a, rb
0B4E	3C0A	sz      C
0B4F	6B62	jmp     _L48
				;292	        	max = adcBuf[i];
0B50	4779	mov     a, i[0]
0B51	40DC	mov     ra, a
0B52	5F5D	clr     rb
0B53	340A	clr     C
0B54	5ADC	rlc     ra
0B55	5ADD	rlc     rb
0B56	0FA0	mov     a, A0H
0B57	43DC	addm    a, ra
0B58	0F01	mov     a, 1H
0B59	53DD	adcm    a, rb
0B5A	475C	mov     a, ra
0B5B	0083	mov     MP1, a
0B5C	475D	mov     a, rb
0B5D	0081	mov     MP0, a
0B5E	65DE	call    L0DDE
0B5F	40FC	mov     max[0], a
0B60	65DB	call    L0DDB
0B61	40FD	mov     max[1], a
				;293	        k1 += adcBuf[i]; 
				_L48:
0B62	4779	mov     a, i[0]
0B63	40DC	mov     ra, a
0B64	5F5D	clr     rb
0B65	340A	clr     C
0B66	5ADC	rlc     ra
0B67	5ADD	rlc     rb
0B68	0FA0	mov     a, A0H
0B69	43DC	addm    a, ra
0B6A	0F01	mov     a, 1H
0B6B	53DD	adcm    a, rb
0B6C	475C	mov     a, ra
0B6D	0083	mov     MP1, a
0B6E	475D	mov     a, rb
0B6F	0081	mov     MP0, a
0B70	65DE	call    L0DDE
0B71	40DE	mov     rc, a
0B72	65DB	call    L0DDB
0B73	40DF	mov     rd, a
0B74	4754	mov     a, k1[0]
0B75	40DC	mov     ra, a
0B76	4755	mov     a, k1[1]
0B77	40DD	mov     rb, a
0B78	475E	mov     a, rc
0B79	43DC	addm    a, ra
0B7A	475F	mov     a, rd
0B7B	53DD	adcm    a, rb
0B7C	475C	mov     a, ra
0B7D	40D4	mov     k1[0], a
0B7E	475D	mov     a, rb
0B7F	40D5	mov     k1[1], a
				;294	    }
				;295	    k1 -= min; k1 -= max; k1 >>= 3;			//0B88	4754	mov     a, k1[0]
0B89	40DC	mov     ra, a
0B8A	4755	mov     a, k1[1]
0B8B	40DD	mov     rb, a
0B8C	475C	mov     a, ra
0B8D	427A	sub     a, min[0]
0B8E	40DC	mov     ra, a
0B8F	475D	mov     a, rb
0B90	527B	sbc     a, min[1]
0B91	40DD	mov     rb, a
0B92	475C	mov     a, ra
0B93	40D4	mov     k1[0], a
0B94	475D	mov     a, rb
0B95	40D5	mov     k1[1], a
0B96	4754	mov     a, k1[0]
0B97	40DC	mov     ra, a
0B98	4755	mov     a, k1[1]
0B99	40DD	mov     rb, a
0B9A	475C	mov     a, ra
0B9B	427C	sub     a, max[0]
0B9C	40DC	mov     ra, a
0B9D	475D	mov     a, rb
0B9E	527D	sbc     a, max[1]
0B9F	40DD	mov     rb, a
0BA0	475C	mov     a, ra
0BA1	40D4	mov     k1[0], a
0BA2	475D	mov     a, rb
0BA3	40D5	mov     k1[1], a
0BA4	4754	mov     a, k1[0]
0BA5	40DC	mov     ra, a
0BA6	4755	mov     a, k1[1]
0BA7	40DD	mov     rb, a
0BA8	0F03	mov     a, 3H
				_LI5:
0BA9	340A	clr     C
0BAA	5BDD	rrc     rb
0BAB	5BDC	rrc     ra
0BAC	1785	sdz     ACC
0BAD	6BA9	jmp     _LI5
0BAE	475C	mov     a, ra
0BAF	40D4	mov     k1[0], a
0BB0	475D	mov     a, rb
0BB1	40D5	mov     k1[1], a
				;296	    if((k1 < LOW_BAT_VALU)&&(!ChargIngFlag)&&(WorkMode == RUN_MODE))	//0BB2	4754	mov     a, k1[0]
0BB3	40DC	mov     ra, a
0BB4	4755	mov     a, k1[1]
0BB5	40DD	mov     rb, a
0BB6	0FB8	mov     a, B8H
0BB7	425C	sub     a, ra
0BB8	0F08	mov     a, 8H
0BB9	525D	sbc     a, rb
0BBA	380A	snz     C
0BBB	6BDB	jmp     _L50
0BBC	4721	mov     a, maiFlagB[0]
0BBD	40DC	mov     ra, a
0BBE	0F40	mov     a, 40H
0BBF	46DC	andm    a, ra
0BC0	50DC	sz      ra
0BC1	6BDB	jmp     _L50
0BC2	4733	mov     a, WorkMode[0]
0BC3	40DC	mov     ra, a
0BC4	575C	sdza    ra
0BC5	6BDB	jmp     _L50
				;297	    {
				;298	    	TimesCnt++;
0BC6	4758	mov     a, TimesCnt[0]
0BC7	40DC	mov     ra, a
0BC8	54DC	inc     ra
0BC9	475C	mov     a, ra
0BCA	40D8	mov     TimesCnt[0], a
				;299	    	if(TimesCnt >= 20)
0BCB	4758	mov     a, TimesCnt[0]
0BCC	40DC	mov     ra, a
0BCD	0F13	mov     a, 13H
0BCE	425C	sub     a, ra
0BCF	3C0A	sz      C
0BD0	6BDA	jmp     _L51
0BD9	6BF6	jmp     _L53
				_L51:
0BDA	6BF6	jmp     _L53
				;300	    	{			
				;301		    	if(!BATLow3p5Flag)
0BD1	4722	mov     a, LEDG[0]
0BD2	40DC	mov     ra, a
0BD3	0F02	mov     a, 2H
0BD4	46DC	andm    a, ra
0BD5	50DC	sz      ra
0BD6	6BD8	jmp     _L52
				;302		    	{
				;303					LowBatShutDnSCnt = 0;
0BD7	5F3B	clr     LowBatShutDnSCnt[0]
				;304		    	}
				;305				BATLow3p5Flag = true;
				_L52:
0BD8	70A2	set     LEDG[0].1
				;306	    	}
				;307	    }
				;308	    else
				;309	    {
				;310	    	if((k1 > LOW_BAT_VALU_UP) && BATLow3p5Flag)
				_L50:
0BDB	4754	mov     a, k1[0]
0BDC	40DC	mov     ra, a
0BDD	4755	mov     a, k1[1]
0BDE	40DD	mov     rb, a
0BDF	0F35	mov     a, 35H
0BE0	425C	sub     a, ra
0BE1	0F09	mov     a, 9H
0BE2	525D	sbc     a, rb
0BE3	3C0A	sz      C
0BE4	6BED	jmp     _L54
0BE5	4722	mov     a, LEDG[0]
0BE6	40DC	mov     ra, a
0BE7	0F02	mov     a, 2H
0BE8	46DC	andm    a, ra
0BE9	50DC	sz      ra
0BEA	6BEC	jmp     _LI6
0BEB	6BED	jmp     _L54
				;311				BATLow3p5Flag = false;
				_LI6:
0BEC	74A2	clr     LEDG[0].1
				;312			if(ChargIngFlag)    	
				_L54:
0BED	4721	mov     a, maiFlagB[0]
0BEE	40DC	mov     ra, a
0BEF	0F40	mov     a, 40H
0BF0	46DC	andm    a, ra
0BF1	50DC	sz      ra
0BF2	6BF4	jmp     _LI7
0BF3	6BF5	jmp     _L55
				;313				BATLow3p5Flag = false;
				_LI7:
0BF4	74A2	clr     LEDG[0].1
				;314			TimesCnt = 0;	
				_L55:
0BF5	5F58	clr     TimesCnt[0]
				;315	    }
				;316	    if(k1 < FULL_DOWN_VALU)						//				_L53:
0BF6	4754	mov     a, k1[0]
0BF7	40DC	mov     ra, a
0BF8	4755	mov     a, k1[1]
0BF9	40DD	mov     rb, a
0BFA	0F0D	mov     a, DH
0BFB	425C	sub     a, ra
0BFC	0F0A	mov     a, AH
0BFD	525D	sbc     a, rb
0BFE	380A	snz     C
0BFF	6C12	jmp     _L56
				;317	    {
				;318	    	TimesFullDnCnt++;
0C00	4759	mov     a, TimesFullDnCnt[0]
0C01	40DC	mov     ra, a
0C02	54DC	inc     ra
0C03	475C	mov     a, ra
0C04	40D9	mov     TimesFullDnCnt[0], a
				;319	    	if(TimesFullDnCnt >= 20)	
0C05	4759	mov     a, TimesFullDnCnt[0]
0C06	40DC	mov     ra, a
0C07	0F13	mov     a, 13H
0C08	425C	sub     a, ra
0C09	3C0A	sz      C
0C0A	6C12	jmp     _L56
				;320	    	{
				;321	 	    	if(!ChargIngFlag)
0C0B	4721	mov     a, maiFlagB[0]
0C0C	40DC	mov     ra, a
0C0D	0F40	mov     a, 40H
0C0E	46DC	andm    a, ra
0C0F	50DC	sz      ra
0C10	6C12	jmp     _L56
				;322		    	{
				;323					ChargeFullFlag = false;
0C11	7423	clr     LEDH[0].0
				;324		    	}   		
				;325	    	}
				;326	    }
				;327	    if((k1 > FULL_BAT_VALU))					//				_L56:
0C12	4754	mov     a, k1[0]
0C13	40DC	mov     ra, a
0C14	4755	mov     a, k1[1]
0C15	40DD	mov     rb, a
0C16	0FFC	mov     a, FCH
0C17	425C	sub     a, ra
0C18	0F09	mov     a, 9H
0C19	525D	sbc     a, rb
0C1A	3C0A	sz      C
0C1B	6C37	jmp     _L57
				;328	    {
				;329	    	TimesFullCnt++;
0C1C	475A	mov     a, TimesFullCnt[0]
0C1D	40DC	mov     ra, a
0C1E	54DC	inc     ra
0C1F	475C	mov     a, ra
0C20	40DA	mov     TimesFullCnt[0], a
				;330	    	if(TimesFullCnt >= 20)					//0C21	475A	mov     a, TimesFullCnt[0]
0C22	40DC	mov     ra, a
0C23	0F13	mov     a, 13H
0C24	425C	sub     a, ra
0C25	3C0A	sz      C
0C26	6C39	jmp     _L40
				;331	    	{			
				;332		    	if(!BATUp4p1Flag)					//0C27	4722	mov     a, LEDG[0]
0C28	40DC	mov     ra, a
0C29	0F04	mov     a, 4H
0C2A	46DC	andm    a, ra
0C2B	50DC	sz      ra
0C2C	6C2E	jmp     _L59
				;333		    	{
				;334		    		BATChargeFullCnt = 0;
0C2D	5F3C	clr     BATChargeFullCnt[0]
				;335		    	}
				;336		    	if(ChargIngFlag)					//				_L59:
0C2E	4721	mov     a, maiFlagB[0]
0C2F	40DC	mov     ra, a
0C30	0F40	mov     a, 40H
0C31	46DC	andm    a, ra
0C32	50DC	sz      ra
0C33	6C35	jmp     _LI8
0C34	6C39	jmp     _L40
				;337		    	{
				;338					BATUp4p1Flag = true;
				_LI8:
0C35	7122	set     LEDG[0].2
0C36	6C39	jmp     _L40
				;339		    	}
				;340	    	}  	
				;341	    }
				;342	    else
				;343	    {
				;344			BATUp4p1Flag = false;
				_L57:
0C37	7522	clr     LEDG[0].2
				;345			TimesFullCnt = 0;
0C38	5F5A	clr     TimesFullCnt[0]
				_L40:
0C39	0003	ret
				;346	    }
				;347	}
				;348	
				;349	
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				;5	typedef struct
				;6	{
				;7		u16 Min;
				;8		u16 Max;
				;9	} __TEMP;
				;10	extern unsigned int PWM_VLAUE;
				;11	extern unsigned int k;
				;12	extern unsigned int k2;
				;13	extern unsigned char adcsp_2;
				;14	extern unsigned char adcsele_2; 
				;15	/*****************************************************
				;16	***************  Out = 0;	**************************
				;17	***************  In = 1;	**************************
				;18	******************************************************/
				;19	
				;20	void InitSys(void)		//   OUT = 0     IN = 1
				;21	{
				;22	// System clock setting
				;23		_smod = 0b11100001;					// fsys=fH=8MHz; IDLE mode Disable
				_InitSys:
				_InitSys:
				@dummy .SECTION 'CODE'
014F	0FE1	mov     a, E1H
0150	008B	mov     SMOD, a
				;24		// Watchdog Timer Setting  
				;25		_wdtc = 0b01010101;					// set WDT Timeout period= 2^16/fsub=2^16/32.768kHz=2sec; Enable WDT
0151	0F55	mov     a, 55H
0152	009A	mov     WDTC, a
				;26	    _lvrc = 0b00110011; //2.55V
0153	0F33	mov     a, 33H
0154	009D	mov     LVRC, a
				;27	    _cpc = 0x08;
0155	0F08	mov     a, 8H
0156	00BE	mov     CPC, a
				;28	/****** buzzer ***************/    
				;29	    _pcc0 = 0;
0157	3441	clr     PCC0
				;30	    _pcpu0 = 1;
0158	3042	set     PCPU0
				;31	    Buzz_OFF;
0159	3440	clr     PC0
				;32	//*********** LED_IO *********************//    
				;33	    _pcc1 = 0;
015A	34C1	clr     PCC1
				;34	    _pcpu1 = 1;
015B	30C2	set     PCPU1
				;35	    _pcc2 = 0;
015C	3541	clr     PCC2
				;36	    _pcpu2 = 1;
015D	3142	set     PCPU2
				;37	    _pac1 = 0;
015E	3495	clr     PAC1
				;38	    _papu1 = 1;
015F	3096	set     PAPU1
				;39	    _pac2 = 0;
0160	3515	clr     PAC2
				;40	    _papu2 = 1;
0161	3116	set     PAPU2
				;41		LED_WHITE_2_OFF;	
0162	3114	set     PA2
				;42		COM1_OUTPUT;
0163	34C1	clr     PCC1
0164	30C2	set     PCPU1
				;43		COM2_OUTPUT;
0165	3541	clr     PCC2
0166	3142	set     PCPU2
				;44		COM3_OUTPUT;
0167	3495	clr     PAC1
0168	3096	set     PAPU1
				;45	    _pac7 = 0;
0169	3795	clr     PAC7
				;46	    _papu7 = 1;
016A	3396	set     PAPU7
				;47		LED_Breathe_OFF;			
016B	3394	set     PA7
				;48	/********** Read Bat_status **************************************/
				;49		_pbc0 = 1;      
016C	3026	set     PBC0
				;50	    _pbpu0 = 0;	//016D	3427	clr     PBPU0
				;51	    /*Bat_Status = Bat_Satiation;*/
				;52	/************ 				;53	    _pac5 = 0;
016E	3695	clr     PAC5
				;54	    _papu5 = 1;
016F	3296	set     PAPU5
				;55		MOTOR_OFF;	
0170	3694	clr     PA5
				;56		
				;57		_pac4 = 1;
0171	3215	set     PAC4
				;58		_papu5 = 0;
0172	3696	clr     PAPU5
				;59	    //******** Battery_AN5 ***************/
				;60	    _acerl = 0;
0173	1F24	clr     ACERL
				;61	    _acerl |= 0b00101100;	//********* PA4 && PA6 && PB2 = AD0174	0724	mov     a, ACERL
0175	40DC	mov     ra, a
0176	0F2C	mov     a, 2CH
0177	45DC	orm     a, ra
0178	475C	mov     a, ra
0179	00A4	mov     ACERL, a
				;62	    _adcr0 = ADC_NTC;		//	011017A	0F13	mov     a, 13H
017B	00A2	mov     ADCR0, a
				;63	    _adcr1 = 0x06;			//  110017C	0F06	mov     a, 6H
017D	00A3	mov     ADCR1, a
				;64	    STAR_ADC();
017E	37A2	clr     START
017F	33A2	set     START
0180	37A2	clr     START
				;65	/************** Open_Out_5V *****************************************/
				;66		_pbc1 = 0;      
0181	34A6	clr     PBC1
				;67		_pbpu1 = 0;				//0182	34A7	clr     PBPU1
				;68		Out_5V_IO_Close;
0183	30A6	set     PBC1
				;69	/******************************************************************/
				;70	//adc init   
				;71	//********** KEY_IO  *****************************//
				;72		_pac3 = 1;
0184	3195	set     PAC3
				;73		_papu3 = 1;
0185	3196	set     PAPU3
				;74		_pawu3 = 1;
0186	3197	set     PAWU3
				;75		KEY = 1;
0187	3194	set     PA3
				;76	//*********** Heat_Wire ***********************************//    
				;77		_pbc2 = 0;
0188	3526	clr     PBC2
				;78		_pbpu2 = 1;
0189	3127	set     PBPU2
				;79		Heat_Wire_OFF;	  
018A	3414	clr     PA0
018B	0003	ret
				;80	}
				;81	
				;82	void VarInit(void)
				;83	{
				;84		Forward_Value = 0;
				_VarInit:
				_VarInit:
018C	74A0	clr     maiFlagA[0].1
				;85		Forward_Value_Flag = 0;
018D	7421	clr     maiFlagB[0].0
				;86		Double_Click_Value = 0;	
018E	75A0	clr     maiFlagA[0].3
				;87		Double_Click_Value_Flag = 0;
018F	74A1	clr     maiFlagB[0].1
				;88		Key_Forward_Long_val = 0;
0190	7620	clr     maiFlagA[0].4
				;89		Key_Forward_Long_val_Flag = 0;
0191	7521	clr     maiFlagB[0].2
				;90		TempDirDnFlag = 0;
0192	77A0	clr     maiFlagA[0].7
				;91		WorkMode = READY_MODE;
0193	5F33	clr     WorkMode[0]
				;92		
				;93		Breathe_Flag = 0;
0194	7422	clr     LEDG[0].0
				;94		Buzzer.Times = 0;
0195	5F25	clr     Buzzer[0]
				;95		Buzz_OFF;
0196	3440	clr     PC0
				;96		TaskKeyRdy = false;
0197	76A2	clr     LEDG[0].5
				;97		Out_5V_IO_Close;
0198	30A6	set     PBC1
				;98		k = 0;
0199	5F52	clr     k[0]
019A	5F53	clr     k[1]
				;99		k2 = 0;
019B	5F56	clr     k2[0]
019C	5F57	clr     k2[1]
				;100		
				;101		TempSta = DOWN_30;
019D	5F34	clr     TempSta[0]
				;102		Output5V.Times = 0;
019E	5F2A	clr     Output5V[0]
				;103		ChargIngFlag = false;
019F	7721	clr     maiFlagB[0].6
				;104		NormalWinterFlag = false;
01A0	7622	clr     LEDG[0].4
				;105		ntc_val = 0;
01A1	5F35	clr     ntc_val[0]
01A2	5F36	clr     ntc_val[1]
				;106		Open5V200msCnt = 0;	
01A3	5F37	clr     Open5V200msCnt[0]
01A4	5F38	clr     Open5V200msCnt[1]
				;107		direc_flag = true;			//01A5	7320	set     maiFlagA[0].6
				;108		PreHeatFlag = false;		//01A6	7420	clr     maiFlagA[0].0
				;109		SleepCnt = 0;
01A7	5F24	clr     SleepCnt[0]
				;110		SumOfEdge = 0;
01A8	5F3D	clr     SumOfEdge[0]
				;111		LEDSta[LED_RED_INDEX] = 0;
01A9	5F2F	clr     LEDSta[0]
				;112		LEDSta[LED_BLUE_INDEX] = 0;
01AA	5F30	clr     LEDSta[1]
				;113		LEDSta[LED_WHITE_INDEX] = 0;
01AB	5F31	clr     LEDSta[2]
				;114		LEDSta[LED_GREEN_INDEX] = 0;
01AC	5F32	clr     LEDSta[3]
				;115				
				;116		BatSta = BATTRY_NORMAL;		//01AD	5F3E	clr     BatSta[0]
				;117		BATLow3p5Flag = false;		//01AE	74A2	clr     LEDG[0].1
				;118		ChargeFullFlag = false;		//01AF	7423	clr     LEDH[0].0
				;119		LowBatShutDnSCnt = 0;		//01B0	5F3B	clr     LowBatShutDnSCnt[0]
				;120		BATChargeFullCnt = 0;		//01B1	5F3C	clr     BATChargeFullCnt[0]
				;121	
				;122		IntCnt = 0;
01B2	5F3F	clr     IntCnt[0]
				;123		
				;124		EnADCFlag = false;
01B3	7621	clr     maiFlagB[0].4
01B4	0003	ret
				;125	}
				;file E:\				;1	/**************************************************************************/
				;2	
				;3	#include "base.h"
				;4	#define EXTERN extern
				;5	#include "Var.h"
				;6	
				;7	/**********************************/
				;8	volatile static unsigned char Forward_Buf __attribute__ ((at(0x1dd)));
				;9	volatile static unsigned char Pre_Forward_Buf __attribute__ ((at(0x1de)));
				;10	volatile static unsigned char Key_Forward_Time __attribute__ ((at(0x1df)));
				;11	volatile static unsigned int Key_Forward_Delay __attribute__ ((at(0x1e0)));
				;12	volatile static unsigned int Key_Forward_Ms __attribute__ ((at(0x1e2)));
				;13	volatile static unsigned char Key_Forward_Mode __attribute__ ((at(0x1e4)));
				;14	volatile static unsigned int Double_Click_timer __attribute__ ((at(0x1e5)));
				;15	volatile static unsigned char Change_Key_Mode __attribute__ ((at(0x1e7)));
				;16	volatile static unsigned int Key_LongPre_timer __attribute__ ((at(0x1e8)));
				;17	
				;18	/*********************************/
				;19	/**********************************/
				;20	extern unsigned char Key_ms;
				;21	
				;22	/*******************************/
				;23	#define KEY_LONG	150
				;24	#define MAX_EFFECT_TIME	200	//2S
				;25	/********* 				;26	void TaskKey(void)
				;27	{
				;28		if(TaskKeyRdy)
				_TaskKey:
				_TaskKey:
0425	4722	mov     a, LEDG[0]
0426	40DC	mov     ra, a
0427	0F20	mov     a, 20H
0428	46DC	andm    a, ra
0429	50DC	sz      ra
042A	2C2C	jmp     _LI1
042B	2D9F	jmp     _L2
				;29		{
				;30			TaskKeyRdy = false;	
				_LI1:
042C	76A2	clr     LEDG[0].5
				;31	/************ Forward Key *************************************************/		
				;32			if(KEY == 0) 
042D	0714	mov     a, PA
042E	40DC	mov     ra, a
042F	0F08	mov     a, 8H
0430	46DC	andm    a, ra
0431	50DC	sz      ra
0432	2C3C	jmp     _L3
				;33			{
				;34				Forward_Buf=1;	
0433	0FDD	mov     a, DDH
0434	0083	mov     MP1, a
0435	0F01	mov     a, 1H
0436	0081	mov     MP0, a
0437	0701	mov     a, MP0
0438	0084	mov     BP, a
0439	0F01	mov     a, 1H
043A	0082	mov     [02H], a
043B	2C44	jmp     _L4
				;35			}
				;36			else 
				;37			{
				;38				Forward_Buf = 0;		
				_L3:
043C	0FDD	mov     a, DDH
043D	0083	mov     MP1, a
043E	0F01	mov     a, 1H
043F	0081	mov     MP0, a
0440	0701	mov     a, MP0
0441	0084	mov     BP, a
0442	0F00	mov     a, 0H
0443	0082	mov     [02H], a
				;39			}
				;40			/*********** 				;41			if(Forward_Buf != Pre_Forward_Buf)
				_L4:
0444	0FDD	mov     a, DDH
0445	0083	mov     MP1, a
0446	0F01	mov     a, 1H
0447	0081	mov     MP0, a
0448	0701	mov     a, MP0
0449	0084	mov     BP, a
044A	0702	mov     a, [02H]
044B	40DD	mov     rb, a
044C	0FDE	mov     a, DEH
044D	0083	mov     MP1, a
044E	0F01	mov     a, 1H
044F	0081	mov     MP0, a
0450	0701	mov     a, MP0
0451	0084	mov     BP, a
0452	0702	mov     a, [02H]
0453	40DC	mov     ra, a
0454	475D	mov     a, rb
0455	425C	sub     a, ra
0456	3D0A	sz      Z
0457	2CA8	jmp     _L5
				;42			{
				;43				Key_Forward_Time++;
0458	0FDF	mov     a, DFH
0459	0083	mov     MP1, a
045A	0F01	mov     a, 1H
045B	0081	mov     MP0, a
045C	0701	mov     a, MP0
045D	0084	mov     BP, a
045E	0702	mov     a, [02H]
045F	40DC	mov     ra, a
0460	54DC	inc     ra
0461	0FDF	mov     a, DFH
0462	0083	mov     MP1, a
0463	0F01	mov     a, 1H
0464	0081	mov     MP0, a
0465	0701	mov     a, MP0
0466	0084	mov     BP, a
0467	475C	mov     a, ra
0468	0082	mov     [02H], a
				;44				if( Key_Forward_Time > 5)
0469	0FDF	mov     a, DFH
046A	0083	mov     MP1, a
046B	0F01	mov     a, 1H
046C	0081	mov     MP0, a
046D	0701	mov     a, MP0
046E	0084	mov     BP, a
046F	0702	mov     a, [02H]
0470	40DC	mov     ra, a
0471	0F05	mov     a, 5H
0472	425C	sub     a, ra
0473	3C0A	sz      C
0474	2D9F	jmp     _L2
				;45				{
				;46					if((Forward_Buf == 0)&&(Key_longPre_cut_click == 0))
0475	0FDD	mov     a, DDH
0476	0083	mov     MP1, a
0477	0F01	mov     a, 1H
0478	0081	mov     MP0, a
0479	0701	mov     a, MP0
047A	0084	mov     BP, a
047B	0702	mov     a, [02H]
047C	40DC	mov     ra, a
047D	50DC	sz      ra
047E	2C97	jmp     _L7
047F	4720	mov     a, maiFlagA[0]
0480	40DC	mov     ra, a
0481	0F04	mov     a, 4H
0482	46DC	andm    a, ra
0483	50DC	sz      ra
0484	2C97	jmp     _L7
				;47					{	
				;48						Change_Key_flag = 1;														
0485	72A0	set     maiFlagA[0].5
				;49						Change_Key_Mode++;
0486	0FE7	mov     a, E7H
0487	0083	mov     MP1, a
0488	0F01	mov     a, 1H
0489	0081	mov     MP0, a
048A	0701	mov     a, MP0
048B	0084	mov     BP, a
048C	0702	mov     a, [02H]
048D	40DC	mov     ra, a
048E	54DC	inc     ra
048F	0FE7	mov     a, E7H
0490	0083	mov     MP1, a
0491	0F01	mov     a, 1H
0492	0081	mov     MP0, a
0493	0701	mov     a, MP0
0494	0084	mov     BP, a
0495	475C	mov     a, ra
0496	0082	mov     [02H], a
				;50											
				;51					}
				;52				/********************************************************************/	
				;53					Pre_Forward_Buf = Forward_Buf;
				_L7:
0497	0FDD	mov     a, DDH
0498	0083	mov     MP1, a
0499	0F01	mov     a, 1H
049A	0081	mov     MP0, a
049B	0701	mov     a, MP0
049C	0084	mov     BP, a
049D	0702	mov     a, [02H]
049E	40DC	mov     ra, a
049F	0FDE	mov     a, DEH
04A0	0083	mov     MP1, a
04A1	0F01	mov     a, 1H
04A2	0081	mov     MP0, a
04A3	0701	mov     a, MP0
04A4	0084	mov     BP, a
04A5	475C	mov     a, ra
04A6	0082	mov     [02H], a
04A7	2D9F	jmp     _L2
				;54				}
				;55			}
				;56			else 
				;57			{
				;58				/********************* Double_Click *******************************************/
				;59				if((Double_Click_timer > MAX_EFFECT_TIME)) 
				_L5:
04A8	0FE5	mov     a, E5H
04A9	0083	mov     MP1, a
04AA	0F01	mov     a, 1H
04AB	0081	mov     MP0, a
04AC	0701	mov     a, MP0
04AD	0084	mov     BP, a
04AE	0702	mov     a, [02H]
04AF	40DC	mov     ra, a
04B0	1483	inc     MP1
04B1	0702	mov     a, [02H]
04B2	40DD	mov     rb, a
04B3	0FC8	mov     a, C8H
04B4	425C	sub     a, ra
04B5	0F00	mov     a, 0H
04B6	525D	sbc     a, rb
04B7	3C0A	sz      C
04B8	2CBA	jmp     _L8
				;60						Change_Key_flag = 0;
04B9	76A0	clr     maiFlagA[0].5
				;61				if((Change_Key_flag == 1)&&(Double_Click_timer <= MAX_EFFECT_TIME))		
				_L8:
04BA	4720	mov     a, maiFlagA[0]
04BB	40DC	mov     ra, a
04BC	0F20	mov     a, 20H
04BD	46DC	andm    a, ra
04BE	50DC	sz      ra
04BF	2CC1	jmp     _LI2
04C0	2D0D	jmp     _L9
				_LI2:
04C1	0FE5	mov     a, E5H
04C2	0083	mov     MP1, a
04C3	0F01	mov     a, 1H
04C4	0081	mov     MP0, a
04C5	0701	mov     a, MP0
04C6	0084	mov     BP, a
04C7	0702	mov     a, [02H]
04C8	40DC	mov     ra, a
04C9	1483	inc     MP1
04CA	0702	mov     a, [02H]
04CB	40DD	mov     rb, a
04CC	0FC8	mov     a, C8H
04CD	425C	sub     a, ra
04CE	0F00	mov     a, 0H
04CF	525D	sbc     a, rb
04D0	380A	snz     C
04D1	2D0D	jmp     _L9
				;62				{
				;63					Double_Click_timer++;
04D2	0FE5	mov     a, E5H
04D3	0083	mov     MP1, a
04D4	0F01	mov     a, 1H
04D5	0081	mov     MP0, a
04D6	0701	mov     a, MP0
04D7	0084	mov     BP, a
04D8	0702	mov     a, [02H]
04D9	40DC	mov     ra, a
04DA	1483	inc     MP1
04DB	0702	mov     a, [02H]
04DC	40DD	mov     rb, a
04DD	54DC	inc     ra
04DE	3D0A	sz      Z
04DF	54DD	inc     rb
04E0	0FE5	mov     a, E5H
04E1	0083	mov     MP1, a
04E2	0F01	mov     a, 1H
04E3	0081	mov     MP0, a
04E4	0701	mov     a, MP0
04E5	0084	mov     BP, a
04E6	475C	mov     a, ra
04E7	0082	mov     [02H], a
04E8	1483	inc     MP1
04E9	475D	mov     a, rb
04EA	0082	mov     [02H], a
				;64					if(Change_Key_Mode == 3)
04EB	0FE7	mov     a, E7H
04EC	0083	mov     MP1, a
04ED	0F01	mov     a, 1H
04EE	0081	mov     MP0, a
04EF	0701	mov     a, MP0
04F0	0084	mov     BP, a
04F1	0702	mov     a, [02H]
04F2	40DC	mov     ra, a
04F3	475C	mov     a, ra
04F4	0A03	sub     a, 3H
04F5	390A	snz     Z
04F6	2D0C	jmp     _L10
050B	2D21	jmp     _L11
				_L10:
050C	2D21	jmp     _L11
				;65					{
				;66						Change_Key_flag = 0;
04F7	76A0	clr     maiFlagA[0].5
				;67						Change_Key_Mode = 0;
04F8	0FE7	mov     a, E7H
04F9	0083	mov     MP1, a
04FA	0F01	mov     a, 1H
04FB	0081	mov     MP0, a
04FC	0701	mov     a, MP0
04FD	0084	mov     BP, a
04FE	0F00	mov     a, 0H
04FF	0082	mov     [02H], a
				;68						Double_Click_timer = 0;
0500	0FE5	mov     a, E5H
0501	0083	mov     MP1, a
0502	0F01	mov     a, 1H
0503	0081	mov     MP0, a
0504	0701	mov     a, MP0
0505	0084	mov     BP, a
0506	1F02	clr     [02H]
0507	1483	inc     MP1
0508	1F02	clr     [02H]
				;69						Forward_Value = 0;
0509	74A0	clr     maiFlagA[0].1
				;70						Double_Click_Value = 1;	
050A	71A0	set     maiFlagA[0].3
				;71					}
				;72				}
				;73				else
				;74				{
				;75					Change_Key_flag = 0;
				_L9:
050D	76A0	clr     maiFlagA[0].5
				;76					Change_Key_Mode = 0;
050E	0FE7	mov     a, E7H
050F	0083	mov     MP1, a
0510	0F01	mov     a, 1H
0511	0081	mov     MP0, a
0512	0701	mov     a, MP0
0513	0084	mov     BP, a
0514	0F00	mov     a, 0H
0515	0082	mov     [02H], a
				;77					Double_Click_timer = 0;
0516	0FE5	mov     a, E5H
0517	0083	mov     MP1, a
0518	0F01	mov     a, 1H
0519	0081	mov     MP0, a
051A	0701	mov     a, MP0
051B	0084	mov     BP, a
051C	1F02	clr     [02H]
051D	1483	inc     MP1
051E	1F02	clr     [02H]
				;78					Forward_Value = 0;
051F	74A0	clr     maiFlagA[0].1
				;79					Double_Click_Value = 0;
0520	75A0	clr     maiFlagA[0].3
				;80				}
				;81				/*******************************************************************************************/			
				;82			  /********** 				;83				Key_Forward_Time = 0;
				_L11:
0521	0FDF	mov     a, DFH
0522	0083	mov     MP1, a
0523	0F01	mov     a, 1H
0524	0081	mov     MP0, a
0525	0701	mov     a, MP0
0526	0084	mov     BP, a
0527	0F00	mov     a, 0H
0528	0082	mov     [02H], a
				;84				if(Forward_Buf == 1)
0529	0FDD	mov     a, DDH
052A	0083	mov     MP1, a
052B	0F01	mov     a, 1H
052C	0081	mov     MP0, a
052D	0701	mov     a, MP0
052E	0084	mov     BP, a
052F	0702	mov     a, [02H]
0530	40DC	mov     ra, a
0531	575C	sdza    ra
0532	2D8C	jmp     _L12
				;85				{
				;86					if(Key_Forward_Delay <= KEY_LONG)	// 3s
0533	0FE0	mov     a, E0H
0534	0083	mov     MP1, a
0535	0F01	mov     a, 1H
0536	0081	mov     MP0, a
0537	0701	mov     a, MP0
0538	0084	mov     BP, a
0539	0702	mov     a, [02H]
053A	40DC	mov     ra, a
053B	1483	inc     MP1
053C	0702	mov     a, [02H]
053D	40DD	mov     rb, a
053E	0F96	mov     a, 96H
053F	425C	sub     a, ra
0540	0F00	mov     a, 0H
0541	525D	sbc     a, rb
0542	380A	snz     C
0543	2D72	jmp     _L13
				;87					{
				;88						Key_Forward_Delay++;
0544	0FE0	mov     a, E0H
0545	0083	mov     MP1, a
0546	0F01	mov     a, 1H
0547	0081	mov     MP0, a
0548	0701	mov     a, MP0
0549	0084	mov     BP, a
054A	0702	mov     a, [02H]
054B	40DC	mov     ra, a
054C	1483	inc     MP1
054D	0702	mov     a, [02H]
054E	40DD	mov     rb, a
054F	54DC	inc     ra
0550	3D0A	sz      Z
0551	54DD	inc     rb
0552	0FE0	mov     a, E0H
0553	0083	mov     MP1, a
0554	0F01	mov     a, 1H
0555	0081	mov     MP0, a
0556	0701	mov     a, MP0
0557	0084	mov     BP, a
0558	475C	mov     a, ra
0559	0082	mov     [02H], a
055A	1483	inc     MP1
055B	475D	mov     a, rb
055C	0082	mov     [02H], a
				;89						if(Key_Forward_Delay == KEY_LONG)
055D	0FE0	mov     a, E0H
055E	0083	mov     MP1, a
055F	0F01	mov     a, 1H
0560	0081	mov     MP0, a
0561	0701	mov     a, MP0
0562	0084	mov     BP, a
0563	0702	mov     a, [02H]
0564	40DC	mov     ra, a
0565	1483	inc     MP1
0566	0702	mov     a, [02H]
0567	40DD	mov     rb, a
0568	475C	mov     a, ra
0569	0C96	xor     a, 96H
056A	455D	or      a, rb
056B	390A	snz     Z
056C	2D9F	jmp     _L2
				;90						{
				;91							Key_longPre_cut_click = 1;
056D	7120	set     maiFlagA[0].2
				;92							Double_Click_Value = 0;
056E	75A0	clr     maiFlagA[0].3
				;93							Forward_Value = 0;
056F	74A0	clr     maiFlagA[0].1
				;94							Key_Forward_Long_val = 1;	
0570	7220	set     maiFlagA[0].4
0571	2D9F	jmp     _L2
				;95						}
				;96					}				
				;97					/******************************/
				;98					else Key_Forward_Ms++;
				_L13:
0572	0FE2	mov     a, E2H
0573	0083	mov     MP1, a
0574	0F01	mov     a, 1H
0575	0081	mov     MP0, a
0576	0701	mov     a, MP0
0577	0084	mov     BP, a
0578	0702	mov     a, [02H]
0579	40DC	mov     ra, a
057A	1483	inc     MP1
057B	0702	mov     a, [02H]
057C	40DD	mov     rb, a
057D	54DC	inc     ra
057E	3D0A	sz      Z
057F	54DD	inc     rb
0580	0FE2	mov     a, E2H
0581	0083	mov     MP1, a
0582	0F01	mov     a, 1H
0583	0081	mov     MP0, a
0584	0701	mov     a, MP0
0585	0084	mov     BP, a
0586	475C	mov     a, ra
0587	0082	mov     [02H], a
0588	1483	inc     MP1
0589	475D	mov     a, rb
058A	0082	mov     [02H], a
058B	2D9F	jmp     _L2
				;99				}
				;100				else 
				;101				{
				;102					Key_longPre_cut_click = 0;
				_L12:
058C	7520	clr     maiFlagA[0].2
				;103					Key_Forward_Ms = 0;
058D	0FE2	mov     a, E2H
058E	0083	mov     MP1, a
058F	0F01	mov     a, 1H
0590	0081	mov     MP0, a
0591	0701	mov     a, MP0
0592	0084	mov     BP, a
0593	1F02	clr     [02H]
0594	1483	inc     MP1
0595	1F02	clr     [02H]
				;104					Key_Forward_Delay = 0;
0596	0FE0	mov     a, E0H
0597	0083	mov     MP1, a
0598	0F01	mov     a, 1H
0599	0081	mov     MP0, a
059A	0701	mov     a, MP0
059B	0084	mov     BP, a
059C	1F02	clr     [02H]
059D	1483	inc     MP1
059E	1F02	clr     [02H]
				;105				}
				;106			}					
				;107	/*********************************************************************/		
				;108		}
				;109	/************ 				;110	/************ One_Press *************************************/
				;111		if( Forward_Value == 1)  // Click
				_L2:
059F	4720	mov     a, maiFlagA[0]
05A0	40DC	mov     ra, a
05A1	0F02	mov     a, 2H
05A2	46DC	andm    a, ra
05A3	50DC	sz      ra
05A4	2DA6	jmp     _LI3
05A5	2DAB	jmp     _L16
				;112		 {
				;113		 	Forward_Value = 0;
				_LI3:
05A6	74A0	clr     maiFlagA[0].1
				;114		 	Double_Click_Value_Flag = 0;
05A7	74A1	clr     maiFlagB[0].1
				;115			Key_Forward_Long_val_Flag = 0;
05A8	7521	clr     maiFlagB[0].2
				;116			Forward_Value_Flag = 1;
05A9	7021	set     maiFlagB[0].0
05AA	2DC2	jmp     _L1
				;117		 }
				;118		 else
				;119	/***********************************************************/
				;120		if( Key_Forward_Long_val == 1)  // Press_Long
				_L16:
05AB	4720	mov     a, maiFlagA[0]
05AC	40DC	mov     ra, a
05AD	0F10	mov     a, 10H
05AE	46DC	andm    a, ra
05AF	50DC	sz      ra
05B0	2DB2	jmp     _LI4
05B1	2DB7	jmp     _L18
				;121		 {		
				;122			Key_Forward_Long_val = 0;
				_LI4:
05B2	7620	clr     maiFlagA[0].4
				;123			Forward_Value_Flag = 0;
05B3	7421	clr     maiFlagB[0].0
				;124			Double_Click_Value_Flag = 0;
05B4	74A1	clr     maiFlagB[0].1
				;125			Key_Forward_Long_val_Flag = 1;
05B5	7121	set     maiFlagB[0].2
05B6	2DC2	jmp     _L1
				;126		 }
				;127		 else
				;128	/************** Double_Click ***********************************/
				;129		if(Double_Click_Value == 1)		// Double Click
				_L18:
05B7	4720	mov     a, maiFlagA[0]
05B8	40DC	mov     ra, a
05B9	0F08	mov     a, 8H
05BA	46DC	andm    a, ra
05BB	50DC	sz      ra
05BC	2DBE	jmp     _LI5
05BD	2DC2	jmp     _L1
				;130		{
				;131			Double_Click_Value = 0;
				_LI5:
05BE	75A0	clr     maiFlagA[0].3
				;132			Forward_Value_Flag = 0;
05BF	7421	clr     maiFlagB[0].0
				;133			Key_Forward_Long_val_Flag = 0;
05C0	7521	clr     maiFlagB[0].2
				;134			Double_Click_Value_Flag = 1;		
05C1	70A1	set     maiFlagB[0].1
				_L1:
05C2	0003	ret
				;135		}	
				;136	//	if(Bat_Power__flag == 1)
				;137	//	{
				;138	//		Key_Forward_Long_val = 0;
				;139	//	}
				;140	}
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	/************* BUZZ 				;6	
				;7	void Open5V(void)
				;8	{
				;9		Output5V.Times = 1;
				_Open5V:
				_Open5V:
05C3	0F01	mov     a, 1H
05C4	40AA	mov     Output5V[0], a
				;10		Output5V.OnCnt = OPEN5V_ON_TIME;
05C5	0F3C	mov     a, 3CH
05C6	40AB	mov     Output5V[1], a
05C7	5F2C	clr     Output5V[2]
				;11		Output5V.OffCnt = 0;	
05C8	5F2D	clr     Output5V[3]
05C9	5F2E	clr     Output5V[4]
05CA	0003	ret
				;12	}
				;13	
				;14	void Close5V(void)
				;15	{
				;16		Output5V.Times = 2;
				_Close5V:
				_Close5V:
05CB	0F02	mov     a, 2H
05CC	40AA	mov     Output5V[0], a
				;17		Output5V.OnCnt = OPEN5V_ON_TIME;
05CD	0F3C	mov     a, 3CH
05CE	40AB	mov     Output5V[1], a
05CF	5F2C	clr     Output5V[2]
				;18		Output5V.OffCnt = OPEN5V_OFF_TIME;	
05D0	0F3C	mov     a, 3CH
05D1	40AD	mov     Output5V[3], a
05D2	5F2E	clr     Output5V[4]
05D3	0003	ret
				;19	}
				;20	
				;21	/*************************************************************/
				;22	void KeyBuzzer(char Buzz_1)	
				;23	{
				_KeyBuzzer:
				_KeyBuzzer:
05D4	40F9	mov     Buzz_1[0], a
				;24		switch(Buzz_1)
05D5	4779	mov     a, Buzz_1[0]
05D6	40DC	mov     ra, a
05D7	5F5D	clr     rb
05D8	3F85	sz      ACC.7
05D9	5FDD	set     rb
05DA	475C	mov     a, ra
05DB	0C01	xor     a, 1H
05DC	455D	or      a, rb
05DD	3D0A	sz      Z
05DE	2DEF	jmp     L05EF
05DF	475C	mov     a, ra
05E0	0C02	xor     a, 2H
05E1	455D	or      a, rb
05E2	3D0A	sz      Z
05E3	2DF8	jmp     L05F8
05E4	475C	mov     a, ra
05E5	0C03	xor     a, 3H
05E6	455D	or      a, rb
05E7	3D0A	sz      Z
05E8	2E01	jmp     L0601
05E9	475C	mov     a, ra
05EA	0C04	xor     a, 4H
05EB	455D	or      a, rb
05EC	3D0A	sz      Z
05ED	2E0A	jmp     L060A
				;25		{		
				;26			case 1:		//  				;27				Buzzer.Times = 1;
				L05EF:
05EF	0F01	mov     a, 1H
05F0	40A5	mov     Buzzer[0], a
				;28				Buzzer.OnCnt = 15;
05F1	0F0F	mov     a, FH
05F2	40A6	mov     Buzzer[1], a
05F3	5F27	clr     Buzzer[2]
				;29				Buzzer.OffCnt = 8;
05F4	0F08	mov     a, 8H
05F5	40A8	mov     Buzzer[3], a
05F6	5F29	clr     Buzzer[4]
				;30				break;
05F7	2E12	jmp     L0612
				;31			case 2:		// 				;32				Buzzer.Times = 2;
				L05F8:
05F8	0F02	mov     a, 2H
05F9	40A5	mov     Buzzer[0], a
				;33				Buzzer.OnCnt = 13;
05FA	0F0D	mov     a, DH
05FB	40A6	mov     Buzzer[1], a
05FC	5F27	clr     Buzzer[2]
				;34				Buzzer.OffCnt = 8;
05FD	0F08	mov     a, 8H
05FE	40A8	mov     Buzzer[3], a
05FF	5F29	clr     Buzzer[4]
				;35				break;
0600	2E12	jmp     L0612
				;36			case 3:		// 				;37				Buzzer.Times = 1;
				L0601:
0601	0F01	mov     a, 1H
0602	40A5	mov     Buzzer[0], a
				;38				Buzzer.OnCnt = 20;
0603	0F14	mov     a, 14H
0604	40A6	mov     Buzzer[1], a
0605	5F27	clr     Buzzer[2]
				;39				Buzzer.OffCnt = 10;
0606	0F0A	mov     a, AH
0607	40A8	mov     Buzzer[3], a
0608	5F29	clr     Buzzer[4]
				;40				break;
0609	2E12	jmp     L0612
				;41			case 4:		// 				;42				Buzzer.Times = 3;
				L060A:
060A	0F03	mov     a, 3H
060B	40A5	mov     Buzzer[0], a
				;43				Buzzer.OnCnt = 10;
060C	0F0A	mov     a, AH
060D	40A6	mov     Buzzer[1], a
060E	5F27	clr     Buzzer[2]
				;44				Buzzer.OffCnt = 8;
060F	0F08	mov     a, 8H
0610	40A8	mov     Buzzer[3], a
0611	5F29	clr     Buzzer[4]
				;45				break;
				L0612:
0612	0003	ret
				;46			default:
				;47				
				;48				break;
05EE	2E12	jmp     L0612
				;49		}
				;50	}
				;51	
				;52	void TaskBuzzer(void)
				;53	{
				;54		if(TaskBuzzerRdy)
				_TaskBuzzer:
				_TaskBuzzer:
0613	4722	mov     a, LEDG[0]
0614	40DC	mov     ra, a
0615	0F08	mov     a, 8H
0616	46DC	andm    a, ra
0617	50DC	sz      ra
0618	2E1A	jmp     _LI1
0619	2EAA	jmp     _L10
				;55		{
				;56			TaskBuzzerRdy = false;
				_LI1:
061A	75A2	clr     LEDG[0].3
				;57			if(Buzzer.Times > 0)	//061B	4725	mov     a, Buzzer[0]
061C	40DC	mov     ra, a
061D	7FDC	sz      ra.7
061E	2E61	jmp     _L12
061F	50DC	sz      ra
0620	2E22	jmp     _LI2
0621	2E61	jmp     _L12
				;58			{
				;59				if(Buzzer.OnCnt-- > 0)
				_LI2:
0622	4726	mov     a, Buzzer[1]
0623	40DC	mov     ra, a
0624	4727	mov     a, Buzzer[2]
0625	40DD	mov     rb, a
0626	0FFF	mov     a, FFH
0627	435C	add     a, ra
0628	40DE	mov     rc, a
0629	0FFF	mov     a, FFH
062A	535D	adc     a, rb
062B	40DF	mov     rd, a
062C	475E	mov     a, rc
062D	40A6	mov     Buzzer[1], a
062E	475F	mov     a, rd
062F	40A7	mov     Buzzer[2], a
0630	7FDD	sz      rb.7
0631	2E38	jmp     _L13
0632	475C	mov     a, ra
0633	455D	or      a, rb
0634	3D0A	sz      Z
0635	2E38	jmp     _L13
				;60				{
				;61					Buzz_ON;
0636	3040	set     PC0
0637	2E62	jmp     _L16
				;62				}
				;63				else
				;64				{
				;65					if(Buzzer.OffCnt-- > 0)
				_L13:
0638	4728	mov     a, Buzzer[3]
0639	40DC	mov     ra, a
063A	4729	mov     a, Buzzer[4]
063B	40DD	mov     rb, a
063C	0FFF	mov     a, FFH
063D	435C	add     a, ra
063E	40DE	mov     rc, a
063F	0FFF	mov     a, FFH
0640	535D	adc     a, rb
0641	40DF	mov     rd, a
0642	475E	mov     a, rc
0643	40A8	mov     Buzzer[3], a
0644	475F	mov     a, rd
0645	40A9	mov     Buzzer[4], a
0646	7FDD	sz      rb.7
0647	2E4E	jmp     _L15
0648	475C	mov     a, ra
0649	455D	or      a, rb
064A	3D0A	sz      Z
064B	2E4E	jmp     _L15
				;66					{
				;67						Buzz_OFF;
064C	3440	clr     PC0
064D	2E62	jmp     _L16
				;68					}
				;69					else
				;70					{
				;71						if(Buzzer.Times > 0)
				_L15:
064E	4725	mov     a, Buzzer[0]
064F	40DC	mov     ra, a
0650	7FDC	sz      ra.7
0651	2E62	jmp     _L16
0652	50DC	sz      ra
0653	2E55	jmp     _LI3
0654	2E62	jmp     _L16
				;72						{
				;73							Buzzer.Times--;
				_LI3:
0655	4725	mov     a, Buzzer[0]
0656	40DC	mov     ra, a
0657	55DC	dec     ra
0658	475C	mov     a, ra
0659	40A5	mov     Buzzer[0], a
				;74							Buzzer.OnCnt = BUZZER_ON_TIME;
065A	0F0F	mov     a, FH
065B	40A6	mov     Buzzer[1], a
065C	5F27	clr     Buzzer[2]
				;75							Buzzer.OffCnt = BUZZER_OFF_TIME;
065D	0F08	mov     a, 8H
065E	40A8	mov     Buzzer[3], a
065F	5F29	clr     Buzzer[4]
0660	2E62	jmp     _L16
				;76						}				
				;77					}
				;78				}		
				;79			}
				;80			else
				;81			{		
				;82				Buzz_OFF;
				_L12:
0661	3440	clr     PC0
				;83			}
				;84			
				;85			if(Output5V.Times > 0)	//5v				_L16:
0662	472A	mov     a, Output5V[0]
0663	40DC	mov     ra, a
0664	7FDC	sz      ra.7
0665	2EA9	jmp     _L17
0666	50DC	sz      ra
0667	2E69	jmp     _LI4
0668	2EA9	jmp     _L17
				;86			{
				;87				if(Output5V.OnCnt-- > 0)
				_LI4:
0669	472B	mov     a, Output5V[1]
066A	40DC	mov     ra, a
066B	472C	mov     a, Output5V[2]
066C	40DD	mov     rb, a
066D	0FFF	mov     a, FFH
066E	435C	add     a, ra
066F	40DE	mov     rc, a
0670	0FFF	mov     a, FFH
0671	535D	adc     a, rb
0672	40DF	mov     rd, a
0673	475E	mov     a, rc
0674	40AB	mov     Output5V[1], a
0675	475F	mov     a, rd
0676	40AC	mov     Output5V[2], a
0677	7FDD	sz      rb.7
0678	2E80	jmp     _L18
0679	475C	mov     a, ra
067A	455D	or      a, rb
067B	3D0A	sz      Z
067C	2E80	jmp     _L18
				;88				{
				;89					Out_5V_IO_Open;
067D	34A6	clr     PBC1
067E	34A5	clr     PB1
067F	2EAA	jmp     _L10
				;90				}
				;91				else
				;92				{
				;93					if(Output5V.OffCnt-- > 0)
				_L18:
0680	472D	mov     a, Output5V[3]
0681	40DC	mov     ra, a
0682	472E	mov     a, Output5V[4]
0683	40DD	mov     rb, a
0684	0FFF	mov     a, FFH
0685	435C	add     a, ra
0686	40DE	mov     rc, a
0687	0FFF	mov     a, FFH
0688	535D	adc     a, rb
0689	40DF	mov     rd, a
068A	475E	mov     a, rc
068B	40AD	mov     Output5V[3], a
068C	475F	mov     a, rd
068D	40AE	mov     Output5V[4], a
068E	7FDD	sz      rb.7
068F	2E96	jmp     _L20
0690	475C	mov     a, ra
0691	455D	or      a, rb
0692	3D0A	sz      Z
0693	2E96	jmp     _L20
				;94					{
				;95						Out_5V_IO_Close;
0694	30A6	set     PBC1
0695	2EAA	jmp     _L10
				;96					}
				;97					else
				;98					{
				;99						if(Output5V.Times > 0)
				_L20:
0696	472A	mov     a, Output5V[0]
0697	40DC	mov     ra, a
0698	7FDC	sz      ra.7
0699	2EAA	jmp     _L10
069A	50DC	sz      ra
069B	2E9D	jmp     _LI5
069C	2EAA	jmp     _L10
				;100						{
				;101							Output5V.Times--;
				_LI5:
069D	472A	mov     a, Output5V[0]
069E	40DC	mov     ra, a
069F	55DC	dec     ra
06A0	475C	mov     a, ra
06A1	40AA	mov     Output5V[0], a
				;102							Output5V.OnCnt = OPEN5V_ON_TIME;
06A2	0F3C	mov     a, 3CH
06A3	40AB	mov     Output5V[1], a
06A4	5F2C	clr     Output5V[2]
				;103							Output5V.OffCnt = OPEN5V_OFF_TIME;
06A5	0F3C	mov     a, 3CH
06A6	40AD	mov     Output5V[3], a
06A7	5F2E	clr     Output5V[4]
06A8	2EAA	jmp     _L10
				;104						}				
				;105					}
				;106				}		
				;107			}
				;108			else
				;109			{		
				;110				Out_5V_IO_Close;
				_L17:
06A9	30A6	set     PBC1
				_L10:
06AA	0003	ret
				;111			}			
				;112							
				;113		}
				;114	}
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	
				;6	void TaskBatOp(void)
				;7	{
				;8		if(TaskBatRdyFlag)
				_TaskBatOp:
				_TaskBatOp:
0C3A	4721	mov     a, maiFlagB[0]
0C3B	40DC	mov     ra, a
0C3C	0F80	mov     a, 80H
0C3D	46DC	andm    a, ra
0C3E	50DC	sz      ra
0C3F	6C41	jmp     _LI1
0C40	6CB3	jmp     _L1
				;9		{
				;10	/*		MOTOR_ON;*/
				;11			TaskBatRdyFlag = false;
				_LI1:
0C41	77A1	clr     maiFlagB[0].7
				;12			GetBatValu();								//0C42	6291	call    _GetBatValu
				;13	/*		MOTOR_OFF;*/
				;14			EnADCFlag = false;							//0C43	7621	clr     maiFlagB[0].4
				;15			if((ChargIngFlag)&&(!ChargeFullFlag))		//0C44	4721	mov     a, maiFlagB[0]
0C45	40DC	mov     ra, a
0C46	0F40	mov     a, 40H
0C47	46DC	andm    a, ra
0C48	50DC	sz      ra
0C49	6C4B	jmp     _LI2
0C4A	6C55	jmp     _L3
				_LI2:
0C4B	4723	mov     a, LEDH[0]
0C4C	40DC	mov     ra, a
0C4D	0F01	mov     a, 1H
0C4E	46DC	andm    a, ra
0C4F	50DC	sz      ra
0C50	6C55	jmp     _L3
				;16			{			
				;17				BatSta = BATTRY_CHARGE;
0C51	0F02	mov     a, 2H
0C52	40BE	mov     BatSta[0], a
				;18				Breathe_Flag = 1;
0C53	7022	set     LEDG[0].0
0C54	6C6B	jmp     _L4
				;19			}
				;20			else 
				;21			{
				;22				Breathe_Flag = 0;
				_L3:
0C55	7422	clr     LEDG[0].0
				;23				if(BATLow3p5Flag)						//0C56	4722	mov     a, LEDG[0]
0C57	40DC	mov     ra, a
0C58	0F02	mov     a, 2H
0C59	46DC	andm    a, ra
0C5A	50DC	sz      ra
0C5B	6C5D	jmp     _LI3
0C5C	6C60	jmp     _L5
				;24				{
				;25					BatSta = BATTRY_LOW;						
				_LI3:
0C5D	0F01	mov     a, 1H
0C5E	40BE	mov     BatSta[0], a
0C5F	6C6B	jmp     _L4
				;26				}
				;27				else
				;28				{
				;29					if(ChargeFullFlag)					//				_L5:
0C60	4723	mov     a, LEDH[0]
0C61	40DC	mov     ra, a
0C62	0F01	mov     a, 1H
0C63	46DC	andm    a, ra
0C64	50DC	sz      ra
0C65	6C67	jmp     _LI4
0C66	6C6A	jmp     _L6
				;30					{
				;31						BatSta = BATTRY_FULL;
				_LI4:
0C67	0F03	mov     a, 3H
0C68	40BE	mov     BatSta[0], a
0C69	6C6B	jmp     _L4
				;32					}
				;33					else
				;34					{
				;35						BatSta = BATTRY_NORMAL;			
				_L6:
0C6A	5F3E	clr     BatSta[0]
				;36					}
				;37				}
				;38			}		
				;39			switch(BatSta)
				_L4:
0C6B	473E	mov     a, BatSta[0]
0C6C	40DC	mov     ra, a
0C6D	5F5D	clr     rb
0C6E	475C	mov     a, ra
0C6F	455D	or      a, rb
0C70	3D0A	sz      Z
0C71	6C87	jmp     _L8
0C72	475C	mov     a, ra
0C73	0C01	xor     a, 1H
0C74	455D	or      a, rb
0C75	3D0A	sz      Z
0C76	6C8B	jmp     _L9
0C77	475C	mov     a, ra
0C78	0C02	xor     a, 2H
0C79	455D	or      a, rb
0C7A	3D0A	sz      Z
0C7B	6CB2	jmp     _L19
0C7C	475C	mov     a, ra
0C7D	0C03	xor     a, 3H
0C7E	455D	or      a, rb
0C7F	3D0A	sz      Z
0C80	6C89	jmp     _L11
0C81	475C	mov     a, ra
0C82	0C04	xor     a, 4H
0C83	455D	or      a, rb
0C84	3D0A	sz      Z
0C85	6CB3	jmp     _L1
0C86	6CB0	jmp     _L18
				;40			{
				;41				case BATTRY_WAIT:
				;42					break;
				_L1:
				_L20:
0CB3	0003	ret
				;43				case BATTRY_NORMAL:
				;44					LED_Breathe_OFF;		//				_L8:
0C87	3394	set     PA7
				;45					break;
0C88	6CB3	jmp     _L1
				;46				case BATTRY_CHARGE:
				;47					break;			
				_L19:
0CB2	6CB3	jmp     _L1
				;48				case BATTRY_FULL:
				;49					LED_Breathe_ON;      	//				_L11:
0C89	3794	clr     PA7
				;50					break;		
0C8A	6CB3	jmp     _L1
				;51				case BATTRY_LOW:		
				;52					if(LowBatShutDnSCnt <= BAT_LOW_TIP)    	//				_L9:
0C8B	473B	mov     a, LowBatShutDnSCnt[0]
0C8C	40DC	mov     ra, a
0C8D	0F3C	mov     a, 3CH
0C8E	425C	sub     a, ra
0C8F	380A	snz     C
0C90	6CAA	jmp     _L13
				;53					{
				;54						if(Sys1SCnt & 0x01)		//0C91	473A	mov     a, Sys1SCnt[0]
0C92	40DC	mov     ra, a
0C93	5F5D	clr     rb
0C94	0F01	mov     a, 1H
0C95	46DC	andm    a, ra
0C96	0F00	mov     a, 0H
0C97	46DD	andm    a, rb
0C98	475C	mov     a, ra
0C99	455D	or      a, rb
0C9A	3D0A	sz      Z
0C9B	6C9E	jmp     _L14
				;55						{
				;56							LED_Breathe_ON;
0C9C	3794	clr     PA7
0C9D	6C9F	jmp     _L15
				;57						}
				;58						else
				;59						{
				;60							LED_Breathe_OFF;
				_L14:
0C9E	3394	set     PA7
				;61						}			
				;62						if(Task5SFlag)			//5				_L15:
0C9F	4723	mov     a, LEDH[0]
0CA0	40DC	mov     ra, a
0CA1	0F04	mov     a, 4H
0CA2	46DC	andm    a, ra
0CA3	50DC	sz      ra
0CA4	6CA6	jmp     _LI5
0CA5	6CAF	jmp     _L17
				;63						{		
				;64							Task5SFlag = false;			
				_LI5:
0CA6	7523	clr     LEDH[0].2
				;65							KeyBuzzer(4);		// 0CA7	0F04	mov     a, 4H
0CA8	25D4	call    _KeyBuzzer
				;66						}
				;67					}
				;68					else
				;69					{
				;70						WorkMode = READY_MODE;
				_L13:
0CAA	5F33	clr     WorkMode[0]
				;71						Close5V();
0CAB	25CB	call    _Close5V
				;72						BatSta = BATTRY_WAIT;				
0CAC	0F04	mov     a, 4H
0CAD	40BE	mov     BatSta[0], a
				;73					}
				;74					break;
0CA9	6CB3	jmp     _L1
0CAE	6CB3	jmp     _L1
				_L17:
0CAF	6CB3	jmp     _L1
				;75				default:
				;76					LED_Breathe_OFF;
				_L18:
0CB0	3394	set     PA7
				;77					break;
0CB1	6CB3	jmp     _L1
				;78			}		
				;79		}
				;80	
				;81	}
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	#define PWM_0_VALU		0
				;6	#define PWM_50_VALU	    2048
				;7	
				;8	#define PreHeat() 	{PreHeatFlag = true;Time1SCnt = 0;}			//				;9	
				;10	/****************************************************************/
				;11	
				;12	void TaskFunc(void)
				;13	{
				;14		static u8 StaFlick;
				;15		switch(WorkMode)
				_TaskFunc:
				_TaskFunc:
0CB4	4733	mov     a, WorkMode[0]
0CB5	40DC	mov     ra, a
0CB6	5F5D	clr     rb
0CB7	475C	mov     a, ra
0CB8	455D	or      a, rb
0CB9	3D0A	sz      Z
0CBA	6CC1	jmp     _L3
0CBB	475C	mov     a, ra
0CBC	0C01	xor     a, 1H
0CBD	455D	or      a, rb
0CBE	3D0A	sz      Z
0CBF	6CF7	jmp     _L4
				;16		{
				;17			case READY_MODE:							// Long_Press  				;18				if((Key_Forward_Long_val_Flag == 1)) 
				_L3:
0CC1	4721	mov     a, maiFlagB[0]
0CC2	40DC	mov     ra, a
0CC3	0F04	mov     a, 4H
0CC4	46DC	andm    a, ra
0CC5	50DC	sz      ra
0CC6	6CC8	jmp     _LI1
0CC7	6CD6	jmp     _L5
				;19				 {
				;20				 	Key_Forward_Long_val_Flag = 0;
				_LI1:
0CC8	7521	clr     maiFlagB[0].2
				;21					KeyBuzzer(1);
0CC9	0F01	mov     a, 1H
0CCA	25D4	call    _KeyBuzzer
				;22					Open5V();
0CCB	25C3	call    _Open5V
				;23					Open5V200msCnt = 0;
0CCC	5F37	clr     Open5V200msCnt[0]
0CCD	5F38	clr     Open5V200msCnt[1]
				;24					WorkMode = RUN_MODE;		//0CCE	0F01	mov     a, 1H
0CCF	40B3	mov     WorkMode[0], a
				;25					PreHeat();					//0CD0	7020	set     maiFlagA[0].0
0CD1	5F39	clr     Time1SCnt[0]
				;26				 	TempDir = false;			//0CD2	77A2	clr     LEDG[0].7
				;27				 	_t0on = true;				// turn off timer 0 to change timer config
0CD3	31AF	set     T0ON
				;28				 	IntCnt = 0;					//0CD4	5F3F	clr     IntCnt[0]
0CD5	6CF6	jmp     _L6
				;29				 }
				;30				 else 	
				;31				 {	
				;32				 	_t0on = false;						// turn off timer 0 to change timer config		
				_L5:
0CD6	35AF	clr     T0ON
				;33					Heat_Wire_OFF;
0CD7	3414	clr     PA0
				;34			 	 	COM1_OFF;		 	
0CD8	34C0	clr     PC1
				;35				 	COM2_OFF;
0CD9	3540	clr     PC2
				;36				 	COM3_OFF;
0CDA	3494	clr     PA1
				;37				 	MOTOR_OFF;
0CDB	3694	clr     PA5
				;38					LEDSta[LED_RED_INDEX] = LED_OFF;
0CDC	5F2F	clr     LEDSta[0]
				;39					LEDSta[LED_BLUE_INDEX] = LED_OFF;
0CDD	5F30	clr     LEDSta[1]
				;40					LEDSta[LED_WHITE_INDEX] = LED_OFF;
0CDE	5F31	clr     LEDSta[2]
				;41					LEDSta[LED_GREEN_INDEX] = LED_OFF;
0CDF	5F32	clr     LEDSta[3]
				;42					LED_WHITE_2_OFF;
0CE0	3114	set     PA2
				;43					if((SleepCnt >= 5) && (!ChargIngFlag))	//0CE1	4724	mov     a, SleepCnt[0]
0CE2	40DC	mov     ra, a
0CE3	0F04	mov     a, 4H
0CE4	425C	sub     a, ra
0CE5	3C0A	sz      C
0CE6	6CF6	jmp     _L6
0CE7	4721	mov     a, maiFlagB[0]
0CE8	40DC	mov     ra, a
0CE9	0F40	mov     a, 40H
0CEA	46DC	andm    a, ra
0CEB	50DC	sz      ra
0CEC	6CF6	jmp     _L6
				;44					{
				;45						LED_Breathe_OFF;
0CED	3394	set     PA7
				;46						SleepCnt = 0;
0CEE	5F24	clr     SleepCnt[0]
				;47						Sleep();					
0CEF	2131	call    _Sleep
				;48					 	IntCnt = 0;	
0CF0	5F3F	clr     IntCnt[0]
				;49						BatSta = BATTRY_NORMAL;				//0CF1	5F3E	clr     BatSta[0]
				;50						BATLow3p5Flag = false;
0CF2	74A2	clr     LEDG[0].1
				;51						BATUp4p1Flag = false;
0CF3	7522	clr     LEDG[0].2
				;52						ChargeFullFlag = false;
0CF4	7423	clr     LEDH[0].0
				;53					}								
				;54				 }
				;55				 break;
0CF5	6DDA	jmp     _L1
				_L6:
0CF6	6DDA	jmp     _L1
				;56			case RUN_MODE:			 
				;57				if((Key_Forward_Long_val_Flag))				// 				_L4:
0CF7	4721	mov     a, maiFlagB[0]
0CF8	40DC	mov     ra, a
0CF9	0F04	mov     a, 4H
0CFA	46DC	andm    a, ra
0CFB	50DC	sz      ra
0CFC	6CFE	jmp     _LI2
0CFD	6D03	jmp     _L8
				;58				{
				;59					Key_Forward_Long_val_Flag = 0;
				_LI2:
0CFE	7521	clr     maiFlagB[0].2
				;60					KeyBuzzer(3);
0CFF	0F03	mov     a, 3H
0D00	25D4	call    _KeyBuzzer
				;61					WorkMode = READY_MODE;
0D01	5F33	clr     WorkMode[0]
				;62					Close5V();
0D02	25CB	call    _Close5V
				;63				}
				;64				if(Double_Click_Value_Flag)  		//				_L8:
0D03	4721	mov     a, maiFlagB[0]
0D04	40DC	mov     ra, a
0D05	0F02	mov     a, 2H
0D06	46DC	andm    a, ra
0D07	50DC	sz      ra
0D08	6D0A	jmp     _LI3
0D09	6D22	jmp     _L9
				;65				{
				;66					Double_Click_Value_Flag = 0;
				_LI3:
0D0A	74A1	clr     maiFlagB[0].1
				;67					KeyBuzzer(1);
0D0B	0F01	mov     a, 1H
0D0C	25D4	call    _KeyBuzzer
				;68					NormalWinterFlag = !NormalWinterFlag;
0D0D	4722	mov     a, LEDG[0]
0D0E	40DC	mov     ra, a
0D0F	475C	mov     a, ra
0D10	0E10	and     a, 10H
0D11	40DD	mov     rb, a
0D12	0F01	mov     a, 1H
0D13	40DC	mov     ra, a
0D14	50DD	sz      rb
0D15	6D17	jmp     _LI4
0D16	6D18	jmp     _L10
				_LI4:
0D17	5F5C	clr     ra
				_L10:
0D18	0F01	mov     a, 1H
0D19	46DC	andm    a, ra
0D1A	515C	swapa   ra
0D1B	0EF0	and     a, F0H
0D1C	40DC	mov     ra, a
0D1D	7622	clr     LEDG[0].4
0D1E	475C	mov     a, ra
0D1F	45A2	orm     a, LEDG[0]
				;69					PreHeat();						//0D20	7020	set     maiFlagA[0].0
0D21	5F39	clr     Time1SCnt[0]
				;70				}
				;71				if(PreHeatFlag)						//				_L9:
0D22	4720	mov     a, maiFlagA[0]
0D23	40DC	mov     ra, a
0D24	0F01	mov     a, 1H
0D25	46DC	andm    a, ra
0D26	50DC	sz      ra
0D27	6D29	jmp     _LI5
0D28	6D6D	jmp     _L11
				;72				{
				;73					MOTOR_OFF;
				_LI5:
0D29	3694	clr     PA5
				;74					HeatCtrDuty(PWM_0_VALU);		//0D2A	5F79	clr     i
0D2B	5F7A	clr     min
0D2C	2247	call    _HeatCtrDuty
				;75			
				;76					if(Time1SCnt >= PRE_HEAT)		//0D2D	4739	mov     a, Time1SCnt[0]
0D2E	40DC	mov     ra, a
0D2F	0F09	mov     a, 9H
0D30	425C	sub     a, ra
0D31	3C0A	sz      C
0D32	6D37	jmp     _L12
				;77					{
				;78						Open5V();
0D33	25C3	call    _Open5V
				;79						Open5V200msCnt = 0;		//0D34	5F37	clr     Open5V200msCnt[0]
0D35	5F38	clr     Open5V200msCnt[1]
				;80						PreHeatFlag = false;
0D36	7420	clr     maiFlagA[0].0
				;81					}			
				;82					if(Task500msFlag)
				_L12:
0D37	4723	mov     a, LEDH[0]
0D38	40DC	mov     ra, a
0D39	0F02	mov     a, 2H
0D3A	46DC	andm    a, ra
0D3B	50DC	sz      ra
0D3C	6D3E	jmp     _LI6
0D3D	6DCD	jmp     _L19
				;83					{
				;84						Task500msFlag = false;
				_LI6:
0D3E	74A3	clr     LEDH[0].1
				;85						switch(StaFlick)
0D3F	475B	mov     a, StaFlick[0]
0D40	40DC	mov     ra, a
0D41	5F5D	clr     rb
0D42	475C	mov     a, ra
0D43	455D	or      a, rb
0D44	3D0A	sz      Z
0D45	6D51	jmp     _L15
0D46	475C	mov     a, ra
0D47	0C01	xor     a, 1H
0D48	455D	or      a, rb
0D49	3D0A	sz      Z
0D4A	6D56	jmp     _L16
0D4B	475C	mov     a, ra
0D4C	0C02	xor     a, 2H
0D4D	455D	or      a, rb
0D4E	3D0A	sz      Z
0D4F	6D5B	jmp     _L17
				;86						{
				;87							case 0:
				;88								LEDSta[LED_RED_INDEX] = LED_ON;
				_L15:
0D51	0F01	mov     a, 1H
0D52	40AF	mov     LEDSta[0], a
				;89								LEDSta[LED_GREEN_INDEX] = LED_OFF;
0D53	5F32	clr     LEDSta[3]
				;90								LEDSta[LED_BLUE_INDEX] = LED_OFF;
0D54	5F30	clr     LEDSta[1]
				;91								break;
0D55	6D5F	jmp     _L18
				;92							case 1:
				;93								LEDSta[LED_RED_INDEX] = LED_OFF;
				_L16:
0D56	5F2F	clr     LEDSta[0]
				;94								LEDSta[LED_GREEN_INDEX] = LED_ON;
0D57	0F01	mov     a, 1H
0D58	40B2	mov     LEDSta[3], a
				;95								LEDSta[LED_BLUE_INDEX] = LED_OFF;
0D59	5F30	clr     LEDSta[1]
				;96								break;
0D5A	6D5F	jmp     _L18
				;97							case 2:
				;98								LEDSta[LED_RED_INDEX] = LED_OFF;
				_L17:
0D5B	5F2F	clr     LEDSta[0]
				;99								LEDSta[LED_GREEN_INDEX] = LED_OFF;
0D5C	5F32	clr     LEDSta[3]
				;100								LEDSta[LED_BLUE_INDEX] = LED_ON;
0D5D	0F01	mov     a, 1H
0D5E	40B0	mov     LEDSta[1], a
				;101								break;
				;102							default:
				;103								break;
0D50	6D5F	jmp     _L18
				;104						}
				;105						if(StaFlick++ >= 2)
				_L18:
0D5F	475B	mov     a, StaFlick[0]
0D60	40DC	mov     ra, a
0D61	475C	mov     a, ra
0D62	40DD	mov     rb, a
0D63	545D	inca    rb
0D64	40DC	mov     ra, a
0D65	475C	mov     a, ra
0D66	40DB	mov     StaFlick[0], a
0D67	0F01	mov     a, 1H
0D68	425D	sub     a, rb
0D69	3C0A	sz      C
0D6A	6DCD	jmp     _L19
				;106							StaFlick = 0;
0D6B	5F5B	clr     StaFlick[0]
0D6C	6DCD	jmp     _L19
				;107					}
				;108				}
				;109				else
				;110				{			
				;111					switch(TempSta)
				_L11:
0D6D	4734	mov     a, TempSta[0]
0D6E	40DC	mov     ra, a
0D6F	5F5D	clr     rb
0D70	475C	mov     a, ra
0D71	455D	or      a, rb
0D72	3D0A	sz      Z
0D73	6D84	jmp     _L21
0D74	475C	mov     a, ra
0D75	0C01	xor     a, 1H
0D76	455D	or      a, rb
0D77	3D0A	sz      Z
0D78	6D9A	jmp     _L22
0D79	475C	mov     a, ra
0D7A	0C02	xor     a, 2H
0D7B	455D	or      a, rb
0D7C	3D0A	sz      Z
0D7D	6DA9	jmp     _L23
0D7E	475C	mov     a, ra
0D7F	0C03	xor     a, 3H
0D80	455D	or      a, rb
0D81	3D0A	sz      Z
0D82	6DB2	jmp     _L24
0D83	6DC5	jmp     _L31
				;112					{
				;113						case DOWN_30:
				;114							if(Sys1SCnt & 0x01)						//				_L21:
0D84	473A	mov     a, Sys1SCnt[0]
0D85	40DC	mov     ra, a
0D86	5F5D	clr     rb
0D87	0F01	mov     a, 1H
0D88	46DC	andm    a, ra
0D89	0F00	mov     a, 0H
0D8A	46DD	andm    a, rb
0D8B	475C	mov     a, ra
0D8C	455D	or      a, rb
0D8D	3D0A	sz      Z
0D8E	6D91	jmp     _L25
				;115							{
				;116								LEDSta[LED_BLUE_INDEX] = LED_OFF;							
0D8F	5F30	clr     LEDSta[1]
0D90	6D93	jmp     _L26
				;117							}
				;118							else
				;119							{					
				;120								LEDSta[LED_BLUE_INDEX] = LED_ON;
				_L25:
0D91	0F01	mov     a, 1H
0D92	40B0	mov     LEDSta[1], a
				;121							}
				;122							LEDSta[LED_GREEN_INDEX] = LED_OFF;
				_L26:
0D93	5F32	clr     LEDSta[3]
				;123							LEDSta[LED_RED_INDEX] = LED_OFF;					
0D94	5F2F	clr     LEDSta[0]
				;124							HeatCtrDuty(PWM_0_VALU);
0D95	5F79	clr     i
0D96	5F7A	clr     min
0D97	2247	call    _HeatCtrDuty
				;125							MOTOR_OFF;
0D98	3694	clr     PA5
				;126							break;
0D99	6DCD	jmp     _L19
				;127						case IN_30_45:
				;128							LEDSta[LED_RED_INDEX] = LED_OFF;
				_L22:
0D9A	5F2F	clr     LEDSta[0]
				;129							LEDSta[LED_GREEN_INDEX] = LED_ON;
0D9B	0F01	mov     a, 1H
0D9C	40B2	mov     LEDSta[3], a
				;130							LEDSta[LED_BLUE_INDEX] = LED_OFF;
0D9D	5F30	clr     LEDSta[1]
				;131							MOTOR_OFF;
0D9E	3694	clr     PA5
				;132							HeatCtrDuty(ntc_val);		// 0D9F	4735	mov     a, ntc_val[0]
0DA0	40DC	mov     ra, a
0DA1	4736	mov     a, ntc_val[1]
0DA2	40DD	mov     rb, a
0DA3	475C	mov     a, ra
0DA4	40F9	mov     i, a
0DA5	475D	mov     a, rb
0DA6	40FA	mov     min, a
0DA7	2247	call    _HeatCtrDuty
				;133							break;
0DA8	6DCD	jmp     _L19
				;134						case STAY_45:					//				;135							LEDSta[LED_BLUE_INDEX] = LED_OFF;
				_L23:
0DA9	5F30	clr     LEDSta[1]
				;136							LEDSta[LED_GREEN_INDEX] = LED_OFF;
0DAA	5F32	clr     LEDSta[3]
				;137							LEDSta[LED_RED_INDEX] = LED_ON;
0DAB	0F01	mov     a, 1H
0DAC	40AF	mov     LEDSta[0], a
				;138							HeatCtrDuty(PWM_0_VALU);
0DAD	5F79	clr     i
0DAE	5F7A	clr     min
0DAF	2247	call    _HeatCtrDuty
				;139							MOTOR_OFF;
0DB0	3694	clr     PA5
				;140							break;
0DB1	6DCD	jmp     _L19
				;141						case UP_45:						//				;142							SumOfEdge = 0;
				_L24:
0DB2	5F3D	clr     SumOfEdge[0]
				;143							LEDSta[LED_BLUE_INDEX] = LED_OFF;
0DB3	5F30	clr     LEDSta[1]
				;144							LEDSta[LED_GREEN_INDEX] = LED_OFF;
0DB4	5F32	clr     LEDSta[3]
				;145							LEDSta[LED_RED_INDEX] = LED_ON;
0DB5	0F01	mov     a, 1H
0DB6	40AF	mov     LEDSta[0], a
				;146							HeatCtrDuty(PWM_0_VALU);
0DB7	5F79	clr     i
0DB8	5F7A	clr     min
0DB9	2247	call    _HeatCtrDuty
				;147							if(NormalWinterFlag)
0DBA	4722	mov     a, LEDG[0]
0DBB	40DC	mov     ra, a
0DBC	0F10	mov     a, 10H
0DBD	46DC	andm    a, ra
0DBE	50DC	sz      ra
0DBF	6DC1	jmp     _LI7
0DC0	6DC3	jmp     _L27
				;148							{							
				;149								MOTOR_OFF;
				_LI7:
0DC1	3694	clr     PA5
				;150							}
				;151							else
				;152							{							
				;153								MOTOR_ON;
				_L27:
0DC3	3294	set     PA5
				;154							}
				;155							break;
0DC2	6DCD	jmp     _L19
0DC4	6DCD	jmp     _L19
				;156						default:
				;157							SumOfEdge = 0;
				_L31:
0DC5	5F3D	clr     SumOfEdge[0]
				;158							LEDSta[LED_BLUE_INDEX] = LED_OFF;
0DC6	5F30	clr     LEDSta[1]
				;159							LEDSta[LED_GREEN_INDEX] = LED_OFF;
0DC7	5F32	clr     LEDSta[3]
				;160							LEDSta[LED_RED_INDEX] = LED_OFF;
0DC8	5F2F	clr     LEDSta[0]
				;161							HeatCtrDuty(PWM_0_VALU);
0DC9	5F79	clr     i
0DCA	5F7A	clr     min
0DCB	2247	call    _HeatCtrDuty
				;162							MOTOR_OFF;
0DCC	3694	clr     PA5
				;163							break;
				;164					}
				;165				}
				;166				if(NormalWinterFlag)
				_L19:
0DCD	4722	mov     a, LEDG[0]
0DCE	40DC	mov     ra, a
0DCF	0F10	mov     a, 10H
0DD0	46DC	andm    a, ra
0DD1	50DC	sz      ra
0DD2	6DD4	jmp     _LI8
0DD3	6DD7	jmp     _L29
				;167				{
				;168					LEDSta[LED_WHITE_INDEX] = LED_OFF;
				_LI8:
0DD4	5F31	clr     LEDSta[2]
				;169					LED_WHITE_2_ON;					
0DD5	3514	clr     PA2
				;170				}
				;171				else
				;172				{			
				;173					LED_WHITE_2_OFF;
				_L29:
0DD7	3114	set     PA2
				;174					LEDSta[LED_WHITE_INDEX] = LED_ON;
0DD8	0F01	mov     a, 1H
0DD9	40B1	mov     LEDSta[2], a
				;175				}
				;176				
				;177				break;		
0DD6	6DDA	jmp     _L1
				_L1:
				_L32:
0DDA	0003	ret
				L0DDB:
0DDB	1483	inc     MP1
0DDC	3D0A	sz      Z
0DDD	1481	inc     MP0
				L0DDE:
0DDE	3F81	sz      MP0.7
0DDF	6DE4	jmp     L0DE4
0DE0	0701	mov     a, MP0
0DE1	0084	mov     BP, a
0DE2	0702	mov     a, [02H]
0DE3	0003	ret
				L0DE4:
0DE4	1B01	rrca    MP0
0DE5	0E3F	and     a, 3FH
0DE6	0089	mov     TBHP, a
0DE7	1B03	rrca    MP1
0DE8	0087	mov     TBLP, a
0DE9	1D05	tabrd   ACC
0DEA	3C0A	sz      C
0DEB	0708	mov     a, TBLH
0DEC	0003	ret
				L0DED:
0DED	5F76	clr     rb04[3]
0DEE	0F08	mov     a, 8H
0DEF	40F8	mov     rb04[5], a
				L0DF0:
0DF0	340A	clr     C
0DF1	5AF4	rlc     rb04[1]
0DF2	5AF6	rlc     rb04[3]
0DF3	4776	mov     a, rb04[3]
0DF4	4275	sub     a, rb04[2]
0DF5	380A	snz     C
0DF6	6DFB	jmp     L0DFB
0DF7	4776	mov     a, rb04[3]
0DF8	4275	sub     a, rb04[2]
0DF9	40F6	mov     rb04[3], a
0DFA	54F4	inc     rb04[1]
				L0DFB:
0DFB	57F8	sdz     rb04[5]
0DFC	6DF0	jmp     L0DF0
0DFD	7C77	sz      rb04[4].0
0DFE	41F6	cpl     rb04[3]
0DFF	7C77	sz      rb04[4].0
0E00	54F6	inc     rb04[3]
0E01	7CF7	sz      rb04[4].1
0E02	41F4	cpl     rb04[1]
0E03	7CF7	sz      rb04[4].1
0E04	54F4	inc     rb04[1]
0E05	0003	ret
				;178			default:
				;179				break;
0CC0	6DDA	jmp     _L1
				;180		}
				;181	}
				data .SECTION 'DATA'
				__smod DB DUP (?) ; __smod
				__lvdc DB DUP (?) ; __lvdc
				__integ DB DUP (?) ; __integ
				__intc0 DB DUP (?) ; __intc0
				__intc1 DB DUP (?) ; __intc1
				__mfi0 DB DUP (?) ; __mfi0
				__mfi1 DB DUP (?) ; __mfi1
				__pa DB DUP (?) ; __pa
				__pac DB DUP (?) ; __pac
				__papu DB DUP (?) ; __papu
				__pawu DB DUP (?) ; __pawu
				__tmpc DB DUP (?) ; __tmpc
				__wdtc DB DUP (?) ; __wdtc
				__lvrc DB DUP (?) ; __lvrc
				__adrl DB DUP (?) ; __adrl
				__adrh DB DUP (?) ; __adrh
				__adcr0 DB DUP (?) ; __adcr0
				__adcr1 DB DUP (?) ; __adcr1
				__acerl DB DUP (?) ; __acerl
				__pb DB DUP (?) ; __pb
				__pbc DB DUP (?) ; __pbc
				__pbpu DB DUP (?) ; __pbpu
				__tm2c0 DB DUP (?) ; __tm2c0
				__tm2c1 DB DUP (?) ; __tm2c1
				__tm2al DB DUP (?) ; __tm2al
				__tm2ah DB DUP (?) ; __tm2ah
				__tm2rp DB DUP (?) ; __tm2rp
				__tm0c0 DB DUP (?) ; __tm0c0
				__tm0c1 DB DUP (?) ; __tm0c1
				__tm0dl DB DUP (?) ; __tm0dl
				__tm0dh DB DUP (?) ; __tm0dh
				__tm0al DB DUP (?) ; __tm0al
				__tm0ah DB DUP (?) ; __tm0ah
				__tm0rp DB DUP (?) ; __tm0rp
				__cpc DB DUP (?) ; __cpc
				__pc DB DUP (?) ; __pc
				__pcc DB DUP (?) ; __pcc
				__pcpu DB DUP (?) ; __pcpu
				maiFlagA DB DUP (?) ; maiFlagA
				maiFlagB DB DUP (?) ; maiFlagB
				LEDG DB DUP (?) ; LEDG
				LEDH DB DUP (?) ; LEDH
				SleepCnt DB DUP (?) ; SleepCnt
				Buzzer DB DUP (?) ; Buzzer
				Output5V DB DUP (?) ; Output5V
				LEDSta DB DUP (?) ; LEDSta
				WorkMode DB DUP (?) ; WorkMode
				TempSta DB DUP (?) ; TempSta
				ntc_val DB 2 DUP (?) ; ntc_val
				Open5V200msCnt DB 2 DUP (?) ; Open5V200msCnt
				Time1SCnt DB DUP (?) ; Time1SCnt
				Sys1SCnt DB DUP (?) ; Sys1SCnt
				LowBatShutDnSCnt DB DUP (?) ; LowBatShutDnSCnt
				BATChargeFullCnt DB DUP (?) ; BATChargeFullCnt
				SumOfEdge DB DUP (?) ; SumOfEdge
				BatSta DB DUP (?) ; BatSta
				IntCnt DB DUP (?) ; IntCnt
				Stay45Cnt DB DUP (?) ; Stay45Cnt
				Time500mSCnt DB DUP (?) ; Time500mSCnt
				Time4mSCnt DB DUP (?) ; Time4mSCnt
				PWMCnt DB 2 DUP (?) ; PWMCnt
				HuxiCnt DB 2 DUP (?) ; HuxiCnt
				PWMValu DB 2 DUP (?) ; PWMValu
				Time100uSCnt DB 2 DUP (?) ; Time100uSCnt
				ChargPlusDly DB 2 DUP (?) ; ChargPlusDly
				scan_num DB DUP (?) ; scan_num
				adcsp DB DUP (?) ; adcsp
				adcsp_2 DB DUP (?) ; adcsp_2
				adcsp_1 DB DUP (?) ; adcsp_1
				AroudTempIndex DB DUP (?) ; AroudTempIndex
				k DB 2 DUP (?) ; k
				k1 DB 2 DUP (?) ; k1
				k2 DB 2 DUP (?) ; k2
				TimesCnt DB DUP (?) ; TimesCnt
				TimesFullDnCnt DB DUP (?) ; TimesFullDnCnt
				TimesFullCnt DB DUP (?) ; TimesFullCnt
				StaFlick DB DUP (?) ; StaFlick
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				rd DB DUP (?)
				ra10 DB DUP (?)
				rb10 DB DUP (?)
				rc10 DB DUP (?)
				rd10 DB DUP (?)
				r110 DB DUP (?)
				r210 DB DUP (?)
				r310 DB DUP (?)
				r410 DB DUP (?)
				r510 DB DUP (?)
				r610 DB DUP (?)
				r710 DB DUP (?)
				r10c DB DUP (?)
				r20c DB DUP (?)
				r104 DB DUP (?)
				r204 DB DUP (?)
				r304 DB DUP (?)
				r404 DB DUP (?)
				r504 DB DUP (?)
				ra04 DB DUP (?)
				rb04 DB DUP (?)
				i DB DUP (?) ; i
				min DB 2 DUP (?) ; min
				j DB 2 DUP (?) ; j
				max DB 2 DUP (?) ; max
				adcBuf DB DUP (?) ; adcBuf
				adcBuf DB DUP (?) ; adcBuf
				Time1SClearCnt DB DUP (?) ; Time1SClearCnt
				Forward_Buf DB DUP (?) ; Forward_Buf
				Pre_Forward_Buf DB DUP (?) ; Pre_Forward_Buf
				Key_Forward_Time DB DUP (?) ; Key_Forward_Time
				Key_Forward_Delay DB 2 DUP (?) ; Key_Forward_Delay
				Key_Forward_Ms DB 2 DUP (?) ; Key_Forward_Ms
				Double_Click_timer DB 2 DUP (?) ; Double_Click_timer
				Change_Key_Mode DB DUP (?) ; Change_Key_Mode
				adcBuf DB DUP (?) ; adcBuf
