				;file E:\				;1	//products mode:   X1
				;2	//functional description: 
				;3	//MCU mode:        HT66F018
				;4	//MCU frequency:   8MHz
				;5	//designer:        JerryJiang
				;6	//data:    2018/12/20
				;7	//record:
				;8	
				;9	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				;10	#include "base.h"
				;11	#define EXTERN
				;12	#define VAR_DEFINE
				;13	#include "Var.h"
				;14	
				;15	extern unsigned int ntc_val;
				;16	void Dealy(void)
				;17	{//				;18		unsigned int i,j;
				;19		for(i=0;i<50;i++)
				_Dealy:
				_Dealy:
0110	5F78	clr     i[0]
0111	5F79	clr     i[1]
0112	2924	jmp     _L2
0121	54F8	inc     i[0]
0122	3D0A	sz      Z
0123	54F9	inc     i[1]
				_L2:
0124	0F31	mov     a, 31H
0125	4278	sub     a, i[0]
0126	0F00	mov     a, 0H
0127	5279	sbc     a, i[1]
0128	3C0A	sz      C
0129	2913	jmp     _L5
012A	0003	ret
				;20		{
				;21			for(j=0;j<50;j++)
				_L5:
0113	5F7A	clr     j[0]
0114	5F7B	clr     j[1]
0115	291B	jmp     _L3
0118	54FA	inc     j[0]
0119	3D0A	sz      Z
011A	54FB	inc     j[1]
				_L3:
011B	0F31	mov     a, 31H
011C	427A	sub     a, j[0]
011D	0F00	mov     a, 0H
011E	527B	sbc     a, j[1]
011F	3C0A	sz      C
0120	2916	jmp     _L4
				;22			{
				;23				 GCC_CLRWDT();
				_L4:
0116	0001	clr     wdt
				;24				_nop();
0117	0000	nop
				;25			}
				;26		}	
				;27	}
				;28	//~~~~~~~~~~~~~~~~ 				;29	void SleepMode(void)
				;30	{
				;31		_idlen 	= 0;				// IDLEN 				_SleepMode:
				_SleepMode:
012B	348B	clr     IDLEN
				;32		_wdtc 	= 0b10101000;		// 012C	0FA8	mov     a, A8H
012D	009A	mov     WDTC, a
				;33		_lvden 	= 0x00;		  		// 012E	360C	clr     LVDEN
				;34		GCC_HALT();	
012F	0002	halt
0130	0003	ret
				;35	}
				;36	
				;37	void Sleep(void)
				;38	{
				;39	 	COM1_OFF;		 	
				_Sleep:
				_Sleep:
0131	34C0	clr     PC1
				;40	 	COM2_OFF;
0132	3540	clr     PC2
				;41	 	COM3_OFF;			 	
0133	3494	clr     PA1
				;42		_adoff = true;
0134	32A2	set     ADOFF
				;43		Dealy();
0135	2110	call    _Dealy
				;44		do
				;45		{
				;46			_emi = 0;		
0136	340E	clr     EMI
				;47			SleepMode();			//0137	212B	call    _SleepMode
				;48			_emi = 1;
0138	300E	set     EMI
				;49			break;		
				;50		}while(1);
				;51		_adoff = false;
0139	36A2	clr     ADOFF
013A	0003	ret
				;52	}
				;53	
				;54	void main(void)
				;55	{	
				@code .SECTION 'CODE'
				include HT66F018.inc
0000	2814	jmp     begin_startup_value
0001	0000	nop
0002	0000	nop
0003	0000	nop
				startupend3:
				@start .SECTION 'CODE'
004E	293B	jmp     _main
				startup_value:
				@ROMDATA_BASE .SECTION 'CODE'
004F	0011	jmp     L0011
0050	00C0	mov     PC, a
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
0051	0000	nop
0052	0000	nop
0053	0000	nop
				;56	    InitSys();					//				_main:
				_main:
013B	214F	call    _InitSys
				;57	    VarInit();					//013C	218C	call    _VarInit
				;58	    TimerInit();				//013D	2254	call    _TimerInit
				;59	    while(1)
				;60	    {
				;61			GCC_CLRWDT();			//				_L10:
013E	0001	clr     wdt
				;62			if(TaskADRdyFlag)		//4ms013F	4721	mov     a, maiFlagB[0]
0140	40DB	mov     ra, a
0141	0F20	mov     a, 20H
0142	46DB	andm    a, ra
0143	50DB	sz      ra
0144	2946	jmp     _LI1
0145	2949	jmp     _L9
				;63			{
				;64				TaskADRdyFlag = false;
				_LI1:
0146	76A1	clr     maiFlagB[0].5
				;65				GetPTCValu();	     	//0147	2683	call    _GetPTCValu
				;66				GetAroudTempValu();		//0148	60B1	call    _GetAroudTempValu
				;67			}
				;68			TaskKey();				//				_L9:
0149	23FD	call    _TaskKey
				;69			TaskFunc();				//014A	641E	call    _TaskFunc
				;70			TaskBatOp();			//014B	63A5	call    _TaskBatOp
				;71			TaskBuzzer();     		//014C	25EB	call    _TaskBuzzer
				;72	    }
014D	293E	jmp     _L10
014E	294E	jmp     $
				;73	}
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	#define INIT_NO_DETECT_TIME	3
				;6	volatile static unsigned char Time1SClearCnt __attribute__ ((at(0x1d7)));
				;7	
				;8	unsigned char Time500mSCnt = 0,Time4mSCnt = 0;
				;9	
				;10	/********************************************************/
				;11	volatile unsigned int PWMCnt = 0;
				;12	volatile unsigned int HuxiCnt = 0;
				;13	volatile unsigned int PWMValu = 10;
0054	000A	dc	0000AH
0055	0000	nop
0056	0000	nop
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
				@ROMDATA_BASE .SECTION 'CODE'
0057	0000	nop
0058	0000	nop
0059	0000	nop
005A	0000	nop
				;14	
				;15	#define HUXI_VAL 		1600
				;16	#define PWM_CYCLE		12
				;17	
				;18	/***************** 				;19	void LED_Breathe(void)
				;20	{
				;21		if((Breathe_Flag == 1) && (BatSta != BATTRY_FULL))
				_LED_Breathe:
				_LED_Breathe:
01B4	4722	mov     a, LEDG[0]
01B5	40DF	mov     ra10, a
01B6	0F01	mov     a, 1H
01B7	46DF	andm    a, ra10
01B8	50DF	sz      ra10
01B9	29BB	jmp     _LI1
01BA	2A45	jmp     _L1
				_LI1:
01BB	473E	mov     a, BatSta[0]
01BC	40DF	mov     ra10, a
01BD	475F	mov     a, ra10
01BE	0A03	sub     a, 3H
01BF	3D0A	sz      Z
01C0	2A45	jmp     _L1
				;22		{
				;23		    PWMCnt++;
01C1	4742	mov     a, PWMCnt[0]
01C2	40DF	mov     ra10, a
01C3	4743	mov     a, PWMCnt[1]
01C4	40E0	mov     rb10, a
01C5	54DF	inc     ra10
01C6	3D0A	sz      Z
01C7	54E0	inc     rb10
01C8	475F	mov     a, ra10
01C9	40C2	mov     PWMCnt[0], a
01CA	4760	mov     a, rb10
01CB	40C3	mov     PWMCnt[1], a
				;24		    HuxiCnt++;
01CC	4744	mov     a, HuxiCnt[0]
01CD	40DF	mov     ra10, a
01CE	4745	mov     a, HuxiCnt[1]
01CF	40E0	mov     rb10, a
01D0	54DF	inc     ra10
01D1	3D0A	sz      Z
01D2	54E0	inc     rb10
01D3	475F	mov     a, ra10
01D4	40C4	mov     HuxiCnt[0], a
01D5	4760	mov     a, rb10
01D6	40C5	mov     HuxiCnt[1], a
				;25		    if(PWMCnt == PWMValu)      //01D7	4742	mov     a, PWMCnt[0]
01D8	40E1	mov     rc10, a
01D9	4743	mov     a, PWMCnt[1]
01DA	40E2	mov     rd10, a
01DB	4746	mov     a, PWMValu[0]
01DC	40DF	mov     ra10, a
01DD	4747	mov     a, PWMValu[1]
01DE	40E0	mov     rb10, a
01DF	4761	mov     a, rc10
01E0	445F	xor     a, ra10
01E1	4762	mov     a, rd10
01E2	3D0A	sz      Z
01E3	4460	xor     a, rb10
01E4	390A	snz     Z
01E5	29E7	jmp     _L3
				;26		    {
				;27		        LED_Breathe_ON;       	//01E6	3794	clr     PA7
				;28		    }
				;29		    if(PWMCnt == PWM_CYCLE)   	//				_L3:
01E7	4742	mov     a, PWMCnt[0]
01E8	40DF	mov     ra10, a
01E9	4743	mov     a, PWMCnt[1]
01EA	40E0	mov     rb10, a
01EB	475F	mov     a, ra10
01EC	0C0C	xor     a, CH
01ED	4560	or      a, rb10
01EE	390A	snz     Z
01EF	29F3	jmp     _L4
				;30		    {
				;31		        LED_Breathe_OFF;      	//01F0	3394	set     PA7
				;32		        PWMCnt = 0;              //01F1	5F42	clr     PWMCnt[0]
01F2	5F43	clr     PWMCnt[1]
				;33		    }
				;34		    if((HuxiCnt == HUXI_VAL) && (direc_flag == 0))
				_L4:
01F3	4744	mov     a, HuxiCnt[0]
01F4	40DF	mov     ra10, a
01F5	4745	mov     a, HuxiCnt[1]
01F6	40E0	mov     rb10, a
01F7	475F	mov     a, ra10
01F8	0C40	xor     a, 40H
01F9	4760	mov     a, rb10
01FA	3D0A	sz      Z
01FB	0C06	xor     a, 6H
01FC	390A	snz     Z
01FD	2A1B	jmp     _L5
01FE	4720	mov     a, maiFlagA[0]
01FF	40DF	mov     ra10, a
0200	0F40	mov     a, 40H
0201	46DF	andm    a, ra10
0202	50DF	sz      ra10
0203	2A1B	jmp     _L5
				;35		    {                               //				;36		        HuxiCnt = 0;
0204	5F44	clr     HuxiCnt[0]
0205	5F45	clr     HuxiCnt[1]
				;37		        PWMValu++;
0206	4746	mov     a, PWMValu[0]
0207	40DF	mov     ra10, a
0208	4747	mov     a, PWMValu[1]
0209	40E0	mov     rb10, a
020A	54DF	inc     ra10
020B	3D0A	sz      Z
020C	54E0	inc     rb10
020D	475F	mov     a, ra10
020E	40C6	mov     PWMValu[0], a
020F	4760	mov     a, rb10
0210	40C7	mov     PWMValu[1], a
				;38		        if(PWMValu == PWM_CYCLE)  	//0211	4746	mov     a, PWMValu[0]
0212	40DF	mov     ra10, a
0213	4747	mov     a, PWMValu[1]
0214	40E0	mov     rb10, a
0215	475F	mov     a, ra10
0216	0C0C	xor     a, CH
0217	4560	or      a, rb10
0218	390A	snz     Z
0219	2A1B	jmp     _L5
				;39		            direc_flag = 1; 
021A	7320	set     maiFlagA[0].6
				;40		    }
				;41	 	    if((HuxiCnt == HUXI_VAL) && (direc_flag == 1))
				_L5:
021B	4744	mov     a, HuxiCnt[0]
021C	40DF	mov     ra10, a
021D	4745	mov     a, HuxiCnt[1]
021E	40E0	mov     rb10, a
021F	475F	mov     a, ra10
0220	0C40	xor     a, 40H
0221	4760	mov     a, rb10
0222	3D0A	sz      Z
0223	0C06	xor     a, 6H
0224	390A	snz     Z
0225	2A45	jmp     _L1
0226	4720	mov     a, maiFlagA[0]
0227	40DF	mov     ra10, a
0228	0F40	mov     a, 40H
0229	46DF	andm    a, ra10
022A	50DF	sz      ra10
022B	2A2D	jmp     _LI2
022C	2A45	jmp     _L1
				;42		    {                               //				;43		        HuxiCnt = 0;
				_LI2:
022D	5F44	clr     HuxiCnt[0]
022E	5F45	clr     HuxiCnt[1]
				;44		        PWMValu--;
022F	4746	mov     a, PWMValu[0]
0230	40DF	mov     ra10, a
0231	4747	mov     a, PWMValu[1]
0232	40E0	mov     rb10, a
0233	0FFF	mov     a, FFH
0234	43DF	addm    a, ra10
0235	0FFF	mov     a, FFH
0236	53E0	adcm    a, rb10
0237	475F	mov     a, ra10
0238	40C6	mov     PWMValu[0], a
0239	4760	mov     a, rb10
023A	40C7	mov     PWMValu[1], a
				;45		        if(PWMValu == 1)          //023B	4746	mov     a, PWMValu[0]
023C	40DF	mov     ra10, a
023D	4747	mov     a, PWMValu[1]
023E	40E0	mov     rb10, a
023F	475F	mov     a, ra10
0240	0C01	xor     a, 1H
0241	4560	or      a, rb10
0242	390A	snz     Z
0243	2A45	jmp     _L1
				;46		            direc_flag = 0; 
0244	7720	clr     maiFlagA[0].6
				_L1:
0245	0003	ret
				;47		    } 	
				;48		}	
				;49	}
				;50	
				;51	/*****************************************************************/
				;52	extern unsigned int ntc_val;		
				;53	//				;54	void HeatCtrDuty(u16 step_15)
				;55	{	
				;56		_tm0al = ((step_15&0xff));
				_HeatCtrDuty:
				_HeatCtrDuty:
0246	4778	mov     a, step_15[0]
0247	40DB	mov     ra, a
0248	475B	mov     a, ra
0249	00B3	mov     TM0AL, a
				;57		_tm0ah = ((step_15>>8));	
024A	4778	mov     a, step_15[0]
024B	40DB	mov     ra, a
024C	4779	mov     a, step_15[1]
024D	40DC	mov     rb, a
024E	475C	mov     a, rb
024F	40DB	mov     ra, a
0250	5F5C	clr     rb
0251	475B	mov     a, ra
0252	00B4	mov     TM0AH, a
0253	0003	ret
				;58	}
				;59	/*********************************************************/
				;60	void TimerInit(void)
				;61	{               
				;62	//time0 PWM
				;63		_wdtc = 0xA8;  	
				_TimerInit:
				_TimerInit:
0254	0FA8	mov     a, A8H
0255	009A	mov     WDTC, a
				;64		_pac0 = 0;//PA0 output--PWM0256	3415	clr     PAC0
				;65		_t0cp = 1;//TP0(PA0)0257	3019	set     T0CP
				;66	
				;67		//				;68	//	_smod = 0x01;//fsys = fH   bit0 = 1
				;69		
				;70		//-------STM init-------
				;71		//				;72		_tm0al = 0x00;//0258	1F33	clr     TM0AL
				;73		_tm0ah = 0x00;//0259	1F34	clr     TM0AH
				;74		_tm0dl = 0x00;
025A	1F31	clr     TM0DL
				;75		_tm0dh = 0x00; 
025B	1F32	clr     TM0DH
				;76		_tm0rp = 0x08;//025C	0F08	mov     a, 8H
025D	00B5	mov     TM0RP, a
				;77		_tm0c1 = 0xA4;//025E	0FA4	mov     a, A4H
025F	00B0	mov     TM0C1, a
				;78		_tm0c0 = 0x28;//0260	0F28	mov     a, 28H
0261	00AF	mov     TM0C0, a
				;79	/*********************  TM_2 INIT ******************************************************/
				;80		_t2cp = 0;
0262	3519	clr     T2CP
				;81		_tm2al = 0xc8;     //  03e8  500us  07d0 = 1ms   c8 = 100us
0263	0FC8	mov     a, C8H
0264	00AC	mov     TM2AL, a
				;82		_tm2ah = 0x00;
0265	1F2D	clr     TM2AH
				;83		_tm2rp = 0xff;
0266	1FAE	set     TM2RP
				;84	
				;85		_tm2c1 = 0b11000001;     // 0267	0FC1	mov     a, C1H
0268	00A9	mov     TM2C1, a
				;86		_tm2c0 = 0b00001000;		// Tm2 0269	0F08	mov     a, 8H
026A	00A8	mov     TM2C0, a
				;87		
				;88		_t2af = 1;		// 026B	3392	set     T2AF
				;89		_t2ae = 1;		// a 026C	3192	set     T2AE
				;90		_mf2e = 0;		//026D	348F	clr     MF2E
				;91		
				;92		_mf1f = 1;
026E	320F	set     MF1F
				;93		_mf1e = 1;
026F	300F	set     MF1E
				;94			
				;95	/**************					;96		_int0s0 = 1;_int0s1 = 1;			// 10 0270	300D	set     INT0S0
0271	308D	set     INT0S1
				;97	    _int0e = true;  
0272	308E	set     INT0E
				;98		_emi = 1;      
0273	300E	set     EMI
				;99		Time1SClearCnt = 0;      
0274	0FD7	mov     a, D7H
0275	0083	mov     MP1, a
0276	0F01	mov     a, 1H
0277	0081	mov     MP0, a
0278	0701	mov     a, MP0
0279	0084	mov     BP, a
027A	0F00	mov     a, 0H
027B	0082	mov     [02H], a
027C	0003	ret
				;100	}
				;101	
				;102	/*********************************************************************************************************
				;103	** 				;104	** 				;105	** 				;106	** 				;107	** 				;108	** 				;109	********************************************************************************************************/
				;110	u16 Time100uSCnt = 0;
				;111	u16 ChargPlusDly = 0;
				;112	/**********************************************************
				;113	
				;114	 * 				;115	 * 				;116	 * 				;117	 * 				;118	 * 				;119	 **********************************************************/
				;120	unsigned char scan_num = 0;//				;121	void LEDDispKeyScan(void)
				;122	{
				;123		scan_num++;	
				_LEDDispKeyScan:
				_LEDDispKeyScan:
027D	474C	mov     a, scan_num[0]
027E	40DF	mov     ra10, a
027F	54DF	inc     ra10
0280	475F	mov     a, ra10
0281	40CC	mov     scan_num[0], a
				;124		switch(scan_num)	
0282	474C	mov     a, scan_num[0]
0283	40DF	mov     ra10, a
0284	5F60	clr     rb10
0285	475F	mov     a, ra10
0286	0C01	xor     a, 1H
0287	4560	or      a, rb10
0288	3D0A	sz      Z
0289	2A9A	jmp     _L10
028A	475F	mov     a, ra10
028B	0C02	xor     a, 2H
028C	4560	or      a, rb10
028D	3D0A	sz      Z
028E	2AA6	jmp     _L11
028F	475F	mov     a, ra10
0290	0C03	xor     a, 3H
0291	4560	or      a, rb10
0292	3D0A	sz      Z
0293	2AB2	jmp     _L12
0294	475F	mov     a, ra10
0295	0C04	xor     a, 4H
0296	4560	or      a, rb10
0297	3D0A	sz      Z
0298	2ABE	jmp     _L13
				;125		{
				;126			case 1://				;127				if(LEDSta[0] == 1)	//				_L10:
029A	472F	mov     a, LEDSta[0]
029B	40DF	mov     ra10, a
029C	575F	sdza    ra10
029D	2AA2	jmp     _L14
				;128				{
				;129					COM2_ON;
029E	3140	set     PC2
				;130					COM3_ON;
029F	3094	set     PA1
				;131					COM1_OFF;
02A0	34C0	clr     PC1
				;132				}
				;133				else				//				;134				{
				;135					COM2_OFF;
				_L14:
02A2	3540	clr     PC2
				;136					COM3_OFF;
02A3	3494	clr     PA1
				;137					COM1_OFF;				
02A4	34C0	clr     PC1
				;138				}
				;139				break;
02A1	2ACA	jmp     _L8
02A5	2ACA	jmp     _L8
				;140			case 2:
				;141				if(LEDSta[1] == 1)	//				_L11:
02A6	4730	mov     a, LEDSta[1]
02A7	40DF	mov     ra10, a
02A8	575F	sdza    ra10
02A9	2AAE	jmp     _L17
				;142				{				
				;143					COM1_ON;
02AA	30C0	set     PC1
				;144					COM2_OFF;
02AB	3540	clr     PC2
				;145					COM3_OFF;
02AC	3494	clr     PA1
				;146				}
				;147				else
				;148				{
				;149					COM2_OFF;
				_L17:
02AE	3540	clr     PC2
				;150					COM3_OFF;
02AF	3494	clr     PA1
				;151					COM1_OFF;				
02B0	34C0	clr     PC1
				;152				}
				;153				break;
02AD	2ACA	jmp     _L8
02B1	2ACA	jmp     _L8
				;154			case 3:	
				;155				if(LEDSta[2] == 1)	//				_L12:
02B2	4731	mov     a, LEDSta[2]
02B3	40DF	mov     ra10, a
02B4	575F	sdza    ra10
02B5	2ABA	jmp     _L19
				;156				{
				;157					COM1_ON;
02B6	30C0	set     PC1
				;158					COM2_ON;
02B7	3140	set     PC2
				;159					COM3_OFF;
02B8	3494	clr     PA1
				;160				}
				;161				else
				;162				{
				;163					COM2_OFF;
				_L19:
02BA	3540	clr     PC2
				;164					COM3_OFF;
02BB	3494	clr     PA1
				;165					COM1_OFF;				
02BC	34C0	clr     PC1
				;166				}
				;167				break;
02B9	2ACA	jmp     _L8
02BD	2ACA	jmp     _L8
				;168	      	case 4:
				;169				if(LEDSta[3] == 1)	//				_L13:
02BE	4732	mov     a, LEDSta[3]
02BF	40DF	mov     ra10, a
02C0	575F	sdza    ra10
02C1	2AC6	jmp     _L21
				;170				{
				;171					COM3_ON;
02C2	3094	set     PA1
				;172					COM1_OFF;
02C3	34C0	clr     PC1
				;173					COM2_OFF;
02C4	3540	clr     PC2
02C5	2AC9	jmp     _L22
				;174				}
				;175				else
				;176				{
				;177					COM2_OFF;
				_L21:
02C6	3540	clr     PC2
				;178					COM3_OFF;
02C7	3494	clr     PA1
				;179					COM1_OFF;				
02C8	34C0	clr     PC1
				;180				}
				;181	 			scan_num = 0;
				_L22:
02C9	5F4C	clr     scan_num[0]
				;182		      	break;
				_L8:
02CA	0003	ret
				;183	      default:
				;184		      break;
0299	2ACA	jmp     _L8
				;185	   }
				;186	}
				;187	
				;188	#define CNT_4MS		40 	//4ms
				;189	#define CNT_1S		250	//1s
				;190	void __attribute((interrupt(0x10))) ISR_tmr2 (void)
				;191	{
				@dummy12 .SECTION 'CODE'
				@ISR_tmr2_code .SECTION 'CODE'
0010	40E3	mov     r110, a
				L0011:
0011	0704	mov     a, BP
0012	40E4	mov     r210, a
0013	2ACB	jmp     _ISR_tmr2
				_ISR_tmr2:
				_ISR_tmr2:
02CB	070A	mov     a, STATUS
02CC	40E5	mov     r310, a
02CD	0703	mov     a, MP1
02CE	40E6	mov     r410, a
02CF	0701	mov     a, MP0
02D0	40E7	mov     r510, a
02D1	0707	mov     a, TBLP
02D2	40E8	mov     r610, a
02D3	0709	mov     a, TBHP
02D4	40E9	mov     r710, a
				;192	//	static u8 i =0;
				;193	//	u8 j = 0;
				;194		_t2af = 0;
02D5	3792	clr     T2AF
				;195		Time100uSCnt++;	
02D6	4748	mov     a, Time100uSCnt[0]
02D7	40DF	mov     ra10, a
02D8	4749	mov     a, Time100uSCnt[1]
02D9	40E0	mov     rb10, a
02DA	54DF	inc     ra10
02DB	3D0A	sz      Z
02DC	54E0	inc     rb10
02DD	475F	mov     a, ra10
02DE	40C8	mov     Time100uSCnt[0], a
02DF	4760	mov     a, rb10
02E0	40C9	mov     Time100uSCnt[1], a
				;196		LED_Breathe();						//02E1	21B4	call    _LED_Breathe
				;197		if(Time100uSCnt >= CNT_4MS)			//4ms
02E2	4748	mov     a, Time100uSCnt[0]
02E3	40DF	mov     ra10, a
02E4	4749	mov     a, Time100uSCnt[1]
02E5	40E0	mov     rb10, a
02E6	0F27	mov     a, 27H
02E7	425F	sub     a, ra10
02E8	0F00	mov     a, 0H
02E9	5260	sbc     a, rb10
02EA	3C0A	sz      C
02EB	2BAB	jmp     _L23
				;198		{
				;199			Time100uSCnt = 0;
02EC	5F48	clr     Time100uSCnt[0]
02ED	5F49	clr     Time100uSCnt[1]
				;200			LEDDispKeyScan();				//4ms02EE	227D	call    _LEDDispKeyScan
				;201			Time4mSCnt++;
02EF	4741	mov     a, Time4mSCnt[0]
02F0	40DF	mov     ra10, a
02F1	54DF	inc     ra10
02F2	475F	mov     a, ra10
02F3	40C1	mov     Time4mSCnt[0], a
				;202			if((Time4mSCnt&0x03) == 0x03)	//12ms02F4	4741	mov     a, Time4mSCnt[0]
02F5	40DF	mov     ra10, a
02F6	5F60	clr     rb10
02F7	0F03	mov     a, 3H
02F8	46DF	andm    a, ra10
02F9	0F00	mov     a, 0H
02FA	46E0	andm    a, rb10
02FB	475F	mov     a, ra10
02FC	0C03	xor     a, 3H
02FD	4560	or      a, rb10
02FE	390A	snz     Z
02FF	2B01	jmp     _L25
				;203			{
				;204				TaskBatRdyFlag = true;			
0300	73A1	set     maiFlagB[0].7
				;205			}
				;206			TaskBuzzerRdy  = true;
				_L25:
0301	71A2	set     LEDG[0].3
				;207			TaskADRdyFlag = true;
0302	72A1	set     maiFlagB[0].5
				;208			ChargPlusDly++;
0303	474A	mov     a, ChargPlusDly[0]
0304	40DF	mov     ra10, a
0305	474B	mov     a, ChargPlusDly[1]
0306	40E0	mov     rb10, a
0307	54DF	inc     ra10
0308	3D0A	sz      Z
0309	54E0	inc     rb10
030A	475F	mov     a, ra10
030B	40CA	mov     ChargPlusDly[0], a
030C	4760	mov     a, rb10
030D	40CB	mov     ChargPlusDly[1], a
				;209			if((Time4mSCnt & 0x02) == 0x02)	//030E	4741	mov     a, Time4mSCnt[0]
030F	40DF	mov     ra10, a
0310	5F60	clr     rb10
0311	0F02	mov     a, 2H
0312	46DF	andm    a, ra10
0313	0F00	mov     a, 0H
0314	46E0	andm    a, rb10
0315	475F	mov     a, ra10
0316	4560	or      a, rb10
0317	3D0A	sz      Z
0318	2B1A	jmp     _L26
				;210				TaskKeyRdy = true;
0319	72A2	set     LEDG[0].5
				;211			Open5V200msCnt++;
				_L26:
031A	4737	mov     a, Open5V200msCnt[0]
031B	40DF	mov     ra10, a
031C	4738	mov     a, Open5V200msCnt[1]
031D	40E0	mov     rb10, a
031E	54DF	inc     ra10
031F	3D0A	sz      Z
0320	54E0	inc     rb10
0321	475F	mov     a, ra10
0322	40B7	mov     Open5V200msCnt[0], a
0323	4760	mov     a, rb10
0324	40B8	mov     Open5V200msCnt[1], a
				;212			Time500mSCnt++;		
0325	4740	mov     a, Time500mSCnt[0]
0326	40DF	mov     ra10, a
0327	54DF	inc     ra10
0328	475F	mov     a, ra10
0329	40C0	mov     Time500mSCnt[0], a
				;213			if(Time4mSCnt >= CNT_1S)		//1s
032A	4741	mov     a, Time4mSCnt[0]
032B	40DF	mov     ra10, a
032C	0FF9	mov     a, F9H
032D	425F	sub     a, ra10
032E	3C0A	sz      C
032F	2B73	jmp     _L27
				;214			{
				;215				Time4mSCnt = 0;
0330	5F41	clr     Time4mSCnt[0]
				;216				Time1SCnt++;
0331	4739	mov     a, Time1SCnt[0]
0332	40DF	mov     ra10, a
0333	54DF	inc     ra10
0334	475F	mov     a, ra10
0335	40B9	mov     Time1SCnt[0], a
				;217				Sys1SCnt++;
0336	473A	mov     a, Sys1SCnt[0]
0337	40DF	mov     ra10, a
0338	54DF	inc     ra10
0339	475F	mov     a, ra10
033A	40BA	mov     Sys1SCnt[0], a
				;218				Time1SClearCnt++;
033B	0FD7	mov     a, D7H
033C	0083	mov     MP1, a
033D	0F01	mov     a, 1H
033E	0081	mov     MP0, a
033F	0701	mov     a, MP0
0340	0084	mov     BP, a
0341	0702	mov     a, [02H]
0342	40DF	mov     ra10, a
0343	54DF	inc     ra10
0344	0FD7	mov     a, D7H
0345	0083	mov     MP1, a
0346	0F01	mov     a, 1H
0347	0081	mov     MP0, a
0348	0701	mov     a, MP0
0349	0084	mov     BP, a
034A	475F	mov     a, ra10
034B	0082	mov     [02H], a
				;219				SumOfEdge++;
034C	473D	mov     a, SumOfEdge[0]
034D	40DF	mov     ra10, a
034E	54DF	inc     ra10
034F	475F	mov     a, ra10
0350	40BD	mov     SumOfEdge[0], a
				;220				if(WorkMode == READY_MODE)	//0351	4733	mov     a, WorkMode[0]
0352	40DF	mov     ra10, a
0353	50DF	sz      ra10
0354	2B5A	jmp     _L28
				;221				{
				;222					SleepCnt++;				
0355	4724	mov     a, SleepCnt[0]
0356	40DF	mov     ra10, a
0357	54DF	inc     ra10
0358	475F	mov     a, ra10
0359	40A4	mov     SleepCnt[0], a
				;223				}
				;224				if((Sys1SCnt % 5) == 0)
				_L28:
035A	473A	mov     a, Sys1SCnt[0]
035B	40DF	mov     ra10, a
035C	5F76	clr     rb04[4]
035D	475F	mov     a, ra10
035E	40F3	mov     rb04[1], a
035F	0F05	mov     a, 5H
0360	40F4	mov     rb04[2], a
0361	6556	call    L0D56
0362	4775	mov     a, rb04[3]
0363	40DF	mov     ra10, a
0364	50DF	sz      ra10
0365	2B67	jmp     _L29
				;225				{
				;226					Task5SFlag = true;
0366	7123	set     LEDH[0].2
				;227				}
				;228				if(BATLow3p5Flag)			//				_L29:
0367	4722	mov     a, LEDG[0]
0368	40DF	mov     ra10, a
0369	0F02	mov     a, 2H
036A	46DF	andm    a, ra10
036B	50DF	sz      ra10
036C	2B6E	jmp     _LI3
036D	2B73	jmp     _L27
				;229				{
				;230					LowBatShutDnSCnt++;
				_LI3:
036E	473B	mov     a, LowBatShutDnSCnt[0]
036F	40DF	mov     ra10, a
0370	54DF	inc     ra10
0371	475F	mov     a, ra10
0372	40BB	mov     LowBatShutDnSCnt[0], a
				;231				}
				;232			}
				;233			if(Time500mSCnt >= 125)			//500ms
				_L27:
0373	4740	mov     a, Time500mSCnt[0]
0374	40DF	mov     ra10, a
0375	0F7C	mov     a, 7CH
0376	425F	sub     a, ra10
0377	3C0A	sz      C
0378	2B7B	jmp     _L30
				;234			{			
				;235				Task500msFlag = true;
0379	70A3	set     LEDH[0].1
				;236				Time500mSCnt = 0;
037A	5F40	clr     Time500mSCnt[0]
				;237			}
				;238			if(Time1SClearCnt >= 5)			//5S				_L30:
037B	0FD7	mov     a, D7H
037C	0083	mov     MP1, a
037D	0F01	mov     a, 1H
037E	0081	mov     MP0, a
037F	0701	mov     a, MP0
0380	0084	mov     BP, a
0381	0702	mov     a, [02H]
0382	40DF	mov     ra10, a
0383	0F04	mov     a, 4H
0384	425F	sub     a, ra10
0385	3C0A	sz      C
0386	2B91	jmp     _L31
				;239			{
				;240				Time1SClearCnt = 0;
0387	0FD7	mov     a, D7H
0388	0083	mov     MP1, a
0389	0F01	mov     a, 1H
038A	0081	mov     MP0, a
038B	0701	mov     a, MP0
038C	0084	mov     BP, a
038D	0F00	mov     a, 0H
038E	0082	mov     [02H], a
				;241				IntCnt = 0;
038F	5F3F	clr     IntCnt[0]
				;242				ChargIngFlag = false;
0390	7721	clr     maiFlagB[0].6
				;243			}
				;244			if(Sys1SCnt >= 60)
				_L31:
0391	473A	mov     a, Sys1SCnt[0]
0392	40DF	mov     ra10, a
0393	0F3B	mov     a, 3BH
0394	425F	sub     a, ra10
0395	3C0A	sz      C
0396	2BAB	jmp     _L23
				;245			{
				;246				Sys1SCnt = 0;
0397	5F3A	clr     Sys1SCnt[0]
				;247				if(BATUp4p1Flag)					//4.1V0398	4722	mov     a, LEDG[0]
0399	40DF	mov     ra10, a
039A	0F04	mov     a, 4H
039B	46DF	andm    a, ra10
039C	50DF	sz      ra10
039D	2B9F	jmp     _LI4
039E	2BAB	jmp     _L23
				;248				{
				;249					BATChargeFullCnt++;
				_LI4:
039F	473C	mov     a, BATChargeFullCnt[0]
03A0	40DF	mov     ra10, a
03A1	54DF	inc     ra10
03A2	475F	mov     a, ra10
03A3	40BC	mov     BATChargeFullCnt[0], a
				;250					if(BATChargeFullCnt >= CHARG_FULL_TIME)
03A4	473C	mov     a, BATChargeFullCnt[0]
03A5	40DF	mov     ra10, a
03A6	0F02	mov     a, 2H
03A7	425F	sub     a, ra10
03A8	3C0A	sz      C
03A9	2BAB	jmp     _L23
				;251					{
				;252						ChargeFullFlag = true;		//03AA	7023	set     LEDH[0].0
				_L23:
03AB	4764	mov     a, r210
03AC	0084	mov     BP, a
03AD	4765	mov     a, r310
03AE	008A	mov     STATUS, a
03AF	4766	mov     a, r410
03B0	0083	mov     MP1, a
03B1	4767	mov     a, r510
03B2	0081	mov     MP0, a
03B3	4768	mov     a, r610
03B4	0087	mov     TBLP, a
03B5	4769	mov     a, r710
03B6	0089	mov     TBHP, a
03B7	1D05	tabrd   ACC
03B8	4763	mov     a, r110
03B9	0004	reti
				;253					}
				;254				}
				;255			}			
				;256		} 	
				;257	}
				;258	/*********************************************************************************************************/
				;259	
				;260	void __attribute((interrupt(0x0c))) ISR_tmr0 (void)
				;261	{
				@ISR_tmr0_code .SECTION 'CODE'
000C	40EA	mov     r10c, a
000D	070A	mov     a, STATUS
000E	40EB	mov     r20c, a
000F	2BBA	jmp     _ISR_tmr0
				;262	/*	_t0af=0;*/									// clr TM0 Comparator A match interrupt req flg.
				;263		_t0pf = 0;//				_ISR_tmr0:
				_ISR_tmr0:
03BA	3611	clr     T0PF
				;264		_nop();	
03BB	0000	nop
03BC	476B	mov     a, r20c
03BD	008A	mov     STATUS, a
03BE	476A	mov     a, r10c
03BF	0004	reti
				;265	}
				;266	
				;267	/*********************************************************************************************************
				;268	** 				;269	** 				;270	** 				;271	** 				;272	** 				;273	** 				;274	********************************************************************************************************/
				;275	void __attribute((interrupt(0x04))) ISR_int0 (void)
				;276	{
				@ISR_int0_code .SECTION 'CODE'
0004	40EC	mov     r104, a
0005	0704	mov     a, BP
0006	40ED	mov     r204, a
0007	2BC0	jmp     _ISR_int0
				@dummy4 .SECTION 'CODE'
0008	0000	nop
0009	0000	nop
000A	0000	nop
000B	0000	nop
				_ISR_int0:
				_ISR_int0:
03C0	070A	mov     a, STATUS
03C1	40EE	mov     r304, a
03C2	0703	mov     a, MP1
03C3	40EF	mov     r404, a
03C4	0701	mov     a, MP0
03C5	40F0	mov     r504, a
				;277	    _int0f=0;
03C6	360E	clr     INT0F
				;278		if((ChargPlusDly > 170 ) && (ChargPlusDly < 350))	//03C7	474A	mov     a, ChargPlusDly[0]
03C8	40F1	mov     ra04, a
03C9	474B	mov     a, ChargPlusDly[1]
03CA	40F2	mov     rb04, a
03CB	0FAA	mov     a, AAH
03CC	4271	sub     a, ra04
03CD	0F00	mov     a, 0H
03CE	5272	sbc     a, rb04
03CF	3C0A	sz      C
03D0	2BF0	jmp     _L34
03D1	474A	mov     a, ChargPlusDly[0]
03D2	40F1	mov     ra04, a
03D3	474B	mov     a, ChargPlusDly[1]
03D4	40F2	mov     rb04, a
03D5	0F5D	mov     a, 5DH
03D6	4271	sub     a, ra04
03D7	0F01	mov     a, 1H
03D8	5272	sbc     a, rb04
03D9	380A	snz     C
03DA	2BF0	jmp     _L34
				;279		{		
				;280			if(IntCnt++ >= 2)								//203DB	473F	mov     a, IntCnt[0]
03DC	40F1	mov     ra04, a
03DD	4771	mov     a, ra04
03DE	40F2	mov     rb04, a
03DF	5472	inca    rb04
03E0	40F1	mov     ra04, a
03E1	4771	mov     a, ra04
03E2	40BF	mov     IntCnt[0], a
03E3	0F01	mov     a, 1H
03E4	4272	sub     a, rb04
03E5	3C0A	sz      C
03E6	2BE8	jmp     _L35
				;281			{
				;282				ChargIngFlag = true;						//03E7	7321	set     maiFlagB[0].6
				;283			}
				;284			Time1SClearCnt = 0;								//				_L35:
03E8	0FD7	mov     a, D7H
03E9	0083	mov     MP1, a
03EA	0F01	mov     a, 1H
03EB	0081	mov     MP0, a
03EC	0701	mov     a, MP0
03ED	0084	mov     BP, a
03EE	0F00	mov     a, 0H
03EF	0082	mov     [02H], a
				;285		}
				;286		SleepCnt = 0;										//				_L34:
03F0	5F24	clr     SleepCnt[0]
				;287		ChargPlusDly = 0;
03F1	5F4A	clr     ChargPlusDly[0]
03F2	5F4B	clr     ChargPlusDly[1]
03F3	476D	mov     a, r204
03F4	0084	mov     BP, a
03F5	476E	mov     a, r304
03F6	008A	mov     STATUS, a
03F7	476F	mov     a, r404
03F8	0083	mov     MP1, a
03F9	4770	mov     a, r504
03FA	0081	mov     MP0, a
03FB	476C	mov     a, r104
03FC	0004	reti
				;288	}
				;file E:\				;1	;;--------------------------------------------------------------;;
				;2	;;    This file is part of the Holtek C Compiler V3 package     ;;
				;3	;;    For the initialization of static linkage variables        ;;
				;4	;;    Copyright (C) 2017 Holtek Semiconductor Inc.              ;;
				;5	;;    Version: 1.07 (Above IDE3000 V7.94)                       ;;
				;6	;;    Date:    2017/03/06                                        ;;
				;7	;;--------------------------------------------------------------;;
				;8	
				;9	acc equ [05h]
				;10	tblp equ [07h]
				;11	tblh equ [08h]
				;12	;;tbhp equ [09h] 
				;13	r0 equ [00h]
				;14	mp0 equ [01h]
				;15	r1 equ [02h]
				;16	mp1l equ [03h]
				;17	mp1h equ [04h]
				;18	z equ [0ah].2
				;19	c equ [0ah].0
				;20	
				;21	ifndef tbhp
				;22	tbhp equ [09h]
				;23	endif
				;24	 
				;25	extern startup_value_1:near
				;26	
				;27	@start .section 'code'
				;28	begin_startup_value:
				;29	  mov a,low (offset startup_value_1) 
				begin_startup_value:
				@start .SECTION 'CODE'
				@dummy16 .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0014	0F4E	mov     a, 4EH
				;30	  mov tblp,a
0015	0087	mov     TBLP, a
				;31	  mov a,high (offset startup_value_1) 
0016	0F00	mov     a, 0H
				;32	  mov tbhp,a
0017	0089	mov     TBHP, a
				;33	next_table:
				;34	  ;CLR WDT
				;35	  inc tblp
				next_table:
0018	1487	inc     TBLP
				;36	  sz z
0019	3D0A	sz      Z
				;37	  inc tbhp
001A	1489	inc     TBHP
				;38	ifdef USE_TABRDC
				;39	  tabrdc mp0
				;40	else
				;41	  tabrd mp0
001B	1D01	tabrd   MP0
				;42	endif
				;43	  sz mp0
001C	1081	sz      MP0
				;44	  jmp read_data
001D	281F	jmp     read_data
				;45	  jmp startupend1
001E	2834	jmp     startupend1
				;46	read_data:
				;47	  inc tblp
				read_data:
001F	1487	inc     TBLP
				;48	  sz z
0020	3D0A	sz      Z
				;49	  inc tbhp
0021	1489	inc     TBHP
				;50	ifdef USE_TABRDC
				;51	  tabrdc mp1l
				;52	else
				;53	  tabrd mp1l
0022	1D03	tabrd   MP1
				;54	endif
				;55	  mov a,tblh
0023	0708	mov     a, TBLH
				;56	  mov mp1h,a
0024	0084	mov     BP, a
				;57	next_data:
				;58	  inc tblp
				next_data:
0025	1487	inc     TBLP
				;59	  sz z
0026	3D0A	sz      Z
				;60	  inc tbhp
0027	1489	inc     TBHP
				;61	ifdef USE_TABRDC
				;62	  tabrdc acc
				;63	else
				;64	  tabrd acc
0028	1D05	tabrd   ACC
				;65	endif
				;66	  mov r1,a
0029	0082	mov     [02H], a
				;67	  sdz mp0
002A	1781	sdz     MP0
				;68	  jmp $+2
002B	282D	jmp     L002D
				;69	  jmp next_table
002C	2818	jmp     next_table
				;70	  inc mp1l
				L002D:
002D	1483	inc     MP1
				;71	  mov a,tblh
002E	0708	mov     a, TBLH
				;72	  mov r1,a
002F	0082	mov     [02H], a
				;73	  inc mp1l
0030	1483	inc     MP1
				;74	  sdz mp0
0031	1781	sdz     MP0
				;75	  jmp next_data
0032	2825	jmp     next_data
				;76	  jmp next_table
0033	2818	jmp     next_table
				;77	
				;78	;end_startup_value:
				;79	
				;80	startupend1:
				;81	ifndef Disable_Bit_Initial
				;82		MOV A,high  bitdatasec1_start
				startupend1:
0034	0F00	mov     a, 0H
				;83		MOV mp1h,a
0035	0084	mov     BP, a
				;84		MOV A,offset bitdatasec1_end
0036	0FDA	mov     a, DAH
				;85		mov mp1l,A
0037	0083	mov     MP1, a
				;86		dec mp1l
0038	1583	dec     MP1
				;87		clr z
0039	350A	clr     Z
				;88		sub a,offset bitdatasec1_start
003A	0ADA	sub     a, DAH
				;89		sz z
003B	3D0A	sz      Z
				;90		jmp startupend2
003C	2841	jmp     startupend2
				;91	L0005:
				;92		set r1
				L0005:
003D	1F82	set     [02H]
				;93		dec mp1l
003E	1583	dec     MP1
				;94		sdz  acc
003F	1785	sdz     ACC
				;95		jmp L0005
0040	283D	jmp     L0005
				;96	
				;97	startupend2:
				;98		MOV A,high  bitdatasec0_start
				startupend2:
0041	0F00	mov     a, 0H
				;99		MOV mp1h,a
0042	0084	mov     BP, a
				;100		MOV A,offset bitdatasec0_end
0043	0FDA	mov     a, DAH
				;101		mov mp1l,A
0044	0083	mov     MP1, a
				;102		dec mp1l
0045	1583	dec     MP1
				;103		clr z
0046	350A	clr     Z
				;104		sub a,offset bitdatasec0_start
0047	0ADA	sub     a, DAH
				;105		sz  z
0048	3D0A	sz      Z
				;106		jmp startupend3
0049	284E	jmp     startupend3
				;107	L0006:
				;108		clr r1
				L0006:
004A	1F02	clr     [02H]
				;109		dec mp1l
004B	1583	dec     MP1
				;110		sdz  acc
004C	1785	sdz     ACC
				;111		jmp L0006
004D	284A	jmp     L0006
				;112	startupend3:
				;113	endif		
				;114	   
				;115	@ROMDATA_BASE .SECTION com_l 'CODE'  
				;116	startup_value:
				;117	;;linker range the initial value table here
				;118	
				;119	@BITDATASEC1 .SECTION com_l 'DATA'  
				;120	bitdatasec1_start:
				;121	
				;122	@BITDATASEC1 .SECTION com_e 'DATA'  
				;123	bitdatasec1_end:
				;124	
				;125	@BITDATASEC .SECTION com_l 'DATA'  
				;126	bitdatasec0_start:
				;127	
				;128	@BITDATASEC .SECTION com_e 'DATA'  
				;129	bitdatasec0_end:
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	#define MIN_VALU		500		//				;6	
				;7	#define Temp_20C		1820//2100		//   22c   11.4239  1912
				;8	#define Temp_22C		1911//2100		//   22c   11.4239  1912
				;9	#define Temp_37C		2396//2200		//   37c   6.0053   2560
				;10	#define Temp_45C		2478//2400		//   45c   4.3558   2853
				;11	
				;12	#define Bat_4_2V		1789		//4.2v 				;13	#define Bat_3_3V		1410		//3.3V 				;14	
				;15	extern unsigned int ntc_val;
				;16	int k;
				;17	unsigned char adcsp = 0;
				;18	unsigned int k1,k2; 
				;19	unsigned char adcsp_2 = 0;
				;20	unsigned char adcsp_1 = 0;
				;21	
				;22	#define MAX_TEMP_ARRAY	100
				;23	//				;24	//0-9
				;25	//10-19						  	
				;26	//20-29
				;27	//30-39
				;28	//40-49
				;29	//...
				;30	//90-99
				;31	const u16 AroundTemp[MAX_TEMP_ARRAY] = {2537,2488,2438,2389,2339,2289,2239,2190,2140,2091,
005B	09E9	ret     a, E9H
005C	09B8	ret     a, B8H
005D	0986	ret     a, 86H
005E	0955	ret     a, 55H
005F	0923	ret     a, 23H
0060	08F1	dc	008F1H
0061	08BF	dc	008BFH
0062	088E	dc	0088EH
0063	085C	dc	0085CH
0064	082B	dc	0082BH
0065	07F9	dc	007F9H
0066	07C9	dc	007C9H
0067	0798	dc	00798H
0068	0768	mov     a, __pcpu[38]
0069	0738	mov     a, TM1DL
006A	0709	mov     a, TBHP
006B	06DB	andm    a, __pcpu[25]
006C	06AD	andm    a, TM2AH
006D	067F	and     a, __pcpu[61]
006E	0652	and     a, __pcpu[16]
006F	0626	and     a, PBC
0070	05FB	orm     a, __pcpu[57]
0071	05D0	orm     a, __pcpu[14]
0072	05A6	orm     a, PBC
0073	057D	or      a, __pcpu[59]
0074	0555	or      a, __pcpu[19]
0075	052D	or      a, TM2AH
0076	0507	or      a, TBLP
0077	04E1	xorm    a, __pcpu[31]
0078	04BC	xorm    a, TM1RPL
0079	0498	xorm    a, __pawu[1]
007A	0474	xor     a, __pcpu[50]
007B	0452	xor     a, __pcpu[16]
007C	0430	xor     a, TM0C1
007D	0410	xor     a, INTC2
007E	03F0	addm    a, __pcpu[46]
007F	03D1	addm    a, __pcpu[15]
0080	03B2	addm    a, TM0DH
0081	0395	addm    a, PAC
0082	0378	add     a, __pcpu[54]
0083	035C	add     a, __pcpu[26]
0084	0341	add     a, PCC
0085	0327	add     a, PBPU
0086	030D	add     a, INTEG
0087	02F5	subm    a, __pcpu[51]
0088	02DD	subm    a, __pcpu[27]
0089	02C5	subm    a, __pcpu[3]
008A	02AF	subm    a, TM0C0
008B	0299	subm    a, TMPC
008C	0284	subm    a, BP
008D	026F	sub     a, __pcpu[45]
008E	025B	sub     a, __pcpu[25]
008F	0248	sub     a, __pcpu[6]
0090	0235	sub     a, TM0RP
0091	0223	sub     a, ADCR1
0092	0212	sub     a, MFI1
0093	0201	sub     a, MP0
0094	01F1	cpl     __pcpu[47]
0095	01E1	cpl     __pcpu[31]
0096	01D2	cpl     __pcpu[16]
0097	01C3	cpl     __pcpu[1]
0098	01B5	cpl     TM0RP
0099	01A7	cpl     PBPU
009A	0199	cpl     TMPC
009B	018D	cpl     INTEG
009C	0180	cpl     [00H]
009D	0174	cpla    __pcpu[50]
009E	0168	cpla    __pcpu[38]
009F	015D	cpla    __pcpu[27]
00A0	0152	cpla    __pcpu[16]
00A1	0148	cpla    __pcpu[6]
00A2	013D	cpla    TM1RPH
00A3	0134	cpla    TM0AH
00A4	012A	cpla    TM2DL
00A5	0121	cpla    ADRH
00A6	0118	cpla    __pawu[1]
00A7	010F	cpla    INTC1
00A8	0107	cpla    TBLP
00A9	00FF	mov     __pcpu[61], a
00AA	00F7	mov     __pcpu[53], a
00AB	00F0	mov     __pcpu[46], a
00AC	00E9	mov     __pcpu[39], a
00AD	00E2	mov     __pcpu[32], a
00AE	00DB	mov     __pcpu[25], a
00AF	00D4	mov     __pcpu[18], a
00B0	00CE	mov     __pcpu[12], a
00B1	00C8	mov     __pcpu[6], a
00B2	00C2	mov     PCPU, a
00B3	00BC	mov     TM1RPL, a
00B4	00B7	mov     TM1C1, a
00B5	00B1	mov     TM0DL, a
00B6	00AC	mov     TM2AL, a
00B7	00A7	mov     PBPU, a
00B8	00A2	mov     ADCR0, a
00B9	009E	mov     EEA, a
00BA	0099	mov     TMPC, a
00BB	0095	mov     PAC, a
00BC	0090	mov     INTC2, a
00BD	008C	mov     LVDC, a
00BE	0088	mov     TBLH, a
				;32							    	        2041,1993,1944,1896,1848,1801,1755,1709,1663,1618,
				;33							    			1574,1531,1488,1446,1405,1365,1325,1287,1249,1212,
				;34							    			1176,1140,1106,1072,1040,1008,977,946,917,888,
				;35							    			860,833,807,781,757,733,709,687,665,644,
				;36							    			623,603,584,565,547,530,513,497,481,466,
				;37							    			451,437,423,409,397,384,372,360,349,338,
				;38							    			328,317,308,298,289,280,271,263,255,247,
				;39							    			240,233,226,219,212,206,200,194,188,183,
				;40							    			177,172,167,162,158,153,149,144,140,136};
				;41	//45				;42	//0-9
				;43	//10-19
				;44	//20-29
				;45	//30-39
				;46	//40-49 MAX_TEMP_ARRAY
				;47	#define POSITIVE_TEMP_ARRAY		81		//0-45				;48	const int ObjPositiveTemp[POSITIVE_TEMP_ARRAY] = {1117,1097,1077,1057,1037,1017,996,975,954,933,
00BF	045D	xor     a, __pcpu[27]
00C0	0449	xor     a, __pcpu[7]
00C1	0435	xor     a, TM0RP
00C2	0421	xor     a, ADRH
00C3	040D	xor     a, INTEG
00C4	03F9	addm    a, __pcpu[55]
00C5	03E4	addm    a, __pcpu[34]
00C6	03CF	addm    a, __pcpu[13]
00C7	03BA	addm    a, TM1AL
00C8	03A5	addm    a, PB
00C9	038F	addm    a, INTC1
00CA	0379	add     a, __pcpu[55]
00CB	0363	add     a, __pcpu[33]
00CC	034D	add     a, __pcpu[11]
00CD	0337	add     a, TM1C1
00CE	0320	add     a, ADRL
00CF	0309	add     a, TBHP
00D0	02F2	subm    a, __pcpu[48]
00D1	02DA	subm    a, __pcpu[24]
00D2	02C3	subm    a, __pcpu[1]
00D3	02AB	subm    a, TM2DH
00D4	0293	subm    a, MFI2
00D5	027A	sub     a, __pcpu[56]
00D6	0261	sub     a, __pcpu[31]
00D7	0249	sub     a, __pcpu[7]
00D8	022F	sub     a, TM0C0
00D9	0216	sub     a, PAPU
00DA	01FC	cpl     __pcpu[58]
00DB	01E2	cpl     __pcpu[32]
00DC	01C8	cpl     __pcpu[6]
00DD	01AE	cpl     TM2RP
00DE	0193	cpl     MFI2
00DF	0178	cpla    __pcpu[54]
00E0	015D	cpla    __pcpu[27]
00E1	0141	cpla    PCC
00E2	0125	cpla    PB
00E3	0109	cpla    TBHP
00E4	00ED	mov     __pcpu[43], a
00E5	00D0	mov     __pcpu[14], a
00E6	00B3	mov     TM0AL, a
00E7	0096	mov     PAPU, a
00E8	0079	dc	00079H
00E9	005B	dc	0005BH
00EA	003D	dc	0003DH
00EB	001F	dc	0001FH
00EC	0000	nop
00ED	FFE1	dc	0FFE1H
00EE	FFC2	dc	0FFC2H
00EF	FFA2	dc	0FFA2H
00F0	FF83	dc	0FF83H
00F1	FF63	dc	0FF63H
00F2	FF43	dc	0FF43H
00F3	FF2E	dc	0FF2EH
00F4	FF10	dc	0FF10H
00F5	FEF2	dc	0FEF2H
00F6	FEC3	dc	0FEC3H
00F7	FEA5	dc	0FEA5H
00F8	FE84	dc	0FE84H
00F9	FE66	dc	0FE66H
00FA	FE34	dc	0FE34H
00FB	FE17	dc	0FE17H
00FC	FBE6	dc	0FBE6H
00FD	FB6E	dc	0FB6EH
00FE	FD63	dc	0FD63H
00FF	FD44	dc	0FD44H
0100	FD3A	dc	0FD3AH
0101	FD1C	dc	0FD1CH
0102	FCFE	dc	0FCFEH
0103	FCA7	dc	0FCA7H
0104	FC90	dc	0FC90H
0105	FC72	dc	0FC72H
0106	FC54	dc	0FC54H
0107	FC36	dc	0FC36H
0108	FBE2	dc	0FBE2H
0109	FBC8	dc	0FBC8H
010A	FBA0	dc	0FBA0H
010B	FB82	dc	0FB82H
010C	FB15	dc	0FB15H
010D	0000	nop
010E	0000	nop
010F	0000	nop
				;49							 			 			911,889,867,845,823,800,777,754,730,707,
				;50							 			 			683,659,634,609,585,559,534,508,482,456,
				;51							 			 			430,403,376,349,321,293,265,237,208,179,
				;52							 			 			150,121,91,61,31,0,-31,-62,-94,-125,
				;53							 			 			-157,-189,-210,-240,-270,-317,-347,-380,-410,-460,
				;54							 			 			-489,-510.-540,-570.-600,-669,-700,-710,-740,-770,
				;55							 			 			-857,-880,-910,-940,-970,-1054,-1080,-1120,-1150,
				;56							 			 			-1259};	//				;57	#define NAGATIVE_TEMP_ARRAY		46		//0-45				;58							 			 
				;59	//const u16 ObjPositiveTemp[POSITIVE_TEMP_ARRAY] = {1117,1097,1077,1057,1037,1017,996,975,954,933,
				;60	//						 			 911,889,867,845,823,800,777,754,730,707,
				;61	//						 			 683,659,634,609,585,559,534,508,482,456,
				;62	//						 			 430,403,376,349,321,293,265,237,208,179,
				;63	//						 			 150,121,91,61,31,0};	//				;64							 
				;65	#define FOUR_DEGREES		150		//4				;66	#define BIAS_VALU			2047	//				;67	#define TEMP_ADD_H			600		//				;68	#define TEMP_ADD_L			1000	//				;69	#define TEMP_DEC			50		//				;70	u8 AroudTempIndex = 0;				//				;71	
				;72	//				;73	void GetPTCValu(void)  
				;74	{
				;75		unsigned char i;
				;76		unsigned int min,max;
				;77		volatile static unsigned short adcBuf[10] __attribute__ ((at(0x1c0)));  // 1C0-1d5
				;78	
				;79		_adcr0 = ADC_NTC;			//	NTC				_GetPTCValu:
				_GetPTCValu:
0683	0F12	mov     a, 12H
0684	00A2	mov     ADCR0, a
				;80		STAR_ADC();
0685	37A2	clr     START
0686	33A2	set     START
0687	37A2	clr     START
				;81		while(_eocb);				// 				_L2:
0688	0722	mov     a, ADCR0
0689	40DB	mov     ra, a
068A	0F40	mov     a, 40H
068B	46DB	andm    a, ra
068C	50DB	sz      ra
068D	2E88	jmp     _L2
				;82	    
				;83	    k = _adrh;
068E	0721	mov     a, ADRH
068F	40DB	mov     ra, a
0690	5F5C	clr     rb
0691	475B	mov     a, ra
0692	40D1	mov     k[0], a
0693	475C	mov     a, rb
0694	40D2	mov     k[1], a
				;84	    k <<= 8;
0695	4751	mov     a, k[0]
0696	40DB	mov     ra, a
0697	4752	mov     a, k[1]
0698	40DC	mov     rb, a
0699	475B	mov     a, ra
069A	40DC	mov     rb, a
069B	5F5B	clr     ra
069C	475B	mov     a, ra
069D	40D1	mov     k[0], a
069E	475C	mov     a, rb
069F	40D2	mov     k[1], a
				;85	    k += _adrl;
06A0	0720	mov     a, ADRL
06A1	40DB	mov     ra, a
06A2	475B	mov     a, ra
06A3	40DD	mov     rc, a
06A4	5F5E	clr     rd
06A5	4751	mov     a, k[0]
06A6	40DB	mov     ra, a
06A7	4752	mov     a, k[1]
06A8	40DC	mov     rb, a
06A9	475D	mov     a, rc
06AA	43DB	addm    a, ra
06AB	475E	mov     a, rd
06AC	53DC	adcm    a, rb
06AD	475B	mov     a, ra
06AE	40D1	mov     k[0], a
06AF	475C	mov     a, rb
06B0	40D2	mov     k[1], a
				;86	    if(adcsp < 10) 
06B1	474D	mov     a, adcsp[0]
06B2	40DB	mov     ra, a
06B3	0F09	mov     a, 9H
06B4	425B	sub     a, ra
06B5	380A	snz     C
06B6	2EBA	jmp     _L3
				;87	    	i = adcsp;
06B7	474D	mov     a, adcsp[0]
06B8	40F8	mov     i[0], a
06B9	2EC0	jmp     _L4
				;88	    else  
				;89	    	i = adcsp - 10;
				_L3:
06BA	474D	mov     a, adcsp[0]
06BB	40DB	mov     ra, a
06BC	0FF6	mov     a, F6H
06BD	43DB	addm    a, ra
06BE	475B	mov     a, ra
06BF	40F8	mov     i[0], a
				;90	    adcBuf[i] = k;
				_L4:
06C0	4778	mov     a, i[0]
06C1	40DB	mov     ra, a
06C2	5F5C	clr     rb
06C3	4751	mov     a, k[0]
06C4	40DD	mov     rc, a
06C5	4752	mov     a, k[1]
06C6	40DE	mov     rd, a
06C7	340A	clr     C
06C8	5ADB	rlc     ra
06C9	5ADC	rlc     rb
06CA	0FC0	mov     a, C0H
06CB	43DB	addm    a, ra
06CC	0F01	mov     a, 1H
06CD	53DC	adcm    a, rb
06CE	475B	mov     a, ra
06CF	0083	mov     MP1, a
06D0	475C	mov     a, rb
06D1	0081	mov     MP0, a
06D2	0701	mov     a, MP0
06D3	0084	mov     BP, a
06D4	475D	mov     a, rc
06D5	0082	mov     [02H], a
06D6	1483	inc     MP1
06D7	475E	mov     a, rd
06D8	0082	mov     [02H], a
				;91	    if(adcsp < 11) 				//06D9	474D	mov     a, adcsp[0]
06DA	40DB	mov     ra, a
06DB	0F0A	mov     a, AH
06DC	425B	sub     a, ra
06DD	380A	snz     C
06DE	2EE5	jmp     _L5
				;92	    {
				;93	    	adcsp++; 
06DF	474D	mov     a, adcsp[0]
06E0	40DB	mov     ra, a
06E1	54DB	inc     ra
06E2	475B	mov     a, ra
06E3	40CD	mov     adcsp[0], a
				;94	    	return;
06E4	68B0	jmp     _L1
				;95	    }
				;96	    adcsp = 0;
				_L5:
06E5	5F4D	clr     adcsp[0]
				;97	    k = adcBuf[0];
06E6	0FC0	mov     a, C0H
06E7	0083	mov     MP1, a
06E8	0F01	mov     a, 1H
06E9	0081	mov     MP0, a
06EA	0701	mov     a, MP0
06EB	0084	mov     BP, a
06EC	0702	mov     a, [02H]
06ED	40DB	mov     ra, a
06EE	1483	inc     MP1
06EF	0702	mov     a, [02H]
06F0	40DC	mov     rb, a
06F1	475B	mov     a, ra
06F2	40D1	mov     k[0], a
06F3	475C	mov     a, rb
06F4	40D2	mov     k[1], a
				;98	    min = k;
06F5	4751	mov     a, k[0]
06F6	40DB	mov     ra, a
06F7	4752	mov     a, k[1]
06F8	40DC	mov     rb, a
06F9	475B	mov     a, ra
06FA	40F9	mov     min[0], a
06FB	475C	mov     a, rb
06FC	40FA	mov     min[1], a
				;99	    max = k;
06FD	4751	mov     a, k[0]
06FE	40DB	mov     ra, a
06FF	4752	mov     a, k[1]
0700	40DC	mov     rb, a
0701	475B	mov     a, ra
0702	40FB	mov     max[0], a
0703	475C	mov     a, rb
0704	40FC	mov     max[1], a
				;100	    for(i=1;i<10;i++)
0705	0F01	mov     a, 1H
0706	40F8	mov     i[0], a
0707	2F7E	jmp     _L7
077A	4778	mov     a, i[0]
077B	40DB	mov     ra, a
077C	545B	inca    ra
077D	40F8	mov     i[0], a
				_L7:
077E	0F09	mov     a, 9H
077F	4278	sub     a, i[0]
0780	3C0A	sz      C
0781	2F08	jmp     _L10
				;101	    {
				;102	        if(min > adcBuf[i])  
				_L10:
0708	4778	mov     a, i[0]
0709	40DB	mov     ra, a
070A	5F5C	clr     rb
070B	340A	clr     C
070C	5ADB	rlc     ra
070D	5ADC	rlc     rb
070E	0FC0	mov     a, C0H
070F	43DB	addm    a, ra
0710	0F01	mov     a, 1H
0711	53DC	adcm    a, rb
0712	475B	mov     a, ra
0713	0083	mov     MP1, a
0714	475C	mov     a, rb
0715	0081	mov     MP0, a
0716	6547	call    L0D47
0717	40DB	mov     ra, a
0718	6544	call    L0D44
0719	40DC	mov     rb, a
071A	475B	mov     a, ra
071B	4279	sub     a, min[0]
071C	475C	mov     a, rb
071D	527A	sbc     a, min[1]
071E	3C0A	sz      C
071F	2F32	jmp     _L8
				;103	        	min = adcBuf[i];
0720	4778	mov     a, i[0]
0721	40DB	mov     ra, a
0722	5F5C	clr     rb
0723	340A	clr     C
0724	5ADB	rlc     ra
0725	5ADC	rlc     rb
0726	0FC0	mov     a, C0H
0727	43DB	addm    a, ra
0728	0F01	mov     a, 1H
0729	53DC	adcm    a, rb
072A	475B	mov     a, ra
072B	0083	mov     MP1, a
072C	475C	mov     a, rb
072D	0081	mov     MP0, a
072E	6547	call    L0D47
072F	40F9	mov     min[0], a
0730	6544	call    L0D44
0731	40FA	mov     min[1], a
				;104	        if(max < adcBuf[i])  
				_L8:
0732	4778	mov     a, i[0]
0733	40DB	mov     ra, a
0734	5F5C	clr     rb
0735	340A	clr     C
0736	5ADB	rlc     ra
0737	5ADC	rlc     rb
0738	0FC0	mov     a, C0H
0739	43DB	addm    a, ra
073A	0F01	mov     a, 1H
073B	53DC	adcm    a, rb
073C	475B	mov     a, ra
073D	0083	mov     MP1, a
073E	475C	mov     a, rb
073F	0081	mov     MP0, a
0740	6547	call    L0D47
0741	40DB	mov     ra, a
0742	6544	call    L0D44
0743	40DC	mov     rb, a
0744	477B	mov     a, max[0]
0745	425B	sub     a, ra
0746	477C	mov     a, max[1]
0747	525C	sbc     a, rb
0748	3C0A	sz      C
0749	2F5C	jmp     _L9
				;105	        	max = adcBuf[i];
074A	4778	mov     a, i[0]
074B	40DB	mov     ra, a
074C	5F5C	clr     rb
074D	340A	clr     C
074E	5ADB	rlc     ra
074F	5ADC	rlc     rb
0750	0FC0	mov     a, C0H
0751	43DB	addm    a, ra
0752	0F01	mov     a, 1H
0753	53DC	adcm    a, rb
0754	475B	mov     a, ra
0755	0083	mov     MP1, a
0756	475C	mov     a, rb
0757	0081	mov     MP0, a
0758	6547	call    L0D47
0759	40FB	mov     max[0], a
075A	6544	call    L0D44
075B	40FC	mov     max[1], a
				;106	        k += adcBuf[i]; 
				_L9:
075C	4778	mov     a, i[0]
075D	40DB	mov     ra, a
075E	5F5C	clr     rb
075F	340A	clr     C
0760	5ADB	rlc     ra
0761	5ADC	rlc     rb
0762	0FC0	mov     a, C0H
0763	43DB	addm    a, ra
0764	0F01	mov     a, 1H
0765	53DC	adcm    a, rb
0766	475B	mov     a, ra
0767	0083	mov     MP1, a
0768	475C	mov     a, rb
0769	0081	mov     MP0, a
076A	6547	call    L0D47
076B	40DD	mov     rc, a
076C	6544	call    L0D44
076D	40DE	mov     rd, a
076E	4751	mov     a, k[0]
076F	40DB	mov     ra, a
0770	4752	mov     a, k[1]
0771	40DC	mov     rb, a
0772	475D	mov     a, rc
0773	43DB	addm    a, ra
0774	475E	mov     a, rd
0775	53DC	adcm    a, rb
0776	475B	mov     a, ra
0777	40D1	mov     k[0], a
0778	475C	mov     a, rb
0779	40D2	mov     k[1], a
				;107	    }
				;108	    k -= min; k -= max; k >>= 3;			//0782	4751	mov     a, k[0]
0783	40DB	mov     ra, a
0784	4752	mov     a, k[1]
0785	40DC	mov     rb, a
0786	475B	mov     a, ra
0787	4279	sub     a, min[0]
0788	40DB	mov     ra, a
0789	475C	mov     a, rb
078A	527A	sbc     a, min[1]
078B	40DC	mov     rb, a
078C	475B	mov     a, ra
078D	40D1	mov     k[0], a
078E	475C	mov     a, rb
078F	40D2	mov     k[1], a
0790	4751	mov     a, k[0]
0791	40DB	mov     ra, a
0792	4752	mov     a, k[1]
0793	40DC	mov     rb, a
0794	475B	mov     a, ra
0795	427B	sub     a, max[0]
0796	40DB	mov     ra, a
0797	475C	mov     a, rb
0798	527C	sbc     a, max[1]
0799	40DC	mov     rb, a
079A	475B	mov     a, ra
079B	40D1	mov     k[0], a
079C	475C	mov     a, rb
079D	40D2	mov     k[1], a
079E	4751	mov     a, k[0]
079F	40DB	mov     ra, a
07A0	4752	mov     a, k[1]
07A1	40DC	mov     rb, a
07A2	0F03	mov     a, 3H
				_LI1:
07A3	340A	clr     C
07A4	7FDC	sz      rb.7
07A5	300A	set     C
07A6	5BDC	rrc     rb
07A7	5BDB	rrc     ra
07A8	1785	sdz     ACC
07A9	2FA3	jmp     _LI1
07AA	475B	mov     a, ra
07AB	40D1	mov     k[0], a
07AC	475C	mov     a, rb
07AD	40D2	mov     k[1], a
				;109	/*******************************************************************************************/
				;110	//					;111	    if(k > BIAS_VALU)
07AE	4751	mov     a, k[0]
07AF	40DB	mov     ra, a
07B0	4752	mov     a, k[1]
07B1	40DC	mov     rb, a
07B2	0FFF	mov     a, FFH
07B3	425B	sub     a, ra
07B4	0F07	mov     a, 7H
07B5	525C	sbc     a, rb
07B6	1185	swap    ACC
07B7	040A	xor     a, STATUS
07B8	3985	snz     ACC.3
07B9	2FC7	jmp     _L11
				;112		{
				;113			k = k - BIAS_VALU;
07BA	4751	mov     a, k[0]
07BB	40DB	mov     ra, a
07BC	4752	mov     a, k[1]
07BD	40DC	mov     rb, a
07BE	0F01	mov     a, 1H
07BF	43DB	addm    a, ra
07C0	0FF8	mov     a, F8H
07C1	53DC	adcm    a, rb
07C2	475B	mov     a, ra
07C3	40D1	mov     k[0], a
07C4	475C	mov     a, rb
07C5	40D2	mov     k[1], a
07C6	2FC9	jmp     _L12
				;114		}
				;115		else
				;116		{
				;117			k = 0;
				_L11:
07C7	5F51	clr     k[0]
07C8	5F52	clr     k[1]
				;118		}
				;119		if(TempDir)											//				_L12:
07C9	4722	mov     a, LEDG[0]
07CA	40DB	mov     ra, a
07CB	0F80	mov     a, 80H
07CC	46DB	andm    a, ra
07CD	50DB	sz      ra
07CE	2FD0	jmp     _LI2
07CF	2FFB	jmp     _L13
				;120		{
				;121			max = ObjPositiveTemp[AroudTempIndex] + TEMP_ADD_H;	//				_LI2:
07D0	4750	mov     a, AroudTempIndex[0]
07D1	40DB	mov     ra, a
07D2	5F5C	clr     rb
07D3	340A	clr     C
07D4	5ADB	rlc     ra
07D5	5ADC	rlc     rb
07D6	0F7E	mov     a, 7EH
07D7	43DB	addm    a, ra
07D8	0F81	mov     a, 81H
07D9	53DC	adcm    a, rb
07DA	475B	mov     a, ra
07DB	0083	mov     MP1, a
07DC	475C	mov     a, rb
07DD	0081	mov     MP0, a
07DE	6547	call    L0D47
07DF	40DB	mov     ra, a
07E0	6544	call    L0D44
07E1	40DC	mov     rb, a
07E2	0F58	mov     a, 58H
07E3	43DB	addm    a, ra
07E4	0F02	mov     a, 2H
07E5	53DC	adcm    a, rb
07E6	475B	mov     a, ra
07E7	40FB	mov     max[0], a
07E8	475C	mov     a, rb
07E9	40FC	mov     max[1], a
				;122			if(k >= max)									//07EA	4751	mov     a, k[0]
07EB	40DB	mov     ra, a
07EC	4752	mov     a, k[1]
07ED	40DC	mov     rb, a
07EE	475B	mov     a, ra
07EF	427B	sub     a, max[0]
07F0	475C	mov     a, rb
07F1	527C	sbc     a, max[1]
07F2	380A	snz     C
07F3	2FF8	jmp     _L14
				;123			{
				;124		    	TempSta = UP_45;
07F4	0F03	mov     a, 3H
07F5	40B4	mov     TempSta[0], a
				;125		    	TempDir = true;								//07F6	73A2	set     LEDG[0].7
07F7	2FF9	jmp     _L15
				;126			}
				;127			else
				;128			{
				;129		    	TempDir = false;							//				_L14:
07F8	77A2	clr     LEDG[0].7
				;130			}
				;131	    	TempDirDnFlag = true;
				_L15:
07F9	73A0	set     maiFlagA[0].7
07FA	68B0	jmp     _L1
				;132		}
				;133	    else
				;134	    {
				;135	    	max = ObjPositiveTemp[AroudTempIndex] + TEMP_ADD_L;
				_L13:
07FB	4750	mov     a, AroudTempIndex[0]
07FC	40DB	mov     ra, a
07FD	5F5C	clr     rb
07FE	340A	clr     C
07FF	5ADB	rlc     ra
0800	5ADC	rlc     rb
0801	0F7E	mov     a, 7EH
0802	43DB	addm    a, ra
0803	0F81	mov     a, 81H
0804	53DC	adcm    a, rb
0805	475B	mov     a, ra
0806	0083	mov     MP1, a
0807	475C	mov     a, rb
0808	0081	mov     MP0, a
0809	6547	call    L0D47
080A	40DB	mov     ra, a
080B	6544	call    L0D44
080C	40DC	mov     rb, a
080D	0FE8	mov     a, E8H
080E	43DB	addm    a, ra
080F	0F03	mov     a, 3H
0810	53DC	adcm    a, rb
0811	475B	mov     a, ra
0812	40FB	mov     max[0], a
0813	475C	mov     a, rb
0814	40FC	mov     max[1], a
				;136	    	if(k >= max)	//0815	4751	mov     a, k[0]
0816	40DB	mov     ra, a
0817	4752	mov     a, k[1]
0818	40DC	mov     rb, a
0819	475B	mov     a, ra
081A	427B	sub     a, max[0]
081B	475C	mov     a, rb
081C	527C	sbc     a, max[1]
081D	380A	snz     C
081E	6821	jmp     _L16
				;137	    	{
				;138		    	TempDir = true;								//081F	73A2	set     LEDG[0].7
0820	68B0	jmp     _L1
				;139	    	}
				;140	    	else
				;141	    	{
				;142	    		if(TempDirDnFlag)							//				_L16:
0821	4720	mov     a, maiFlagA[0]
0822	40DB	mov     ra, a
0823	0F80	mov     a, 80H
0824	46DB	andm    a, ra
0825	50DB	sz      ra
0826	6828	jmp     _LI3
0827	6882	jmp     _L17
				;143	    		{
				;144		    		if(k >= ObjPositiveTemp[AroudTempIndex])		//				_LI3:
0828	4750	mov     a, AroudTempIndex[0]
0829	40DB	mov     ra, a
082A	5F5C	clr     rb
082B	340A	clr     C
082C	5ADB	rlc     ra
082D	5ADC	rlc     rb
082E	0F7E	mov     a, 7EH
082F	43DB	addm    a, ra
0830	0F81	mov     a, 81H
0831	53DC	adcm    a, rb
0832	475B	mov     a, ra
0833	0083	mov     MP1, a
0834	475C	mov     a, rb
0835	0081	mov     MP0, a
0836	6547	call    L0D47
0837	40DD	mov     rc, a
0838	6544	call    L0D44
0839	40DE	mov     rd, a
083A	4751	mov     a, k[0]
083B	40DB	mov     ra, a
083C	4752	mov     a, k[1]
083D	40DC	mov     rb, a
083E	475B	mov     a, ra
083F	425D	sub     a, rc
0840	475C	mov     a, rb
0841	525E	sbc     a, rd
0842	1185	swap    ACC
0843	040A	xor     a, STATUS
0844	3D85	sz      ACC.3
0845	687B	jmp     _L18
				;145		    		{
				;146				    	TempSta = IN_22_37;
0846	0F01	mov     a, 1H
0847	40B4	mov     TempSta[0], a
				;147				    	TempDirDnFlag = true;				//0848	73A0	set     maiFlagA[0].7
				;148				    	ntc_val = (k - ObjPositiveTemp[AroudTempIndex]) << 4;	//0849	4751	mov     a, k[0]
084A	40DD	mov     rc, a
084B	4752	mov     a, k[1]
084C	40DE	mov     rd, a
084D	4750	mov     a, AroudTempIndex[0]
084E	40DB	mov     ra, a
084F	5F5C	clr     rb
0850	340A	clr     C
0851	5ADB	rlc     ra
0852	5ADC	rlc     rb
0853	0F7E	mov     a, 7EH
0854	43DB	addm    a, ra
0855	0F81	mov     a, 81H
0856	53DC	adcm    a, rb
0857	475B	mov     a, ra
0858	0083	mov     MP1, a
0859	475C	mov     a, rb
085A	0081	mov     MP0, a
085B	6547	call    L0D47
085C	40DB	mov     ra, a
085D	6544	call    L0D44
085E	40DC	mov     rb, a
085F	475D	mov     a, rc
0860	42DB	subm    a, ra
0861	475E	mov     a, rd
0862	52DC	sbcm    a, rb
0863	0F04	mov     a, 4H
				_LI4:
0864	340A	clr     C
0865	5ADB	rlc     ra
0866	5ADC	rlc     rb
0867	1785	sdz     ACC
0868	6864	jmp     _LI4
0869	475B	mov     a, ra
086A	40B5	mov     ntc_val[0], a
086B	475C	mov     a, rb
086C	40B6	mov     ntc_val[1], a
				;149				    	if(ntc_val > 2048)
086D	4735	mov     a, ntc_val[0]
086E	40DB	mov     ra, a
086F	4736	mov     a, ntc_val[1]
0870	40DC	mov     rb, a
0871	0F00	mov     a, 0H
0872	425B	sub     a, ra
0873	0F08	mov     a, 8H
0874	525C	sbc     a, rb
0875	3C0A	sz      C
0876	6880	jmp     _L20
				;150				    		ntc_val = 2048;	
0877	5F35	clr     ntc_val[0]
0878	0F08	mov     a, 8H
0879	40B6	mov     ntc_val[1], a
087A	6880	jmp     _L20
				;151		    		}
				;152		    		else
				;153		    		{
				;154				    	TempSta = DOWN_22;
				_L18:
087B	5F34	clr     TempSta[0]
				;155				    	TempDirDnFlag = false;				//087C	77A0	clr     maiFlagA[0].7
				;156				    	ntc_val = 2048;    			
087D	5F35	clr     ntc_val[0]
087E	0F08	mov     a, 8H
087F	40B6	mov     ntc_val[1], a
				;157		    		}
				;158			    	TempDir = false;						//				_L20:
0880	77A2	clr     LEDG[0].7
0881	68B0	jmp     _L1
				;159	    		}
				;160	    		else
				;161	    		{
				;162	    			max = ObjPositiveTemp[AroudTempIndex] + TEMP_DEC;
				_L17:
0882	4750	mov     a, AroudTempIndex[0]
0883	40DB	mov     ra, a
0884	5F5C	clr     rb
0885	340A	clr     C
0886	5ADB	rlc     ra
0887	5ADC	rlc     rb
0888	0F7E	mov     a, 7EH
0889	43DB	addm    a, ra
088A	0F81	mov     a, 81H
088B	53DC	adcm    a, rb
088C	475B	mov     a, ra
088D	0083	mov     MP1, a
088E	475C	mov     a, rb
088F	0081	mov     MP0, a
0890	6547	call    L0D47
0891	40DB	mov     ra, a
0892	6544	call    L0D44
0893	40DC	mov     rb, a
0894	0F32	mov     a, 32H
0895	43DB	addm    a, ra
0896	0F00	mov     a, 0H
0897	53DC	adcm    a, rb
0898	475B	mov     a, ra
0899	40FB	mov     max[0], a
089A	475C	mov     a, rb
089B	40FC	mov     max[1], a
				;163		    		if(k >= max)			//089C	4751	mov     a, k[0]
089D	40DB	mov     ra, a
089E	4752	mov     a, k[1]
089F	40DC	mov     rb, a
08A0	475B	mov     a, ra
08A1	427B	sub     a, max[0]
08A2	475C	mov     a, rb
08A3	527C	sbc     a, max[1]
08A4	380A	snz     C
08A5	68AA	jmp     _L21
				;164		    		{
				;165				    	TempSta = IN_22_37;
08A6	0F01	mov     a, 1H
08A7	40B4	mov     TempSta[0], a
				;166				    	TempDirDnFlag = true;				//08A8	73A0	set     maiFlagA[0].7
08A9	68AC	jmp     _L22
				;167		    		}
				;168		    		else
				;169		    		{
				;170				    	TempSta = DOWN_22;					//				_L21:
08AA	5F34	clr     TempSta[0]
				;171				    	TempDirDnFlag = false;
08AB	77A0	clr     maiFlagA[0].7
				;172		    		}    			
				;173			    	TempDir = false;						//				_L22:
08AC	77A2	clr     LEDG[0].7
				;174			    	ntc_val = 2048;    			
08AD	5F35	clr     ntc_val[0]
08AE	0F08	mov     a, 8H
08AF	40B6	mov     ntc_val[1], a
				_L1:
08B0	0003	ret
				;175	    		}    		    		    		
				;176	    	}
				;177	    }        		
				;178	}
				;179	//				;180	void GetAroudTempValu(void)  
				;181	{
				;182		unsigned char i;
				;183		unsigned int min,max;
				;184		volatile static unsigned short adcBuf[10] __attribute__ ((at(0x1eb)));  // 1eb -1d5
				;185	
				;186		_adcr0 = ADC_AROUD;			//				_GetAroudTempValu:
				_GetAroudTempValu:
08B1	0F13	mov     a, 13H
08B2	00A2	mov     ADCR0, a
				;187		STAR_ADC();
08B3	37A2	clr     START
08B4	33A2	set     START
08B5	37A2	clr     START
				;188		while(_eocb);				// 				_L24:
08B6	0722	mov     a, ADCR0
08B7	40DB	mov     ra, a
08B8	0F40	mov     a, 40H
08B9	46DB	andm    a, ra
08BA	50DB	sz      ra
08BB	68B6	jmp     _L24
				;189	    
				;190	    k2 = _adrh;
08BC	0721	mov     a, ADRH
08BD	40DB	mov     ra, a
08BE	5F5C	clr     rb
08BF	475B	mov     a, ra
08C0	40D5	mov     k2[0], a
08C1	475C	mov     a, rb
08C2	40D6	mov     k2[1], a
				;191	    k2 <<= 8;
08C3	4755	mov     a, k2[0]
08C4	40DB	mov     ra, a
08C5	4756	mov     a, k2[1]
08C6	40DC	mov     rb, a
08C7	475B	mov     a, ra
08C8	40DC	mov     rb, a
08C9	5F5B	clr     ra
08CA	475B	mov     a, ra
08CB	40D5	mov     k2[0], a
08CC	475C	mov     a, rb
08CD	40D6	mov     k2[1], a
				;192	    k2 += _adrl;
08CE	0720	mov     a, ADRL
08CF	40DB	mov     ra, a
08D0	475B	mov     a, ra
08D1	40DD	mov     rc, a
08D2	5F5E	clr     rd
08D3	4755	mov     a, k2[0]
08D4	40DB	mov     ra, a
08D5	4756	mov     a, k2[1]
08D6	40DC	mov     rb, a
08D7	475D	mov     a, rc
08D8	43DB	addm    a, ra
08D9	475E	mov     a, rd
08DA	53DC	adcm    a, rb
08DB	475B	mov     a, ra
08DC	40D5	mov     k2[0], a
08DD	475C	mov     a, rb
08DE	40D6	mov     k2[1], a
				;193	    if(adcsp_2 < 10) 
08DF	474E	mov     a, adcsp_2[0]
08E0	40DB	mov     ra, a
08E1	0F09	mov     a, 9H
08E2	425B	sub     a, ra
08E3	380A	snz     C
08E4	68E8	jmp     _L25
				;194	    	i = adcsp_2;
08E5	474E	mov     a, adcsp_2[0]
08E6	40F8	mov     i[0], a
08E7	68EE	jmp     _L26
				;195	    else  
				;196	    	i = adcsp_2 - 10;
				_L25:
08E8	474E	mov     a, adcsp_2[0]
08E9	40DB	mov     ra, a
08EA	0FF6	mov     a, F6H
08EB	43DB	addm    a, ra
08EC	475B	mov     a, ra
08ED	40F8	mov     i[0], a
				;197	    adcBuf[i] = k2;
				_L26:
08EE	4778	mov     a, i[0]
08EF	40DB	mov     ra, a
08F0	5F5C	clr     rb
08F1	4755	mov     a, k2[0]
08F2	40DD	mov     rc, a
08F3	4756	mov     a, k2[1]
08F4	40DE	mov     rd, a
08F5	340A	clr     C
08F6	5ADB	rlc     ra
08F7	5ADC	rlc     rb
08F8	0FEB	mov     a, EBH
08F9	43DB	addm    a, ra
08FA	0F01	mov     a, 1H
08FB	53DC	adcm    a, rb
08FC	475B	mov     a, ra
08FD	0083	mov     MP1, a
08FE	475C	mov     a, rb
08FF	0081	mov     MP0, a
0900	0701	mov     a, MP0
0901	0084	mov     BP, a
0902	475D	mov     a, rc
0903	0082	mov     [02H], a
0904	1483	inc     MP1
0905	475E	mov     a, rd
0906	0082	mov     [02H], a
				;198	    if(adcsp_2 < 11) 				//0907	474E	mov     a, adcsp_2[0]
0908	40DB	mov     ra, a
0909	0F0A	mov     a, AH
090A	425B	sub     a, ra
090B	380A	snz     C
090C	6913	jmp     _L27
				;199	    {
				;200	    	adcsp_2++; 
090D	474E	mov     a, adcsp_2[0]
090E	40DB	mov     ra, a
090F	54DB	inc     ra
0910	475B	mov     a, ra
0911	40CE	mov     adcsp_2[0], a
				;201	    	return;
0912	69FB	jmp     _L23
				;202	    }
				;203	    adcsp_2 = 0;
				_L27:
0913	5F4E	clr     adcsp_2[0]
				;204	    k2 = adcBuf[0];
0914	0FEB	mov     a, EBH
0915	0083	mov     MP1, a
0916	0F01	mov     a, 1H
0917	0081	mov     MP0, a
0918	0701	mov     a, MP0
0919	0084	mov     BP, a
091A	0702	mov     a, [02H]
091B	40DB	mov     ra, a
091C	1483	inc     MP1
091D	0702	mov     a, [02H]
091E	40DC	mov     rb, a
091F	475B	mov     a, ra
0920	40D5	mov     k2[0], a
0921	475C	mov     a, rb
0922	40D6	mov     k2[1], a
				;205	    min = k2;
0923	4755	mov     a, k2[0]
0924	40F9	mov     min[0], a
0925	4756	mov     a, k2[1]
0926	40FA	mov     min[1], a
				;206	    max = k2;
0927	4755	mov     a, k2[0]
0928	40FB	mov     max[0], a
0929	4756	mov     a, k2[1]
092A	40FC	mov     max[1], a
				;207	    for(i=1;i<10;i++)
092B	0F01	mov     a, 1H
092C	40F8	mov     i[0], a
092D	69A4	jmp     _L29
09A0	4778	mov     a, i[0]
09A1	40DB	mov     ra, a
09A2	545B	inca    ra
09A3	40F8	mov     i[0], a
				_L29:
09A4	0F09	mov     a, 9H
09A5	4278	sub     a, i[0]
09A6	3C0A	sz      C
09A7	692E	jmp     _L32
				;208	    {
				;209	        if(min > adcBuf[i])  
				_L32:
092E	4778	mov     a, i[0]
092F	40DB	mov     ra, a
0930	5F5C	clr     rb
0931	340A	clr     C
0932	5ADB	rlc     ra
0933	5ADC	rlc     rb
0934	0FEB	mov     a, EBH
0935	43DB	addm    a, ra
0936	0F01	mov     a, 1H
0937	53DC	adcm    a, rb
0938	475B	mov     a, ra
0939	0083	mov     MP1, a
093A	475C	mov     a, rb
093B	0081	mov     MP0, a
093C	6547	call    L0D47
093D	40DB	mov     ra, a
093E	6544	call    L0D44
093F	40DC	mov     rb, a
0940	475B	mov     a, ra
0941	4279	sub     a, min[0]
0942	475C	mov     a, rb
0943	527A	sbc     a, min[1]
0944	3C0A	sz      C
0945	6958	jmp     _L30
				;210	        	min = adcBuf[i];
0946	4778	mov     a, i[0]
0947	40DB	mov     ra, a
0948	5F5C	clr     rb
0949	340A	clr     C
094A	5ADB	rlc     ra
094B	5ADC	rlc     rb
094C	0FEB	mov     a, EBH
094D	43DB	addm    a, ra
094E	0F01	mov     a, 1H
094F	53DC	adcm    a, rb
0950	475B	mov     a, ra
0951	0083	mov     MP1, a
0952	475C	mov     a, rb
0953	0081	mov     MP0, a
0954	6547	call    L0D47
0955	40F9	mov     min[0], a
0956	6544	call    L0D44
0957	40FA	mov     min[1], a
				;211	        if(max < adcBuf[i])  
				_L30:
0958	4778	mov     a, i[0]
0959	40DB	mov     ra, a
095A	5F5C	clr     rb
095B	340A	clr     C
095C	5ADB	rlc     ra
095D	5ADC	rlc     rb
095E	0FEB	mov     a, EBH
095F	43DB	addm    a, ra
0960	0F01	mov     a, 1H
0961	53DC	adcm    a, rb
0962	475B	mov     a, ra
0963	0083	mov     MP1, a
0964	475C	mov     a, rb
0965	0081	mov     MP0, a
0966	6547	call    L0D47
0967	40DB	mov     ra, a
0968	6544	call    L0D44
0969	40DC	mov     rb, a
096A	477B	mov     a, max[0]
096B	425B	sub     a, ra
096C	477C	mov     a, max[1]
096D	525C	sbc     a, rb
096E	3C0A	sz      C
096F	6982	jmp     _L31
				;212	        	max = adcBuf[i];
0970	4778	mov     a, i[0]
0971	40DB	mov     ra, a
0972	5F5C	clr     rb
0973	340A	clr     C
0974	5ADB	rlc     ra
0975	5ADC	rlc     rb
0976	0FEB	mov     a, EBH
0977	43DB	addm    a, ra
0978	0F01	mov     a, 1H
0979	53DC	adcm    a, rb
097A	475B	mov     a, ra
097B	0083	mov     MP1, a
097C	475C	mov     a, rb
097D	0081	mov     MP0, a
097E	6547	call    L0D47
097F	40FB	mov     max[0], a
0980	6544	call    L0D44
0981	40FC	mov     max[1], a
				;213	        k2 += adcBuf[i]; 
				_L31:
0982	4778	mov     a, i[0]
0983	40DB	mov     ra, a
0984	5F5C	clr     rb
0985	340A	clr     C
0986	5ADB	rlc     ra
0987	5ADC	rlc     rb
0988	0FEB	mov     a, EBH
0989	43DB	addm    a, ra
098A	0F01	mov     a, 1H
098B	53DC	adcm    a, rb
098C	475B	mov     a, ra
098D	0083	mov     MP1, a
098E	475C	mov     a, rb
098F	0081	mov     MP0, a
0990	6547	call    L0D47
0991	40DD	mov     rc, a
0992	6544	call    L0D44
0993	40DE	mov     rd, a
0994	4755	mov     a, k2[0]
0995	40DB	mov     ra, a
0996	4756	mov     a, k2[1]
0997	40DC	mov     rb, a
0998	475D	mov     a, rc
0999	43DB	addm    a, ra
099A	475E	mov     a, rd
099B	53DC	adcm    a, rb
099C	475B	mov     a, ra
099D	40D5	mov     k2[0], a
099E	475C	mov     a, rb
099F	40D6	mov     k2[1], a
				;214	    }
				;215	    k2 -= min; k2 -= max; k2 >>= 3;			//09A8	4755	mov     a, k2[0]
09A9	40DB	mov     ra, a
09AA	4756	mov     a, k2[1]
09AB	40DC	mov     rb, a
09AC	475B	mov     a, ra
09AD	4279	sub     a, min[0]
09AE	40DB	mov     ra, a
09AF	475C	mov     a, rb
09B0	527A	sbc     a, min[1]
09B1	40DC	mov     rb, a
09B2	475B	mov     a, ra
09B3	40D5	mov     k2[0], a
09B4	475C	mov     a, rb
09B5	40D6	mov     k2[1], a
09B6	4755	mov     a, k2[0]
09B7	40DB	mov     ra, a
09B8	4756	mov     a, k2[1]
09B9	40DC	mov     rb, a
09BA	475B	mov     a, ra
09BB	427B	sub     a, max[0]
09BC	40DB	mov     ra, a
09BD	475C	mov     a, rb
09BE	527C	sbc     a, max[1]
09BF	40DC	mov     rb, a
09C0	475B	mov     a, ra
09C1	40D5	mov     k2[0], a
09C2	475C	mov     a, rb
09C3	40D6	mov     k2[1], a
09C4	4755	mov     a, k2[0]
09C5	40DB	mov     ra, a
09C6	4756	mov     a, k2[1]
09C7	40DC	mov     rb, a
09C8	0F03	mov     a, 3H
				_LI5:
09C9	340A	clr     C
09CA	5BDC	rrc     rb
09CB	5BDB	rrc     ra
09CC	1785	sdz     ACC
09CD	69C9	jmp     _LI5
09CE	475B	mov     a, ra
09CF	40D5	mov     k2[0], a
09D0	475C	mov     a, rb
09D1	40D6	mov     k2[1], a
				;216		for(i=0;i <MAX_TEMP_ARRAY;i++)			//09D2	5F78	clr     i[0]
09D3	69F5	jmp     _L33
				_L34:
09F1	4778	mov     a, i[0]
09F2	40DB	mov     ra, a
09F3	545B	inca    ra
09F4	40F8	mov     i[0], a
				_L33:
09F5	0F63	mov     a, 63H
09F6	4278	sub     a, i[0]
09F7	3C0A	sz      C
09F8	69D4	jmp     _L36
				;217		{
				;218			if(k2 >= AroundTemp[i])
				_L36:
09D4	4778	mov     a, i[0]
09D5	40DB	mov     ra, a
09D6	5F5C	clr     rb
09D7	340A	clr     C
09D8	5ADB	rlc     ra
09D9	5ADC	rlc     rb
09DA	0FB6	mov     a, B6H
09DB	43DB	addm    a, ra
09DC	0F80	mov     a, 80H
09DD	53DC	adcm    a, rb
09DE	475B	mov     a, ra
09DF	0083	mov     MP1, a
09E0	475C	mov     a, rb
09E1	0081	mov     MP0, a
09E2	6547	call    L0D47
09E3	40DD	mov     rc, a
09E4	6544	call    L0D44
09E5	40DE	mov     rd, a
09E6	4755	mov     a, k2[0]
09E7	40DB	mov     ra, a
09E8	4756	mov     a, k2[1]
09E9	40DC	mov     rb, a
09EA	475B	mov     a, ra
09EB	425D	sub     a, rc
09EC	475C	mov     a, rb
09ED	525E	sbc     a, rd
09EE	380A	snz     C
09EF	69F1	jmp     _L34
				;219			{			
				;220				break;
09F0	69F9	jmp     _L35
				;221			}
				;222		}
				;223		AroudTempIndex = i;						//				_L35:
09F9	4778	mov     a, i[0]
09FA	40D0	mov     AroudTempIndex[0], a
				_L23:
09FB	0003	ret
				;224	}
				;225	
				;226	#define LOW_BAT_VALU	2100		//1.65V				;227	#define LOW_BAT_VALU_UP	2300		//1.8V				;228	#define FULL_BAT_VALU	2556		//4.12V	4.12V				;229	
				;230	#define FULL_DOWN_VALU	2574		//				;231	//				;232	void GetBatValu(void)  
				;233	{
				;234		unsigned char i;
				;235		unsigned short min,max;
				;236		volatile static unsigned short adcBuf[10] __attribute__ ((at(0x1a0)));  // 1a0-1b4
				;237		static u8 TimesCnt = 0,TimesFullCnt = 0,TimesFullDnCnt = 0;
				;238		_adcr0 = ADC_BAT;			//				_GetBatValu:
				_GetBatValu:
09FC	0F15	mov     a, 15H
09FD	00A2	mov     ADCR0, a
				;239		STAR_ADC();
09FE	37A2	clr     START
09FF	33A2	set     START
0A00	37A2	clr     START
				;240		while(_eocb);				// 				_L38:
0A01	0722	mov     a, ADCR0
0A02	40DB	mov     ra, a
0A03	0F40	mov     a, 40H
0A04	46DB	andm    a, ra
0A05	50DB	sz      ra
0A06	6A01	jmp     _L38
				;241	    
				;242	    k1 = _adrh;
0A07	0721	mov     a, ADRH
0A08	40DB	mov     ra, a
0A09	5F5C	clr     rb
0A0A	475B	mov     a, ra
0A0B	40D3	mov     k1[0], a
0A0C	475C	mov     a, rb
0A0D	40D4	mov     k1[1], a
				;243	    k1 <<= 8;
0A0E	4753	mov     a, k1[0]
0A0F	40DB	mov     ra, a
0A10	4754	mov     a, k1[1]
0A11	40DC	mov     rb, a
0A12	475B	mov     a, ra
0A13	40DC	mov     rb, a
0A14	5F5B	clr     ra
0A15	475B	mov     a, ra
0A16	40D3	mov     k1[0], a
0A17	475C	mov     a, rb
0A18	40D4	mov     k1[1], a
				;244	    k1 += _adrl;
0A19	0720	mov     a, ADRL
0A1A	40DB	mov     ra, a
0A1B	475B	mov     a, ra
0A1C	40DD	mov     rc, a
0A1D	5F5E	clr     rd
0A1E	4753	mov     a, k1[0]
0A1F	40DB	mov     ra, a
0A20	4754	mov     a, k1[1]
0A21	40DC	mov     rb, a
0A22	475D	mov     a, rc
0A23	43DB	addm    a, ra
0A24	475E	mov     a, rd
0A25	53DC	adcm    a, rb
0A26	475B	mov     a, ra
0A27	40D3	mov     k1[0], a
0A28	475C	mov     a, rb
0A29	40D4	mov     k1[1], a
				;245	    if(adcsp_1 < 10) 
0A2A	474F	mov     a, adcsp_1[0]
0A2B	40DB	mov     ra, a
0A2C	0F09	mov     a, 9H
0A2D	425B	sub     a, ra
0A2E	380A	snz     C
0A2F	6A33	jmp     _L39
				;246	    	i = adcsp_1;
0A30	474F	mov     a, adcsp_1[0]
0A31	40F8	mov     i[0], a
0A32	6A39	jmp     _L40
				;247	    else  
				;248	    	i = adcsp_1 - 10;
				_L39:
0A33	474F	mov     a, adcsp_1[0]
0A34	40DB	mov     ra, a
0A35	0FF6	mov     a, F6H
0A36	43DB	addm    a, ra
0A37	475B	mov     a, ra
0A38	40F8	mov     i[0], a
				;249	    adcBuf[i] = k1;
				_L40:
0A39	4778	mov     a, i[0]
0A3A	40DB	mov     ra, a
0A3B	5F5C	clr     rb
0A3C	4753	mov     a, k1[0]
0A3D	40DD	mov     rc, a
0A3E	4754	mov     a, k1[1]
0A3F	40DE	mov     rd, a
0A40	340A	clr     C
0A41	5ADB	rlc     ra
0A42	5ADC	rlc     rb
0A43	0FA0	mov     a, A0H
0A44	43DB	addm    a, ra
0A45	0F01	mov     a, 1H
0A46	53DC	adcm    a, rb
0A47	475B	mov     a, ra
0A48	0083	mov     MP1, a
0A49	475C	mov     a, rb
0A4A	0081	mov     MP0, a
0A4B	0701	mov     a, MP0
0A4C	0084	mov     BP, a
0A4D	475D	mov     a, rc
0A4E	0082	mov     [02H], a
0A4F	1483	inc     MP1
0A50	475E	mov     a, rd
0A51	0082	mov     [02H], a
				;250	    if(adcsp_1 < 11) 				//0A52	474F	mov     a, adcsp_1[0]
0A53	40DB	mov     ra, a
0A54	0F0A	mov     a, AH
0A55	425B	sub     a, ra
0A56	380A	snz     C
0A57	6A5E	jmp     _L41
				;251	    {
				;252	    	adcsp_1++; 
0A58	474F	mov     a, adcsp_1[0]
0A59	40DB	mov     ra, a
0A5A	54DB	inc     ra
0A5B	475B	mov     a, ra
0A5C	40CF	mov     adcsp_1[0], a
				;253	    	return;
0A5D	6BA4	jmp     _L37
				;254	    }
				;255	    adcsp_1 = 0;
				_L41:
0A5E	5F4F	clr     adcsp_1[0]
				;256	    k1 = adcBuf[0];
0A5F	0FA0	mov     a, A0H
0A60	0083	mov     MP1, a
0A61	0F01	mov     a, 1H
0A62	0081	mov     MP0, a
0A63	0701	mov     a, MP0
0A64	0084	mov     BP, a
0A65	0702	mov     a, [02H]
0A66	40DB	mov     ra, a
0A67	1483	inc     MP1
0A68	0702	mov     a, [02H]
0A69	40DC	mov     rb, a
0A6A	475B	mov     a, ra
0A6B	40D3	mov     k1[0], a
0A6C	475C	mov     a, rb
0A6D	40D4	mov     k1[1], a
				;257	    min = k1;
0A6E	4753	mov     a, k1[0]
0A6F	40F9	mov     min[0], a
0A70	4754	mov     a, k1[1]
0A71	40FA	mov     min[1], a
				;258	    max = k1;
0A72	4753	mov     a, k1[0]
0A73	40FB	mov     max[0], a
0A74	4754	mov     a, k1[1]
0A75	40FC	mov     max[1], a
				;259	    for(i=1;i<10;i++)
0A76	0F01	mov     a, 1H
0A77	40F8	mov     i[0], a
0A78	6AEF	jmp     _L43
0AEB	4778	mov     a, i[0]
0AEC	40DB	mov     ra, a
0AED	545B	inca    ra
0AEE	40F8	mov     i[0], a
				_L43:
0AEF	0F09	mov     a, 9H
0AF0	4278	sub     a, i[0]
0AF1	3C0A	sz      C
0AF2	6A79	jmp     _L46
				;260	    {
				;261	        if(min > adcBuf[i])  
				_L46:
0A79	4778	mov     a, i[0]
0A7A	40DB	mov     ra, a
0A7B	5F5C	clr     rb
0A7C	340A	clr     C
0A7D	5ADB	rlc     ra
0A7E	5ADC	rlc     rb
0A7F	0FA0	mov     a, A0H
0A80	43DB	addm    a, ra
0A81	0F01	mov     a, 1H
0A82	53DC	adcm    a, rb
0A83	475B	mov     a, ra
0A84	0083	mov     MP1, a
0A85	475C	mov     a, rb
0A86	0081	mov     MP0, a
0A87	6547	call    L0D47
0A88	40DB	mov     ra, a
0A89	6544	call    L0D44
0A8A	40DC	mov     rb, a
0A8B	475B	mov     a, ra
0A8C	4279	sub     a, min[0]
0A8D	475C	mov     a, rb
0A8E	527A	sbc     a, min[1]
0A8F	3C0A	sz      C
0A90	6AA3	jmp     _L44
				;262	        	min = adcBuf[i];
0A91	4778	mov     a, i[0]
0A92	40DB	mov     ra, a
0A93	5F5C	clr     rb
0A94	340A	clr     C
0A95	5ADB	rlc     ra
0A96	5ADC	rlc     rb
0A97	0FA0	mov     a, A0H
0A98	43DB	addm    a, ra
0A99	0F01	mov     a, 1H
0A9A	53DC	adcm    a, rb
0A9B	475B	mov     a, ra
0A9C	0083	mov     MP1, a
0A9D	475C	mov     a, rb
0A9E	0081	mov     MP0, a
0A9F	6547	call    L0D47
0AA0	40F9	mov     min[0], a
0AA1	6544	call    L0D44
0AA2	40FA	mov     min[1], a
				;263	        if(max < adcBuf[i])  
				_L44:
0AA3	4778	mov     a, i[0]
0AA4	40DB	mov     ra, a
0AA5	5F5C	clr     rb
0AA6	340A	clr     C
0AA7	5ADB	rlc     ra
0AA8	5ADC	rlc     rb
0AA9	0FA0	mov     a, A0H
0AAA	43DB	addm    a, ra
0AAB	0F01	mov     a, 1H
0AAC	53DC	adcm    a, rb
0AAD	475B	mov     a, ra
0AAE	0083	mov     MP1, a
0AAF	475C	mov     a, rb
0AB0	0081	mov     MP0, a
0AB1	6547	call    L0D47
0AB2	40DB	mov     ra, a
0AB3	6544	call    L0D44
0AB4	40DC	mov     rb, a
0AB5	477B	mov     a, max[0]
0AB6	425B	sub     a, ra
0AB7	477C	mov     a, max[1]
0AB8	525C	sbc     a, rb
0AB9	3C0A	sz      C
0ABA	6ACD	jmp     _L45
				;264	        	max = adcBuf[i];
0ABB	4778	mov     a, i[0]
0ABC	40DB	mov     ra, a
0ABD	5F5C	clr     rb
0ABE	340A	clr     C
0ABF	5ADB	rlc     ra
0AC0	5ADC	rlc     rb
0AC1	0FA0	mov     a, A0H
0AC2	43DB	addm    a, ra
0AC3	0F01	mov     a, 1H
0AC4	53DC	adcm    a, rb
0AC5	475B	mov     a, ra
0AC6	0083	mov     MP1, a
0AC7	475C	mov     a, rb
0AC8	0081	mov     MP0, a
0AC9	6547	call    L0D47
0ACA	40FB	mov     max[0], a
0ACB	6544	call    L0D44
0ACC	40FC	mov     max[1], a
				;265	        k1 += adcBuf[i]; 
				_L45:
0ACD	4778	mov     a, i[0]
0ACE	40DB	mov     ra, a
0ACF	5F5C	clr     rb
0AD0	340A	clr     C
0AD1	5ADB	rlc     ra
0AD2	5ADC	rlc     rb
0AD3	0FA0	mov     a, A0H
0AD4	43DB	addm    a, ra
0AD5	0F01	mov     a, 1H
0AD6	53DC	adcm    a, rb
0AD7	475B	mov     a, ra
0AD8	0083	mov     MP1, a
0AD9	475C	mov     a, rb
0ADA	0081	mov     MP0, a
0ADB	6547	call    L0D47
0ADC	40DD	mov     rc, a
0ADD	6544	call    L0D44
0ADE	40DE	mov     rd, a
0ADF	4753	mov     a, k1[0]
0AE0	40DB	mov     ra, a
0AE1	4754	mov     a, k1[1]
0AE2	40DC	mov     rb, a
0AE3	475D	mov     a, rc
0AE4	43DB	addm    a, ra
0AE5	475E	mov     a, rd
0AE6	53DC	adcm    a, rb
0AE7	475B	mov     a, ra
0AE8	40D3	mov     k1[0], a
0AE9	475C	mov     a, rb
0AEA	40D4	mov     k1[1], a
				;266	    }
				;267	    k1 -= min; k1 -= max; k1 >>= 3;			//0AF3	4753	mov     a, k1[0]
0AF4	40DB	mov     ra, a
0AF5	4754	mov     a, k1[1]
0AF6	40DC	mov     rb, a
0AF7	475B	mov     a, ra
0AF8	4279	sub     a, min[0]
0AF9	40DB	mov     ra, a
0AFA	475C	mov     a, rb
0AFB	527A	sbc     a, min[1]
0AFC	40DC	mov     rb, a
0AFD	475B	mov     a, ra
0AFE	40D3	mov     k1[0], a
0AFF	475C	mov     a, rb
0B00	40D4	mov     k1[1], a
0B01	4753	mov     a, k1[0]
0B02	40DB	mov     ra, a
0B03	4754	mov     a, k1[1]
0B04	40DC	mov     rb, a
0B05	475B	mov     a, ra
0B06	427B	sub     a, max[0]
0B07	40DB	mov     ra, a
0B08	475C	mov     a, rb
0B09	527C	sbc     a, max[1]
0B0A	40DC	mov     rb, a
0B0B	475B	mov     a, ra
0B0C	40D3	mov     k1[0], a
0B0D	475C	mov     a, rb
0B0E	40D4	mov     k1[1], a
0B0F	4753	mov     a, k1[0]
0B10	40DB	mov     ra, a
0B11	4754	mov     a, k1[1]
0B12	40DC	mov     rb, a
0B13	0F03	mov     a, 3H
				_LI6:
0B14	340A	clr     C
0B15	5BDC	rrc     rb
0B16	5BDB	rrc     ra
0B17	1785	sdz     ACC
0B18	6B14	jmp     _LI6
0B19	475B	mov     a, ra
0B1A	40D3	mov     k1[0], a
0B1B	475C	mov     a, rb
0B1C	40D4	mov     k1[1], a
				;268	    if((k1 < LOW_BAT_VALU)&&(!ChargIngFlag)&&(WorkMode == RUN_MODE))	//0B1D	4753	mov     a, k1[0]
0B1E	40DB	mov     ra, a
0B1F	4754	mov     a, k1[1]
0B20	40DC	mov     rb, a
0B21	0F33	mov     a, 33H
0B22	425B	sub     a, ra
0B23	0F08	mov     a, 8H
0B24	525C	sbc     a, rb
0B25	380A	snz     C
0B26	6B46	jmp     _L47
0B27	4721	mov     a, maiFlagB[0]
0B28	40DB	mov     ra, a
0B29	0F40	mov     a, 40H
0B2A	46DB	andm    a, ra
0B2B	50DB	sz      ra
0B2C	6B46	jmp     _L47
0B2D	4733	mov     a, WorkMode[0]
0B2E	40DB	mov     ra, a
0B2F	575B	sdza    ra
0B30	6B46	jmp     _L47
				;269	    {
				;270	    	TimesCnt++;
0B31	4757	mov     a, TimesCnt[0]
0B32	40DB	mov     ra, a
0B33	54DB	inc     ra
0B34	475B	mov     a, ra
0B35	40D7	mov     TimesCnt[0], a
				;271	    	if(TimesCnt >= 20)
0B36	4757	mov     a, TimesCnt[0]
0B37	40DB	mov     ra, a
0B38	0F13	mov     a, 13H
0B39	425B	sub     a, ra
0B3A	3C0A	sz      C
0B3B	6B45	jmp     _L48
0B44	6B61	jmp     _L50
				_L48:
0B45	6B61	jmp     _L50
				;272	    	{			
				;273		    	if(!BATLow3p5Flag)
0B3C	4722	mov     a, LEDG[0]
0B3D	40DB	mov     ra, a
0B3E	0F02	mov     a, 2H
0B3F	46DB	andm    a, ra
0B40	50DB	sz      ra
0B41	6B43	jmp     _L49
				;274		    	{
				;275					LowBatShutDnSCnt = 0;
0B42	5F3B	clr     LowBatShutDnSCnt[0]
				;276		    	}
				;277				BATLow3p5Flag = true;
				_L49:
0B43	70A2	set     LEDG[0].1
				;278	    	}
				;279	    }
				;280	    else
				;281	    {
				;282	    	if((k1 > LOW_BAT_VALU_UP) && BATLow3p5Flag)
				_L47:
0B46	4753	mov     a, k1[0]
0B47	40DB	mov     ra, a
0B48	4754	mov     a, k1[1]
0B49	40DC	mov     rb, a
0B4A	0FFC	mov     a, FCH
0B4B	425B	sub     a, ra
0B4C	0F08	mov     a, 8H
0B4D	525C	sbc     a, rb
0B4E	3C0A	sz      C
0B4F	6B58	jmp     _L51
0B50	4722	mov     a, LEDG[0]
0B51	40DB	mov     ra, a
0B52	0F02	mov     a, 2H
0B53	46DB	andm    a, ra
0B54	50DB	sz      ra
0B55	6B57	jmp     _LI7
0B56	6B58	jmp     _L51
				;283				BATLow3p5Flag = false;
				_LI7:
0B57	74A2	clr     LEDG[0].1
				;284			if(ChargIngFlag)    	
				_L51:
0B58	4721	mov     a, maiFlagB[0]
0B59	40DB	mov     ra, a
0B5A	0F40	mov     a, 40H
0B5B	46DB	andm    a, ra
0B5C	50DB	sz      ra
0B5D	6B5F	jmp     _LI8
0B5E	6B60	jmp     _L52
				;285				BATLow3p5Flag = false;
				_LI8:
0B5F	74A2	clr     LEDG[0].1
				;286			TimesCnt = 0;	
				_L52:
0B60	5F57	clr     TimesCnt[0]
				;287	    }
				;288	    if(k1 < FULL_DOWN_VALU)						//				_L50:
0B61	4753	mov     a, k1[0]
0B62	40DB	mov     ra, a
0B63	4754	mov     a, k1[1]
0B64	40DC	mov     rb, a
0B65	0F0D	mov     a, DH
0B66	425B	sub     a, ra
0B67	0F0A	mov     a, AH
0B68	525C	sbc     a, rb
0B69	380A	snz     C
0B6A	6B7D	jmp     _L53
				;289	    {
				;290	    	TimesFullDnCnt++;
0B6B	4758	mov     a, TimesFullDnCnt[0]
0B6C	40DB	mov     ra, a
0B6D	54DB	inc     ra
0B6E	475B	mov     a, ra
0B6F	40D8	mov     TimesFullDnCnt[0], a
				;291	    	if(TimesFullDnCnt >= 20)	
0B70	4758	mov     a, TimesFullDnCnt[0]
0B71	40DB	mov     ra, a
0B72	0F13	mov     a, 13H
0B73	425B	sub     a, ra
0B74	3C0A	sz      C
0B75	6B7D	jmp     _L53
				;292	    	{
				;293	 	    	if(!ChargIngFlag)
0B76	4721	mov     a, maiFlagB[0]
0B77	40DB	mov     ra, a
0B78	0F40	mov     a, 40H
0B79	46DB	andm    a, ra
0B7A	50DB	sz      ra
0B7B	6B7D	jmp     _L53
				;294		    	{
				;295					ChargeFullFlag = false;
0B7C	7423	clr     LEDH[0].0
				;296		    	}   		
				;297	    	}
				;298	    }
				;299	    if((k1 > FULL_BAT_VALU))					//				_L53:
0B7D	4753	mov     a, k1[0]
0B7E	40DB	mov     ra, a
0B7F	4754	mov     a, k1[1]
0B80	40DC	mov     rb, a
0B81	0FFC	mov     a, FCH
0B82	425B	sub     a, ra
0B83	0F09	mov     a, 9H
0B84	525C	sbc     a, rb
0B85	3C0A	sz      C
0B86	6BA2	jmp     _L54
				;300	    {
				;301	    	TimesFullCnt++;
0B87	4759	mov     a, TimesFullCnt[0]
0B88	40DB	mov     ra, a
0B89	54DB	inc     ra
0B8A	475B	mov     a, ra
0B8B	40D9	mov     TimesFullCnt[0], a
				;302	    	if(TimesFullCnt >= 20)					//0B8C	4759	mov     a, TimesFullCnt[0]
0B8D	40DB	mov     ra, a
0B8E	0F13	mov     a, 13H
0B8F	425B	sub     a, ra
0B90	3C0A	sz      C
0B91	6BA4	jmp     _L37
				;303	    	{			
				;304		    	if(!BATUp4p1Flag)					//0B92	4722	mov     a, LEDG[0]
0B93	40DB	mov     ra, a
0B94	0F04	mov     a, 4H
0B95	46DB	andm    a, ra
0B96	50DB	sz      ra
0B97	6B99	jmp     _L56
				;305		    	{
				;306		    		BATChargeFullCnt = 0;
0B98	5F3C	clr     BATChargeFullCnt[0]
				;307		    	}
				;308		    	if(ChargIngFlag)					//				_L56:
0B99	4721	mov     a, maiFlagB[0]
0B9A	40DB	mov     ra, a
0B9B	0F40	mov     a, 40H
0B9C	46DB	andm    a, ra
0B9D	50DB	sz      ra
0B9E	6BA0	jmp     _LI9
0B9F	6BA4	jmp     _L37
				;309		    	{
				;310					BATUp4p1Flag = true;
				_LI9:
0BA0	7122	set     LEDG[0].2
0BA1	6BA4	jmp     _L37
				;311		    	}
				;312	    	}  	
				;313	    }
				;314	    else
				;315	    {
				;316			BATUp4p1Flag = false;
				_L54:
0BA2	7522	clr     LEDG[0].2
				;317			TimesFullCnt = 0;
0BA3	5F59	clr     TimesFullCnt[0]
				_L37:
0BA4	0003	ret
				;318	    }
				;319	}
				;320	
				;321	
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
				;5	typedef struct
				;6	{
				;7		u16 Min;
				;8		u16 Max;
				;9	} __TEMP;
				;10	extern unsigned int PWM_VLAUE;
				;11	extern unsigned int k;
				;12	extern unsigned int k2;
				;13	extern unsigned char adcsp_2;
				;14	extern unsigned char adcsele_2; 
				;15	/*****************************************************
				;16	***************  Out = 0;	**************************
				;17	***************  In = 1;	**************************
				;18	******************************************************/
				;19	
				;20	void InitSys(void)		//   OUT = 0     IN = 1
				;21	{
				;22	// System clock setting
				;23		_smod = 0b11100001;					// fsys=fH=8MHz; IDLE mode Disable
				_InitSys:
				_InitSys:
				@dummy .SECTION 'CODE'
014F	0FE1	mov     a, E1H
0150	008B	mov     SMOD, a
				;24		// Watchdog Timer Setting  
				;25		_wdtc = 0b01010101;					// set WDT Timeout period= 2^16/fsub=2^16/32.768kHz=2sec; Enable WDT
0151	0F55	mov     a, 55H
0152	009A	mov     WDTC, a
				;26	    _lvrc = 0b00110011; //2.55V
0153	0F33	mov     a, 33H
0154	009D	mov     LVRC, a
				;27	    _cpc = 0x08;
0155	0F08	mov     a, 8H
0156	00BE	mov     CPC, a
				;28	/****** buzzer ***************/    
				;29	    _pcc0 = 0;
0157	3441	clr     PCC0
				;30	    _pcpu0 = 1;
0158	3042	set     PCPU0
				;31	    Buzz_OFF;
0159	3440	clr     PC0
				;32	//*********** LED_IO *********************//    
				;33	    _pcc1 = 0;
015A	34C1	clr     PCC1
				;34	    _pcpu1 = 1;
015B	30C2	set     PCPU1
				;35	    _pcc2 = 0;
015C	3541	clr     PCC2
				;36	    _pcpu2 = 1;
015D	3142	set     PCPU2
				;37	    _pac1 = 0;
015E	3495	clr     PAC1
				;38	    _papu1 = 1;
015F	3096	set     PAPU1
				;39	    _pac2 = 0;
0160	3515	clr     PAC2
				;40	    _papu2 = 1;
0161	3116	set     PAPU2
				;41		LED_WHITE_2_OFF;	
0162	3114	set     PA2
				;42		COM1_OUTPUT;
0163	34C1	clr     PCC1
0164	30C2	set     PCPU1
				;43		COM2_OUTPUT;
0165	3541	clr     PCC2
0166	3142	set     PCPU2
				;44		COM3_OUTPUT;
0167	3495	clr     PAC1
0168	3096	set     PAPU1
				;45	    _pac7 = 0;
0169	3795	clr     PAC7
				;46	    _papu7 = 1;
016A	3396	set     PAPU7
				;47		LED_Breathe_OFF;			
016B	3394	set     PA7
				;48	/********** Read Bat_status **************************************/
				;49		_pbc0 = 1;      
016C	3026	set     PBC0
				;50	    _pbpu0 = 0;	//016D	3427	clr     PBPU0
				;51	    /*Bat_Status = Bat_Satiation;*/
				;52	/************ 				;53	    _pac5 = 0;
016E	3695	clr     PAC5
				;54	    _papu5 = 1;
016F	3296	set     PAPU5
				;55		MOTOR_OFF;	
0170	3694	clr     PA5
				;56		
				;57		_pac4 = 1;
0171	3215	set     PAC4
				;58		_papu5 = 0;
0172	3696	clr     PAPU5
				;59	    //******** Battery_AN5 ***************/
				;60	    _acerl = 0;
0173	1F24	clr     ACERL
				;61	    _acerl |= 0b00101100;	//********* PA4 && PA6 && PB2 = AD0174	0724	mov     a, ACERL
0175	40DB	mov     ra, a
0176	0F2C	mov     a, 2CH
0177	45DB	orm     a, ra
0178	475B	mov     a, ra
0179	00A4	mov     ACERL, a
				;62	    _adcr0 = ADC_NTC;		//	011017A	0F12	mov     a, 12H
017B	00A2	mov     ADCR0, a
				;63	    _adcr1 = 0x06;			//  110017C	0F06	mov     a, 6H
017D	00A3	mov     ADCR1, a
				;64	    STAR_ADC();
017E	37A2	clr     START
017F	33A2	set     START
0180	37A2	clr     START
				;65	/************** Open_Out_5V *****************************************/
				;66		_pbc1 = 0;      
0181	34A6	clr     PBC1
				;67		_pbpu1 = 0;				//0182	34A7	clr     PBPU1
				;68		Out_5V_IO_Close;
0183	30A6	set     PBC1
				;69	/******************************************************************/
				;70	//adc init   
				;71	//********** KEY_IO  *****************************//
				;72		_pac3 = 1;
0184	3195	set     PAC3
				;73		_papu3 = 1;
0185	3196	set     PAPU3
				;74		_pawu3 = 1;
0186	3197	set     PAWU3
				;75		KEY = 1;
0187	3194	set     PA3
				;76	//*********** Heat_Wire ***********************************//    
				;77		_pbc2 = 0;
0188	3526	clr     PBC2
				;78		_pbpu2 = 1;
0189	3127	set     PBPU2
				;79		Heat_Wire_OFF;	  
018A	3414	clr     PA0
018B	0003	ret
				;80	}
				;81	
				;82	void VarInit(void)
				;83	{
				;84		Forward_Value = 0;
				_VarInit:
				_VarInit:
018C	74A0	clr     maiFlagA[0].1
				;85		Forward_Value_Flag = 0;
018D	7421	clr     maiFlagB[0].0
				;86		Double_Click_Value = 0;	
018E	75A0	clr     maiFlagA[0].3
				;87		Double_Click_Value_Flag = 0;
018F	74A1	clr     maiFlagB[0].1
				;88		Key_Forward_Long_val = 0;
0190	7620	clr     maiFlagA[0].4
				;89		Key_Forward_Long_val_Flag = 0;
0191	7521	clr     maiFlagB[0].2
				;90		TempDirDnFlag = 0;
0192	77A0	clr     maiFlagA[0].7
				;91		WorkMode = READY_MODE;
0193	5F33	clr     WorkMode[0]
				;92		
				;93		Breathe_Flag = 0;
0194	7422	clr     LEDG[0].0
				;94		Buzzer.Times = 0;
0195	5F25	clr     Buzzer[0]
				;95		Buzz_OFF;
0196	3440	clr     PC0
				;96		TaskKeyRdy = false;
0197	76A2	clr     LEDG[0].5
				;97		Out_5V_IO_Close;
0198	30A6	set     PBC1
				;98		k = 0;
0199	5F51	clr     k[0]
019A	5F52	clr     k[1]
				;99		k2 = 0;
019B	5F55	clr     k2[0]
019C	5F56	clr     k2[1]
				;100		
				;101		TempSta = DOWN_22;
019D	5F34	clr     TempSta[0]
				;102		Output5V.Times = 0;
019E	5F2A	clr     Output5V[0]
				;103		ChargIngFlag = false;
019F	7721	clr     maiFlagB[0].6
				;104		NormalWinterFlag = false;
01A0	7622	clr     LEDG[0].4
				;105		ntc_val = 0;
01A1	5F35	clr     ntc_val[0]
01A2	5F36	clr     ntc_val[1]
				;106		Open5V200msCnt = 0;	
01A3	5F37	clr     Open5V200msCnt[0]
01A4	5F38	clr     Open5V200msCnt[1]
				;107		direc_flag = true;			//01A5	7320	set     maiFlagA[0].6
				;108		PreHeatFlag = false;		//01A6	7420	clr     maiFlagA[0].0
				;109		SleepCnt = 0;
01A7	5F24	clr     SleepCnt[0]
				;110		SumOfEdge = 0;
01A8	5F3D	clr     SumOfEdge[0]
				;111		LEDSta[LED_RED_INDEX] = 0;
01A9	5F2F	clr     LEDSta[0]
				;112		LEDSta[LED_BLUE_INDEX] = 0;
01AA	5F30	clr     LEDSta[1]
				;113		LEDSta[LED_WHITE_INDEX] = 0;
01AB	5F31	clr     LEDSta[2]
				;114		LEDSta[LED_GREEN_INDEX] = 0;
01AC	5F32	clr     LEDSta[3]
				;115				
				;116		BatSta = BATTRY_NORMAL;		//01AD	5F3E	clr     BatSta[0]
				;117		BATLow3p5Flag = false;		//01AE	74A2	clr     LEDG[0].1
				;118		ChargeFullFlag = false;		//01AF	7423	clr     LEDH[0].0
				;119		LowBatShutDnSCnt = 0;		//01B0	5F3B	clr     LowBatShutDnSCnt[0]
				;120		BATChargeFullCnt = 0;		//01B1	5F3C	clr     BATChargeFullCnt[0]
				;121	
				;122		IntCnt = 0;
01B2	5F3F	clr     IntCnt[0]
01B3	0003	ret
				;123	}
				;file E:\				;1	/**************************************************************************/
				;2	
				;3	#include "base.h"
				;4	#define EXTERN extern
				;5	#include "Var.h"
				;6	
				;7	/**********************************/
				;8	volatile static unsigned char Forward_Buf __attribute__ ((at(0x1dd)));
				;9	volatile static unsigned char Pre_Forward_Buf __attribute__ ((at(0x1de)));
				;10	volatile static unsigned char Key_Forward_Time __attribute__ ((at(0x1df)));
				;11	volatile static unsigned int Key_Forward_Delay __attribute__ ((at(0x1e0)));
				;12	volatile static unsigned int Key_Forward_Ms __attribute__ ((at(0x1e2)));
				;13	volatile static unsigned char Key_Forward_Mode __attribute__ ((at(0x1e4)));
				;14	volatile static unsigned int Double_Click_timer __attribute__ ((at(0x1e5)));
				;15	volatile static unsigned char Change_Key_Mode __attribute__ ((at(0x1e7)));
				;16	volatile static unsigned int Key_LongPre_timer __attribute__ ((at(0x1e8)));
				;17	
				;18	/*********************************/
				;19	/**********************************/
				;20	extern unsigned char Key_ms;
				;21	
				;22	/*******************************/
				;23	#define KEY_LONG	150
				;24	#define MAX_EFFECT_TIME	200	//2S
				;25	/********* 				;26	void TaskKey(void)
				;27	{
				;28		if(TaskKeyRdy)
				_TaskKey:
				_TaskKey:
03FD	4722	mov     a, LEDG[0]
03FE	40DB	mov     ra, a
03FF	0F20	mov     a, 20H
0400	46DB	andm    a, ra
0401	50DB	sz      ra
0402	2C04	jmp     _LI1
0403	2D77	jmp     _L2
				;29		{
				;30			TaskKeyRdy = false;	
				_LI1:
0404	76A2	clr     LEDG[0].5
				;31	/************ Forward Key *************************************************/		
				;32			if(KEY == 0) 
0405	0714	mov     a, PA
0406	40DB	mov     ra, a
0407	0F08	mov     a, 8H
0408	46DB	andm    a, ra
0409	50DB	sz      ra
040A	2C14	jmp     _L3
				;33			{
				;34				Forward_Buf=1;	
040B	0FDD	mov     a, DDH
040C	0083	mov     MP1, a
040D	0F01	mov     a, 1H
040E	0081	mov     MP0, a
040F	0701	mov     a, MP0
0410	0084	mov     BP, a
0411	0F01	mov     a, 1H
0412	0082	mov     [02H], a
0413	2C1C	jmp     _L4
				;35			}
				;36			else 
				;37			{
				;38				Forward_Buf = 0;		
				_L3:
0414	0FDD	mov     a, DDH
0415	0083	mov     MP1, a
0416	0F01	mov     a, 1H
0417	0081	mov     MP0, a
0418	0701	mov     a, MP0
0419	0084	mov     BP, a
041A	0F00	mov     a, 0H
041B	0082	mov     [02H], a
				;39			}
				;40			/*********** 				;41			if(Forward_Buf != Pre_Forward_Buf)
				_L4:
041C	0FDD	mov     a, DDH
041D	0083	mov     MP1, a
041E	0F01	mov     a, 1H
041F	0081	mov     MP0, a
0420	0701	mov     a, MP0
0421	0084	mov     BP, a
0422	0702	mov     a, [02H]
0423	40DC	mov     rb, a
0424	0FDE	mov     a, DEH
0425	0083	mov     MP1, a
0426	0F01	mov     a, 1H
0427	0081	mov     MP0, a
0428	0701	mov     a, MP0
0429	0084	mov     BP, a
042A	0702	mov     a, [02H]
042B	40DB	mov     ra, a
042C	475C	mov     a, rb
042D	425B	sub     a, ra
042E	3D0A	sz      Z
042F	2C80	jmp     _L5
				;42			{
				;43				Key_Forward_Time++;
0430	0FDF	mov     a, DFH
0431	0083	mov     MP1, a
0432	0F01	mov     a, 1H
0433	0081	mov     MP0, a
0434	0701	mov     a, MP0
0435	0084	mov     BP, a
0436	0702	mov     a, [02H]
0437	40DB	mov     ra, a
0438	54DB	inc     ra
0439	0FDF	mov     a, DFH
043A	0083	mov     MP1, a
043B	0F01	mov     a, 1H
043C	0081	mov     MP0, a
043D	0701	mov     a, MP0
043E	0084	mov     BP, a
043F	475B	mov     a, ra
0440	0082	mov     [02H], a
				;44				if( Key_Forward_Time > 5)
0441	0FDF	mov     a, DFH
0442	0083	mov     MP1, a
0443	0F01	mov     a, 1H
0444	0081	mov     MP0, a
0445	0701	mov     a, MP0
0446	0084	mov     BP, a
0447	0702	mov     a, [02H]
0448	40DB	mov     ra, a
0449	0F05	mov     a, 5H
044A	425B	sub     a, ra
044B	3C0A	sz      C
044C	2D77	jmp     _L2
				;45				{
				;46					if((Forward_Buf == 0)&&(Key_longPre_cut_click == 0))
044D	0FDD	mov     a, DDH
044E	0083	mov     MP1, a
044F	0F01	mov     a, 1H
0450	0081	mov     MP0, a
0451	0701	mov     a, MP0
0452	0084	mov     BP, a
0453	0702	mov     a, [02H]
0454	40DB	mov     ra, a
0455	50DB	sz      ra
0456	2C6F	jmp     _L7
0457	4720	mov     a, maiFlagA[0]
0458	40DB	mov     ra, a
0459	0F04	mov     a, 4H
045A	46DB	andm    a, ra
045B	50DB	sz      ra
045C	2C6F	jmp     _L7
				;47					{	
				;48						Change_Key_flag = 1;														
045D	72A0	set     maiFlagA[0].5
				;49						Change_Key_Mode++;
045E	0FE7	mov     a, E7H
045F	0083	mov     MP1, a
0460	0F01	mov     a, 1H
0461	0081	mov     MP0, a
0462	0701	mov     a, MP0
0463	0084	mov     BP, a
0464	0702	mov     a, [02H]
0465	40DB	mov     ra, a
0466	54DB	inc     ra
0467	0FE7	mov     a, E7H
0468	0083	mov     MP1, a
0469	0F01	mov     a, 1H
046A	0081	mov     MP0, a
046B	0701	mov     a, MP0
046C	0084	mov     BP, a
046D	475B	mov     a, ra
046E	0082	mov     [02H], a
				;50											
				;51					}
				;52				/********************************************************************/	
				;53					Pre_Forward_Buf = Forward_Buf;
				_L7:
046F	0FDD	mov     a, DDH
0470	0083	mov     MP1, a
0471	0F01	mov     a, 1H
0472	0081	mov     MP0, a
0473	0701	mov     a, MP0
0474	0084	mov     BP, a
0475	0702	mov     a, [02H]
0476	40DB	mov     ra, a
0477	0FDE	mov     a, DEH
0478	0083	mov     MP1, a
0479	0F01	mov     a, 1H
047A	0081	mov     MP0, a
047B	0701	mov     a, MP0
047C	0084	mov     BP, a
047D	475B	mov     a, ra
047E	0082	mov     [02H], a
047F	2D77	jmp     _L2
				;54				}
				;55			}
				;56			else 
				;57			{
				;58				/********************* Double_Click *******************************************/
				;59				if((Double_Click_timer > MAX_EFFECT_TIME)) 
				_L5:
0480	0FE5	mov     a, E5H
0481	0083	mov     MP1, a
0482	0F01	mov     a, 1H
0483	0081	mov     MP0, a
0484	0701	mov     a, MP0
0485	0084	mov     BP, a
0486	0702	mov     a, [02H]
0487	40DB	mov     ra, a
0488	1483	inc     MP1
0489	0702	mov     a, [02H]
048A	40DC	mov     rb, a
048B	0FC8	mov     a, C8H
048C	425B	sub     a, ra
048D	0F00	mov     a, 0H
048E	525C	sbc     a, rb
048F	3C0A	sz      C
0490	2C92	jmp     _L8
				;60						Change_Key_flag = 0;
0491	76A0	clr     maiFlagA[0].5
				;61				if((Change_Key_flag == 1)&&(Double_Click_timer <= MAX_EFFECT_TIME))		
				_L8:
0492	4720	mov     a, maiFlagA[0]
0493	40DB	mov     ra, a
0494	0F20	mov     a, 20H
0495	46DB	andm    a, ra
0496	50DB	sz      ra
0497	2C99	jmp     _LI2
0498	2CE5	jmp     _L9
				_LI2:
0499	0FE5	mov     a, E5H
049A	0083	mov     MP1, a
049B	0F01	mov     a, 1H
049C	0081	mov     MP0, a
049D	0701	mov     a, MP0
049E	0084	mov     BP, a
049F	0702	mov     a, [02H]
04A0	40DB	mov     ra, a
04A1	1483	inc     MP1
04A2	0702	mov     a, [02H]
04A3	40DC	mov     rb, a
04A4	0FC8	mov     a, C8H
04A5	425B	sub     a, ra
04A6	0F00	mov     a, 0H
04A7	525C	sbc     a, rb
04A8	380A	snz     C
04A9	2CE5	jmp     _L9
				;62				{
				;63					Double_Click_timer++;
04AA	0FE5	mov     a, E5H
04AB	0083	mov     MP1, a
04AC	0F01	mov     a, 1H
04AD	0081	mov     MP0, a
04AE	0701	mov     a, MP0
04AF	0084	mov     BP, a
04B0	0702	mov     a, [02H]
04B1	40DB	mov     ra, a
04B2	1483	inc     MP1
04B3	0702	mov     a, [02H]
04B4	40DC	mov     rb, a
04B5	54DB	inc     ra
04B6	3D0A	sz      Z
04B7	54DC	inc     rb
04B8	0FE5	mov     a, E5H
04B9	0083	mov     MP1, a
04BA	0F01	mov     a, 1H
04BB	0081	mov     MP0, a
04BC	0701	mov     a, MP0
04BD	0084	mov     BP, a
04BE	475B	mov     a, ra
04BF	0082	mov     [02H], a
04C0	1483	inc     MP1
04C1	475C	mov     a, rb
04C2	0082	mov     [02H], a
				;64					if(Change_Key_Mode == 3)
04C3	0FE7	mov     a, E7H
04C4	0083	mov     MP1, a
04C5	0F01	mov     a, 1H
04C6	0081	mov     MP0, a
04C7	0701	mov     a, MP0
04C8	0084	mov     BP, a
04C9	0702	mov     a, [02H]
04CA	40DB	mov     ra, a
04CB	475B	mov     a, ra
04CC	0A03	sub     a, 3H
04CD	390A	snz     Z
04CE	2CE4	jmp     _L10
04E3	2CF9	jmp     _L11
				_L10:
04E4	2CF9	jmp     _L11
				;65					{
				;66						Change_Key_flag = 0;
04CF	76A0	clr     maiFlagA[0].5
				;67						Change_Key_Mode = 0;
04D0	0FE7	mov     a, E7H
04D1	0083	mov     MP1, a
04D2	0F01	mov     a, 1H
04D3	0081	mov     MP0, a
04D4	0701	mov     a, MP0
04D5	0084	mov     BP, a
04D6	0F00	mov     a, 0H
04D7	0082	mov     [02H], a
				;68						Double_Click_timer = 0;
04D8	0FE5	mov     a, E5H
04D9	0083	mov     MP1, a
04DA	0F01	mov     a, 1H
04DB	0081	mov     MP0, a
04DC	0701	mov     a, MP0
04DD	0084	mov     BP, a
04DE	1F02	clr     [02H]
04DF	1483	inc     MP1
04E0	1F02	clr     [02H]
				;69						Forward_Value = 0;
04E1	74A0	clr     maiFlagA[0].1
				;70						Double_Click_Value = 1;	
04E2	71A0	set     maiFlagA[0].3
				;71					}
				;72				}
				;73				else
				;74				{
				;75					Change_Key_flag = 0;
				_L9:
04E5	76A0	clr     maiFlagA[0].5
				;76					Change_Key_Mode = 0;
04E6	0FE7	mov     a, E7H
04E7	0083	mov     MP1, a
04E8	0F01	mov     a, 1H
04E9	0081	mov     MP0, a
04EA	0701	mov     a, MP0
04EB	0084	mov     BP, a
04EC	0F00	mov     a, 0H
04ED	0082	mov     [02H], a
				;77					Double_Click_timer = 0;
04EE	0FE5	mov     a, E5H
04EF	0083	mov     MP1, a
04F0	0F01	mov     a, 1H
04F1	0081	mov     MP0, a
04F2	0701	mov     a, MP0
04F3	0084	mov     BP, a
04F4	1F02	clr     [02H]
04F5	1483	inc     MP1
04F6	1F02	clr     [02H]
				;78					Forward_Value = 0;
04F7	74A0	clr     maiFlagA[0].1
				;79					Double_Click_Value = 0;
04F8	75A0	clr     maiFlagA[0].3
				;80				}
				;81				/*******************************************************************************************/			
				;82			  /********** 				;83				Key_Forward_Time = 0;
				_L11:
04F9	0FDF	mov     a, DFH
04FA	0083	mov     MP1, a
04FB	0F01	mov     a, 1H
04FC	0081	mov     MP0, a
04FD	0701	mov     a, MP0
04FE	0084	mov     BP, a
04FF	0F00	mov     a, 0H
0500	0082	mov     [02H], a
				;84				if(Forward_Buf == 1)
0501	0FDD	mov     a, DDH
0502	0083	mov     MP1, a
0503	0F01	mov     a, 1H
0504	0081	mov     MP0, a
0505	0701	mov     a, MP0
0506	0084	mov     BP, a
0507	0702	mov     a, [02H]
0508	40DB	mov     ra, a
0509	575B	sdza    ra
050A	2D64	jmp     _L12
				;85				{
				;86					if(Key_Forward_Delay <= KEY_LONG)	// 3s
050B	0FE0	mov     a, E0H
050C	0083	mov     MP1, a
050D	0F01	mov     a, 1H
050E	0081	mov     MP0, a
050F	0701	mov     a, MP0
0510	0084	mov     BP, a
0511	0702	mov     a, [02H]
0512	40DB	mov     ra, a
0513	1483	inc     MP1
0514	0702	mov     a, [02H]
0515	40DC	mov     rb, a
0516	0F96	mov     a, 96H
0517	425B	sub     a, ra
0518	0F00	mov     a, 0H
0519	525C	sbc     a, rb
051A	380A	snz     C
051B	2D4A	jmp     _L13
				;87					{
				;88						Key_Forward_Delay++;
051C	0FE0	mov     a, E0H
051D	0083	mov     MP1, a
051E	0F01	mov     a, 1H
051F	0081	mov     MP0, a
0520	0701	mov     a, MP0
0521	0084	mov     BP, a
0522	0702	mov     a, [02H]
0523	40DB	mov     ra, a
0524	1483	inc     MP1
0525	0702	mov     a, [02H]
0526	40DC	mov     rb, a
0527	54DB	inc     ra
0528	3D0A	sz      Z
0529	54DC	inc     rb
052A	0FE0	mov     a, E0H
052B	0083	mov     MP1, a
052C	0F01	mov     a, 1H
052D	0081	mov     MP0, a
052E	0701	mov     a, MP0
052F	0084	mov     BP, a
0530	475B	mov     a, ra
0531	0082	mov     [02H], a
0532	1483	inc     MP1
0533	475C	mov     a, rb
0534	0082	mov     [02H], a
				;89						if(Key_Forward_Delay == KEY_LONG)
0535	0FE0	mov     a, E0H
0536	0083	mov     MP1, a
0537	0F01	mov     a, 1H
0538	0081	mov     MP0, a
0539	0701	mov     a, MP0
053A	0084	mov     BP, a
053B	0702	mov     a, [02H]
053C	40DB	mov     ra, a
053D	1483	inc     MP1
053E	0702	mov     a, [02H]
053F	40DC	mov     rb, a
0540	475B	mov     a, ra
0541	0C96	xor     a, 96H
0542	455C	or      a, rb
0543	390A	snz     Z
0544	2D77	jmp     _L2
				;90						{
				;91							Key_longPre_cut_click = 1;
0545	7120	set     maiFlagA[0].2
				;92							Double_Click_Value = 0;
0546	75A0	clr     maiFlagA[0].3
				;93							Forward_Value = 0;
0547	74A0	clr     maiFlagA[0].1
				;94							Key_Forward_Long_val = 1;	
0548	7220	set     maiFlagA[0].4
0549	2D77	jmp     _L2
				;95						}
				;96					}				
				;97					/******************************/
				;98					else Key_Forward_Ms++;
				_L13:
054A	0FE2	mov     a, E2H
054B	0083	mov     MP1, a
054C	0F01	mov     a, 1H
054D	0081	mov     MP0, a
054E	0701	mov     a, MP0
054F	0084	mov     BP, a
0550	0702	mov     a, [02H]
0551	40DB	mov     ra, a
0552	1483	inc     MP1
0553	0702	mov     a, [02H]
0554	40DC	mov     rb, a
0555	54DB	inc     ra
0556	3D0A	sz      Z
0557	54DC	inc     rb
0558	0FE2	mov     a, E2H
0559	0083	mov     MP1, a
055A	0F01	mov     a, 1H
055B	0081	mov     MP0, a
055C	0701	mov     a, MP0
055D	0084	mov     BP, a
055E	475B	mov     a, ra
055F	0082	mov     [02H], a
0560	1483	inc     MP1
0561	475C	mov     a, rb
0562	0082	mov     [02H], a
0563	2D77	jmp     _L2
				;99				}
				;100				else 
				;101				{
				;102					Key_longPre_cut_click = 0;
				_L12:
0564	7520	clr     maiFlagA[0].2
				;103					Key_Forward_Ms = 0;
0565	0FE2	mov     a, E2H
0566	0083	mov     MP1, a
0567	0F01	mov     a, 1H
0568	0081	mov     MP0, a
0569	0701	mov     a, MP0
056A	0084	mov     BP, a
056B	1F02	clr     [02H]
056C	1483	inc     MP1
056D	1F02	clr     [02H]
				;104					Key_Forward_Delay = 0;
056E	0FE0	mov     a, E0H
056F	0083	mov     MP1, a
0570	0F01	mov     a, 1H
0571	0081	mov     MP0, a
0572	0701	mov     a, MP0
0573	0084	mov     BP, a
0574	1F02	clr     [02H]
0575	1483	inc     MP1
0576	1F02	clr     [02H]
				;105				}
				;106			}					
				;107	/*********************************************************************/		
				;108		}
				;109	/************ 				;110	/************ One_Press *************************************/
				;111		if( Forward_Value == 1)  // Click
				_L2:
0577	4720	mov     a, maiFlagA[0]
0578	40DB	mov     ra, a
0579	0F02	mov     a, 2H
057A	46DB	andm    a, ra
057B	50DB	sz      ra
057C	2D7E	jmp     _LI3
057D	2D83	jmp     _L16
				;112		 {
				;113		 	Forward_Value = 0;
				_LI3:
057E	74A0	clr     maiFlagA[0].1
				;114		 	Double_Click_Value_Flag = 0;
057F	74A1	clr     maiFlagB[0].1
				;115			Key_Forward_Long_val_Flag = 0;
0580	7521	clr     maiFlagB[0].2
				;116			Forward_Value_Flag = 1;
0581	7021	set     maiFlagB[0].0
0582	2D9A	jmp     _L1
				;117		 }
				;118		 else
				;119	/***********************************************************/
				;120		if( Key_Forward_Long_val == 1)  // Press_Long
				_L16:
0583	4720	mov     a, maiFlagA[0]
0584	40DB	mov     ra, a
0585	0F10	mov     a, 10H
0586	46DB	andm    a, ra
0587	50DB	sz      ra
0588	2D8A	jmp     _LI4
0589	2D8F	jmp     _L18
				;121		 {		
				;122			Key_Forward_Long_val = 0;
				_LI4:
058A	7620	clr     maiFlagA[0].4
				;123			Forward_Value_Flag = 0;
058B	7421	clr     maiFlagB[0].0
				;124			Double_Click_Value_Flag = 0;
058C	74A1	clr     maiFlagB[0].1
				;125			Key_Forward_Long_val_Flag = 1;
058D	7121	set     maiFlagB[0].2
058E	2D9A	jmp     _L1
				;126		 }
				;127		 else
				;128	/************** Double_Click ***********************************/
				;129		if(Double_Click_Value == 1)		// Double Click
				_L18:
058F	4720	mov     a, maiFlagA[0]
0590	40DB	mov     ra, a
0591	0F08	mov     a, 8H
0592	46DB	andm    a, ra
0593	50DB	sz      ra
0594	2D96	jmp     _LI5
0595	2D9A	jmp     _L1
				;130		{
				;131			Double_Click_Value = 0;
				_LI5:
0596	75A0	clr     maiFlagA[0].3
				;132			Forward_Value_Flag = 0;
0597	7421	clr     maiFlagB[0].0
				;133			Key_Forward_Long_val_Flag = 0;
0598	7521	clr     maiFlagB[0].2
				;134			Double_Click_Value_Flag = 1;		
0599	70A1	set     maiFlagB[0].1
				_L1:
059A	0003	ret
				;135		}	
				;136	//	if(Bat_Power__flag == 1)
				;137	//	{
				;138	//		Key_Forward_Long_val = 0;
				;139	//	}
				;140	}
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	/************* BUZZ 				;6	
				;7	void Open5V(void)
				;8	{
				;9		Output5V.Times = 1;
				_Open5V:
				_Open5V:
059B	0F01	mov     a, 1H
059C	40AA	mov     Output5V[0], a
				;10		Output5V.OnCnt = OPEN5V_ON_TIME;
059D	0F3C	mov     a, 3CH
059E	40AB	mov     Output5V[1], a
059F	5F2C	clr     Output5V[2]
				;11		Output5V.OffCnt = 0;	
05A0	5F2D	clr     Output5V[3]
05A1	5F2E	clr     Output5V[4]
05A2	0003	ret
				;12	}
				;13	
				;14	void Close5V(void)
				;15	{
				;16		Output5V.Times = 2;
				_Close5V:
				_Close5V:
05A3	0F02	mov     a, 2H
05A4	40AA	mov     Output5V[0], a
				;17		Output5V.OnCnt = OPEN5V_ON_TIME;
05A5	0F3C	mov     a, 3CH
05A6	40AB	mov     Output5V[1], a
05A7	5F2C	clr     Output5V[2]
				;18		Output5V.OffCnt = OPEN5V_OFF_TIME;	
05A8	0F3C	mov     a, 3CH
05A9	40AD	mov     Output5V[3], a
05AA	5F2E	clr     Output5V[4]
05AB	0003	ret
				;19	}
				;20	
				;21	/*************************************************************/
				;22	void KeyBuzzer(char Buzz_1)	
				;23	{
				_KeyBuzzer:
				_KeyBuzzer:
05AC	40F8	mov     Buzz_1[0], a
				;24		switch(Buzz_1)
05AD	4778	mov     a, Buzz_1[0]
05AE	40DB	mov     ra, a
05AF	5F5C	clr     rb
05B0	3F85	sz      ACC.7
05B1	5FDC	set     rb
05B2	475B	mov     a, ra
05B3	0C01	xor     a, 1H
05B4	455C	or      a, rb
05B5	3D0A	sz      Z
05B6	2DC7	jmp     L05C7
05B7	475B	mov     a, ra
05B8	0C02	xor     a, 2H
05B9	455C	or      a, rb
05BA	3D0A	sz      Z
05BB	2DD0	jmp     L05D0
05BC	475B	mov     a, ra
05BD	0C03	xor     a, 3H
05BE	455C	or      a, rb
05BF	3D0A	sz      Z
05C0	2DD9	jmp     L05D9
05C1	475B	mov     a, ra
05C2	0C04	xor     a, 4H
05C3	455C	or      a, rb
05C4	3D0A	sz      Z
05C5	2DE2	jmp     L05E2
				;25		{		
				;26			case 1:		//  				;27				Buzzer.Times = 1;
				L05C7:
05C7	0F01	mov     a, 1H
05C8	40A5	mov     Buzzer[0], a
				;28				Buzzer.OnCnt = 15;
05C9	0F0F	mov     a, FH
05CA	40A6	mov     Buzzer[1], a
05CB	5F27	clr     Buzzer[2]
				;29				Buzzer.OffCnt = 8;
05CC	0F08	mov     a, 8H
05CD	40A8	mov     Buzzer[3], a
05CE	5F29	clr     Buzzer[4]
				;30				break;
05CF	2DEA	jmp     L05EA
				;31			case 2:		// 				;32				Buzzer.Times = 2;
				L05D0:
05D0	0F02	mov     a, 2H
05D1	40A5	mov     Buzzer[0], a
				;33				Buzzer.OnCnt = 13;
05D2	0F0D	mov     a, DH
05D3	40A6	mov     Buzzer[1], a
05D4	5F27	clr     Buzzer[2]
				;34				Buzzer.OffCnt = 8;
05D5	0F08	mov     a, 8H
05D6	40A8	mov     Buzzer[3], a
05D7	5F29	clr     Buzzer[4]
				;35				break;
05D8	2DEA	jmp     L05EA
				;36			case 3:		// 				;37				Buzzer.Times = 1;
				L05D9:
05D9	0F01	mov     a, 1H
05DA	40A5	mov     Buzzer[0], a
				;38				Buzzer.OnCnt = 20;
05DB	0F14	mov     a, 14H
05DC	40A6	mov     Buzzer[1], a
05DD	5F27	clr     Buzzer[2]
				;39				Buzzer.OffCnt = 10;
05DE	0F0A	mov     a, AH
05DF	40A8	mov     Buzzer[3], a
05E0	5F29	clr     Buzzer[4]
				;40				break;
05E1	2DEA	jmp     L05EA
				;41			case 4:		// 				;42				Buzzer.Times = 3;
				L05E2:
05E2	0F03	mov     a, 3H
05E3	40A5	mov     Buzzer[0], a
				;43				Buzzer.OnCnt = 10;
05E4	0F0A	mov     a, AH
05E5	40A6	mov     Buzzer[1], a
05E6	5F27	clr     Buzzer[2]
				;44				Buzzer.OffCnt = 8;
05E7	0F08	mov     a, 8H
05E8	40A8	mov     Buzzer[3], a
05E9	5F29	clr     Buzzer[4]
				;45				break;
				L05EA:
05EA	0003	ret
				;46			default:
				;47				
				;48				break;
05C6	2DEA	jmp     L05EA
				;49		}
				;50	}
				;51	
				;52	void TaskBuzzer(void)
				;53	{
				;54		if(TaskBuzzerRdy)
				_TaskBuzzer:
				_TaskBuzzer:
05EB	4722	mov     a, LEDG[0]
05EC	40DB	mov     ra, a
05ED	0F08	mov     a, 8H
05EE	46DB	andm    a, ra
05EF	50DB	sz      ra
05F0	2DF2	jmp     _LI1
05F1	2E82	jmp     _L10
				;55		{
				;56			TaskBuzzerRdy = false;
				_LI1:
05F2	75A2	clr     LEDG[0].3
				;57			if(Buzzer.Times > 0)	//05F3	4725	mov     a, Buzzer[0]
05F4	40DB	mov     ra, a
05F5	7FDB	sz      ra.7
05F6	2E39	jmp     _L12
05F7	50DB	sz      ra
05F8	2DFA	jmp     _LI2
05F9	2E39	jmp     _L12
				;58			{
				;59				if(Buzzer.OnCnt-- > 0)
				_LI2:
05FA	4726	mov     a, Buzzer[1]
05FB	40DB	mov     ra, a
05FC	4727	mov     a, Buzzer[2]
05FD	40DC	mov     rb, a
05FE	0FFF	mov     a, FFH
05FF	435B	add     a, ra
0600	40DD	mov     rc, a
0601	0FFF	mov     a, FFH
0602	535C	adc     a, rb
0603	40DE	mov     rd, a
0604	475D	mov     a, rc
0605	40A6	mov     Buzzer[1], a
0606	475E	mov     a, rd
0607	40A7	mov     Buzzer[2], a
0608	7FDC	sz      rb.7
0609	2E10	jmp     _L13
060A	475B	mov     a, ra
060B	455C	or      a, rb
060C	3D0A	sz      Z
060D	2E10	jmp     _L13
				;60				{
				;61					Buzz_ON;
060E	3040	set     PC0
060F	2E3A	jmp     _L16
				;62				}
				;63				else
				;64				{
				;65					if(Buzzer.OffCnt-- > 0)
				_L13:
0610	4728	mov     a, Buzzer[3]
0611	40DB	mov     ra, a
0612	4729	mov     a, Buzzer[4]
0613	40DC	mov     rb, a
0614	0FFF	mov     a, FFH
0615	435B	add     a, ra
0616	40DD	mov     rc, a
0617	0FFF	mov     a, FFH
0618	535C	adc     a, rb
0619	40DE	mov     rd, a
061A	475D	mov     a, rc
061B	40A8	mov     Buzzer[3], a
061C	475E	mov     a, rd
061D	40A9	mov     Buzzer[4], a
061E	7FDC	sz      rb.7
061F	2E26	jmp     _L15
0620	475B	mov     a, ra
0621	455C	or      a, rb
0622	3D0A	sz      Z
0623	2E26	jmp     _L15
				;66					{
				;67						Buzz_OFF;
0624	3440	clr     PC0
0625	2E3A	jmp     _L16
				;68					}
				;69					else
				;70					{
				;71						if(Buzzer.Times > 0)
				_L15:
0626	4725	mov     a, Buzzer[0]
0627	40DB	mov     ra, a
0628	7FDB	sz      ra.7
0629	2E3A	jmp     _L16
062A	50DB	sz      ra
062B	2E2D	jmp     _LI3
062C	2E3A	jmp     _L16
				;72						{
				;73							Buzzer.Times--;
				_LI3:
062D	4725	mov     a, Buzzer[0]
062E	40DB	mov     ra, a
062F	55DB	dec     ra
0630	475B	mov     a, ra
0631	40A5	mov     Buzzer[0], a
				;74							Buzzer.OnCnt = BUZZER_ON_TIME;
0632	0F0F	mov     a, FH
0633	40A6	mov     Buzzer[1], a
0634	5F27	clr     Buzzer[2]
				;75							Buzzer.OffCnt = BUZZER_OFF_TIME;
0635	0F08	mov     a, 8H
0636	40A8	mov     Buzzer[3], a
0637	5F29	clr     Buzzer[4]
0638	2E3A	jmp     _L16
				;76						}				
				;77					}
				;78				}		
				;79			}
				;80			else
				;81			{		
				;82				Buzz_OFF;
				_L12:
0639	3440	clr     PC0
				;83			}
				;84			
				;85			if(Output5V.Times > 0)	//5v				_L16:
063A	472A	mov     a, Output5V[0]
063B	40DB	mov     ra, a
063C	7FDB	sz      ra.7
063D	2E81	jmp     _L17
063E	50DB	sz      ra
063F	2E41	jmp     _LI4
0640	2E81	jmp     _L17
				;86			{
				;87				if(Output5V.OnCnt-- > 0)
				_LI4:
0641	472B	mov     a, Output5V[1]
0642	40DB	mov     ra, a
0643	472C	mov     a, Output5V[2]
0644	40DC	mov     rb, a
0645	0FFF	mov     a, FFH
0646	435B	add     a, ra
0647	40DD	mov     rc, a
0648	0FFF	mov     a, FFH
0649	535C	adc     a, rb
064A	40DE	mov     rd, a
064B	475D	mov     a, rc
064C	40AB	mov     Output5V[1], a
064D	475E	mov     a, rd
064E	40AC	mov     Output5V[2], a
064F	7FDC	sz      rb.7
0650	2E58	jmp     _L18
0651	475B	mov     a, ra
0652	455C	or      a, rb
0653	3D0A	sz      Z
0654	2E58	jmp     _L18
				;88				{
				;89					Out_5V_IO_Open;
0655	34A6	clr     PBC1
0656	34A5	clr     PB1
0657	2E82	jmp     _L10
				;90				}
				;91				else
				;92				{
				;93					if(Output5V.OffCnt-- > 0)
				_L18:
0658	472D	mov     a, Output5V[3]
0659	40DB	mov     ra, a
065A	472E	mov     a, Output5V[4]
065B	40DC	mov     rb, a
065C	0FFF	mov     a, FFH
065D	435B	add     a, ra
065E	40DD	mov     rc, a
065F	0FFF	mov     a, FFH
0660	535C	adc     a, rb
0661	40DE	mov     rd, a
0662	475D	mov     a, rc
0663	40AD	mov     Output5V[3], a
0664	475E	mov     a, rd
0665	40AE	mov     Output5V[4], a
0666	7FDC	sz      rb.7
0667	2E6E	jmp     _L20
0668	475B	mov     a, ra
0669	455C	or      a, rb
066A	3D0A	sz      Z
066B	2E6E	jmp     _L20
				;94					{
				;95						Out_5V_IO_Close;
066C	30A6	set     PBC1
066D	2E82	jmp     _L10
				;96					}
				;97					else
				;98					{
				;99						if(Output5V.Times > 0)
				_L20:
066E	472A	mov     a, Output5V[0]
066F	40DB	mov     ra, a
0670	7FDB	sz      ra.7
0671	2E82	jmp     _L10
0672	50DB	sz      ra
0673	2E75	jmp     _LI5
0674	2E82	jmp     _L10
				;100						{
				;101							Output5V.Times--;
				_LI5:
0675	472A	mov     a, Output5V[0]
0676	40DB	mov     ra, a
0677	55DB	dec     ra
0678	475B	mov     a, ra
0679	40AA	mov     Output5V[0], a
				;102							Output5V.OnCnt = OPEN5V_ON_TIME;
067A	0F3C	mov     a, 3CH
067B	40AB	mov     Output5V[1], a
067C	5F2C	clr     Output5V[2]
				;103							Output5V.OffCnt = OPEN5V_OFF_TIME;
067D	0F3C	mov     a, 3CH
067E	40AD	mov     Output5V[3], a
067F	5F2E	clr     Output5V[4]
0680	2E82	jmp     _L10
				;104						}				
				;105					}
				;106				}		
				;107			}
				;108			else
				;109			{		
				;110				Out_5V_IO_Close;
				_L17:
0681	30A6	set     PBC1
				_L10:
0682	0003	ret
				;111			}			
				;112							
				;113		}
				;114	}
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	
				;6	void TaskBatOp(void)
				;7	{
				;8		if(TaskBatRdyFlag)
				_TaskBatOp:
				_TaskBatOp:
0BA5	4721	mov     a, maiFlagB[0]
0BA6	40DB	mov     ra, a
0BA7	0F80	mov     a, 80H
0BA8	46DB	andm    a, ra
0BA9	50DB	sz      ra
0BAA	6BAC	jmp     _LI1
0BAB	6C1D	jmp     _L1
				;9		{
				;10			TaskBatRdyFlag = false;
				_LI1:
0BAC	77A1	clr     maiFlagB[0].7
				;11			GetBatValu();								//0BAD	61FC	call    _GetBatValu
				;12			if((ChargIngFlag)&&(!ChargeFullFlag))		//0BAE	4721	mov     a, maiFlagB[0]
0BAF	40DB	mov     ra, a
0BB0	0F40	mov     a, 40H
0BB1	46DB	andm    a, ra
0BB2	50DB	sz      ra
0BB3	6BB5	jmp     _LI2
0BB4	6BBF	jmp     _L3
				_LI2:
0BB5	4723	mov     a, LEDH[0]
0BB6	40DB	mov     ra, a
0BB7	0F01	mov     a, 1H
0BB8	46DB	andm    a, ra
0BB9	50DB	sz      ra
0BBA	6BBF	jmp     _L3
				;13			{			
				;14				BatSta = BATTRY_CHARGE;
0BBB	0F02	mov     a, 2H
0BBC	40BE	mov     BatSta[0], a
				;15				Breathe_Flag = 1;
0BBD	7022	set     LEDG[0].0
0BBE	6BD5	jmp     _L4
				;16			}
				;17			else 
				;18			{
				;19				Breathe_Flag = 0;
				_L3:
0BBF	7422	clr     LEDG[0].0
				;20				if(BATLow3p5Flag)						//0BC0	4722	mov     a, LEDG[0]
0BC1	40DB	mov     ra, a
0BC2	0F02	mov     a, 2H
0BC3	46DB	andm    a, ra
0BC4	50DB	sz      ra
0BC5	6BC7	jmp     _LI3
0BC6	6BCA	jmp     _L5
				;21				{
				;22					BatSta = BATTRY_LOW;						
				_LI3:
0BC7	0F01	mov     a, 1H
0BC8	40BE	mov     BatSta[0], a
0BC9	6BD5	jmp     _L4
				;23				}
				;24				else
				;25				{
				;26					if(ChargeFullFlag)					//				_L5:
0BCA	4723	mov     a, LEDH[0]
0BCB	40DB	mov     ra, a
0BCC	0F01	mov     a, 1H
0BCD	46DB	andm    a, ra
0BCE	50DB	sz      ra
0BCF	6BD1	jmp     _LI4
0BD0	6BD4	jmp     _L6
				;27					{
				;28						BatSta = BATTRY_FULL;
				_LI4:
0BD1	0F03	mov     a, 3H
0BD2	40BE	mov     BatSta[0], a
0BD3	6BD5	jmp     _L4
				;29					}
				;30					else
				;31					{
				;32						BatSta = BATTRY_NORMAL;			
				_L6:
0BD4	5F3E	clr     BatSta[0]
				;33					}
				;34				}
				;35			}		
				;36			switch(BatSta)
				_L4:
0BD5	473E	mov     a, BatSta[0]
0BD6	40DB	mov     ra, a
0BD7	5F5C	clr     rb
0BD8	475B	mov     a, ra
0BD9	455C	or      a, rb
0BDA	3D0A	sz      Z
0BDB	6BF1	jmp     _L8
0BDC	475B	mov     a, ra
0BDD	0C01	xor     a, 1H
0BDE	455C	or      a, rb
0BDF	3D0A	sz      Z
0BE0	6BF5	jmp     _L9
0BE1	475B	mov     a, ra
0BE2	0C02	xor     a, 2H
0BE3	455C	or      a, rb
0BE4	3D0A	sz      Z
0BE5	6C1C	jmp     _L19
0BE6	475B	mov     a, ra
0BE7	0C03	xor     a, 3H
0BE8	455C	or      a, rb
0BE9	3D0A	sz      Z
0BEA	6BF3	jmp     _L11
0BEB	475B	mov     a, ra
0BEC	0C04	xor     a, 4H
0BED	455C	or      a, rb
0BEE	3D0A	sz      Z
0BEF	6C1D	jmp     _L1
0BF0	6C1A	jmp     _L18
				;37			{
				;38				case BATTRY_WAIT:
				;39					break;
				_L1:
				_L20:
0C1D	0003	ret
				;40				case BATTRY_NORMAL:
				;41					LED_Breathe_OFF;		//				_L8:
0BF1	3394	set     PA7
				;42					break;
0BF2	6C1D	jmp     _L1
				;43				case BATTRY_CHARGE:
				;44					break;			
				_L19:
0C1C	6C1D	jmp     _L1
				;45				case BATTRY_FULL:
				;46					LED_Breathe_ON;      	//				_L11:
0BF3	3794	clr     PA7
				;47					break;		
0BF4	6C1D	jmp     _L1
				;48				case BATTRY_LOW:		
				;49					if(LowBatShutDnSCnt <= BAT_LOW_TIP)    	//				_L9:
0BF5	473B	mov     a, LowBatShutDnSCnt[0]
0BF6	40DB	mov     ra, a
0BF7	0F3C	mov     a, 3CH
0BF8	425B	sub     a, ra
0BF9	380A	snz     C
0BFA	6C14	jmp     _L13
				;50					{
				;51						if(Sys1SCnt & 0x01)		//0BFB	473A	mov     a, Sys1SCnt[0]
0BFC	40DB	mov     ra, a
0BFD	5F5C	clr     rb
0BFE	0F01	mov     a, 1H
0BFF	46DB	andm    a, ra
0C00	0F00	mov     a, 0H
0C01	46DC	andm    a, rb
0C02	475B	mov     a, ra
0C03	455C	or      a, rb
0C04	3D0A	sz      Z
0C05	6C08	jmp     _L14
				;52						{
				;53							LED_Breathe_ON;
0C06	3794	clr     PA7
0C07	6C09	jmp     _L15
				;54						}
				;55						else
				;56						{
				;57							LED_Breathe_OFF;
				_L14:
0C08	3394	set     PA7
				;58						}			
				;59						if(Task5SFlag)			//5				_L15:
0C09	4723	mov     a, LEDH[0]
0C0A	40DB	mov     ra, a
0C0B	0F04	mov     a, 4H
0C0C	46DB	andm    a, ra
0C0D	50DB	sz      ra
0C0E	6C10	jmp     _LI5
0C0F	6C19	jmp     _L17
				;60						{		
				;61							Task5SFlag = false;			
				_LI5:
0C10	7523	clr     LEDH[0].2
				;62							KeyBuzzer(4);		// 0C11	0F04	mov     a, 4H
0C12	25AC	call    _KeyBuzzer
				;63						}
				;64					}
				;65					else
				;66					{
				;67						WorkMode = READY_MODE;
				_L13:
0C14	5F33	clr     WorkMode[0]
				;68						Close5V();
0C15	25A3	call    _Close5V
				;69						BatSta = BATTRY_WAIT;				
0C16	0F04	mov     a, 4H
0C17	40BE	mov     BatSta[0], a
				;70					}
				;71					break;
0C13	6C1D	jmp     _L1
0C18	6C1D	jmp     _L1
				_L17:
0C19	6C1D	jmp     _L1
				;72				default:
				;73					LED_Breathe_OFF;
				_L18:
0C1A	3394	set     PA7
				;74					break;
0C1B	6C1D	jmp     _L1
				;75			}		
				;76		}
				;77	
				;78	}
				;file E:\				;1	#include "base.h"
				;2	#define EXTERN extern
				;3	#include "Var.h"
				;4	
				;5	#define PreHeat() 	{PreHeatFlag = true;Time1SCnt = 0;}			//				;6	
				;7	/****************************************************************/
				;8	
				;9	void TaskFunc(void)
				;10	{
				;11		static u8 StaFlick;
				;12		switch(WorkMode)
				_TaskFunc:
				_TaskFunc:
0C1E	4733	mov     a, WorkMode[0]
0C1F	40DB	mov     ra, a
0C20	5F5C	clr     rb
0C21	475B	mov     a, ra
0C22	455C	or      a, rb
0C23	3D0A	sz      Z
0C24	6C2B	jmp     _L3
0C25	475B	mov     a, ra
0C26	0C01	xor     a, 1H
0C27	455C	or      a, rb
0C28	3D0A	sz      Z
0C29	6C61	jmp     _L4
				;13		{
				;14			case READY_MODE:							// Long_Press  				;15				if((Key_Forward_Long_val_Flag == 1)) 
				_L3:
0C2B	4721	mov     a, maiFlagB[0]
0C2C	40DB	mov     ra, a
0C2D	0F04	mov     a, 4H
0C2E	46DB	andm    a, ra
0C2F	50DB	sz      ra
0C30	6C32	jmp     _LI1
0C31	6C40	jmp     _L5
				;16				 {
				;17				 	Key_Forward_Long_val_Flag = 0;
				_LI1:
0C32	7521	clr     maiFlagB[0].2
				;18					KeyBuzzer(1);
0C33	0F01	mov     a, 1H
0C34	25AC	call    _KeyBuzzer
				;19					Open5V();
0C35	259B	call    _Open5V
				;20					Open5V200msCnt = 0;
0C36	5F37	clr     Open5V200msCnt[0]
0C37	5F38	clr     Open5V200msCnt[1]
				;21					WorkMode = RUN_MODE;		//0C38	0F01	mov     a, 1H
0C39	40B3	mov     WorkMode[0], a
				;22					PreHeat();					//0C3A	7020	set     maiFlagA[0].0
0C3B	5F39	clr     Time1SCnt[0]
				;23				 	TempDir = false;			//0C3C	77A2	clr     LEDG[0].7
				;24				 	_t0on = true;				// turn off timer 0 to change timer config
0C3D	31AF	set     T0ON
				;25				 	IntCnt = 0;					//0C3E	5F3F	clr     IntCnt[0]
0C3F	6C60	jmp     _L6
				;26				 }
				;27				 else 	
				;28				 {	
				;29				 	_t0on = false;						// turn off timer 0 to change timer config		
				_L5:
0C40	35AF	clr     T0ON
				;30					Heat_Wire_OFF;
0C41	3414	clr     PA0
				;31			 	 	COM1_OFF;		 	
0C42	34C0	clr     PC1
				;32				 	COM2_OFF;
0C43	3540	clr     PC2
				;33				 	COM3_OFF;
0C44	3494	clr     PA1
				;34				 	MOTOR_OFF;
0C45	3694	clr     PA5
				;35					LEDSta[LED_RED_INDEX] = LED_OFF;
0C46	5F2F	clr     LEDSta[0]
				;36					LEDSta[LED_BLUE_INDEX] = LED_OFF;
0C47	5F30	clr     LEDSta[1]
				;37					LEDSta[LED_WHITE_INDEX] = LED_OFF;
0C48	5F31	clr     LEDSta[2]
				;38					LEDSta[LED_GREEN_INDEX] = LED_OFF;
0C49	5F32	clr     LEDSta[3]
				;39					LED_WHITE_2_OFF;
0C4A	3114	set     PA2
				;40					if((SleepCnt >= 5) && (!ChargIngFlag))	//0C4B	4724	mov     a, SleepCnt[0]
0C4C	40DB	mov     ra, a
0C4D	0F04	mov     a, 4H
0C4E	425B	sub     a, ra
0C4F	3C0A	sz      C
0C50	6C60	jmp     _L6
0C51	4721	mov     a, maiFlagB[0]
0C52	40DB	mov     ra, a
0C53	0F40	mov     a, 40H
0C54	46DB	andm    a, ra
0C55	50DB	sz      ra
0C56	6C60	jmp     _L6
				;41					{
				;42						LED_Breathe_OFF;
0C57	3394	set     PA7
				;43						SleepCnt = 0;
0C58	5F24	clr     SleepCnt[0]
				;44						Sleep();					
0C59	2131	call    _Sleep
				;45					 	IntCnt = 0;	
0C5A	5F3F	clr     IntCnt[0]
				;46						BatSta = BATTRY_NORMAL;				//0C5B	5F3E	clr     BatSta[0]
				;47						BATLow3p5Flag = false;
0C5C	74A2	clr     LEDG[0].1
				;48						BATUp4p1Flag = false;
0C5D	7522	clr     LEDG[0].2
				;49						ChargeFullFlag = false;
0C5E	7423	clr     LEDH[0].0
				;50					}								
				;51				 }
				;52				 break;
0C5F	6D43	jmp     _L1
				_L6:
0C60	6D43	jmp     _L1
				;53			case RUN_MODE:			 
				;54				if((Key_Forward_Long_val_Flag))				// 				_L4:
0C61	4721	mov     a, maiFlagB[0]
0C62	40DB	mov     ra, a
0C63	0F04	mov     a, 4H
0C64	46DB	andm    a, ra
0C65	50DB	sz      ra
0C66	6C68	jmp     _LI2
0C67	6C6D	jmp     _L8
				;55				{
				;56					Key_Forward_Long_val_Flag = 0;
				_LI2:
0C68	7521	clr     maiFlagB[0].2
				;57					KeyBuzzer(3);
0C69	0F03	mov     a, 3H
0C6A	25AC	call    _KeyBuzzer
				;58					WorkMode = READY_MODE;
0C6B	5F33	clr     WorkMode[0]
				;59					Close5V();
0C6C	25A3	call    _Close5V
				;60				}
				;61				if(Double_Click_Value_Flag)  			//				_L8:
0C6D	4721	mov     a, maiFlagB[0]
0C6E	40DB	mov     ra, a
0C6F	0F02	mov     a, 2H
0C70	46DB	andm    a, ra
0C71	50DB	sz      ra
0C72	6C74	jmp     _LI3
0C73	6C8C	jmp     _L9
				;62				{
				;63					Double_Click_Value_Flag = 0;
				_LI3:
0C74	74A1	clr     maiFlagB[0].1
				;64					KeyBuzzer(1);
0C75	0F01	mov     a, 1H
0C76	25AC	call    _KeyBuzzer
				;65					NormalWinterFlag = !NormalWinterFlag;
0C77	4722	mov     a, LEDG[0]
0C78	40DB	mov     ra, a
0C79	475B	mov     a, ra
0C7A	0E10	and     a, 10H
0C7B	40DC	mov     rb, a
0C7C	0F01	mov     a, 1H
0C7D	40DB	mov     ra, a
0C7E	50DC	sz      rb
0C7F	6C81	jmp     _LI4
0C80	6C82	jmp     _L10
				_LI4:
0C81	5F5B	clr     ra
				_L10:
0C82	0F01	mov     a, 1H
0C83	46DB	andm    a, ra
0C84	515B	swapa   ra
0C85	0EF0	and     a, F0H
0C86	40DB	mov     ra, a
0C87	7622	clr     LEDG[0].4
0C88	475B	mov     a, ra
0C89	45A2	orm     a, LEDG[0]
				;66					PreHeat();						//0C8A	7020	set     maiFlagA[0].0
0C8B	5F39	clr     Time1SCnt[0]
				;67				}
				;68				if(PreHeatFlag)						//				_L9:
0C8C	4720	mov     a, maiFlagA[0]
0C8D	40DB	mov     ra, a
0C8E	0F01	mov     a, 1H
0C8F	46DB	andm    a, ra
0C90	50DB	sz      ra
0C91	6C93	jmp     _LI5
0C92	6CDF	jmp     _L11
				;69				{
				;70					MOTOR_OFF;
				_LI5:
0C93	3694	clr     PA5
				;71					HeatCtrDuty(2);					//0C94	0F02	mov     a, 2H
0C95	40F8	mov     i, a
0C96	5F79	clr     min
0C97	2246	call    _HeatCtrDuty
				;72			
				;73					if(Time1SCnt >= PRE_HEAT)		//0C98	4739	mov     a, Time1SCnt[0]
0C99	40DB	mov     ra, a
0C9A	0F09	mov     a, 9H
0C9B	425B	sub     a, ra
0C9C	3C0A	sz      C
0C9D	6CA9	jmp     _L12
				;74					{
				;75						if(PreHeatFlag)	
0C9E	4720	mov     a, maiFlagA[0]
0C9F	40DB	mov     ra, a
0CA0	0F01	mov     a, 1H
0CA1	46DB	andm    a, ra
0CA2	50DB	sz      ra
0CA3	6CA5	jmp     _LI6
0CA4	6CA9	jmp     _L12
				;76						{
				;77							Open5V();
				_LI6:
0CA5	259B	call    _Open5V
				;78							Open5V200msCnt = 0;		//0CA6	5F37	clr     Open5V200msCnt[0]
0CA7	5F38	clr     Open5V200msCnt[1]
				;79							PreHeatFlag = false;
0CA8	7420	clr     maiFlagA[0].0
				;80						}
				;81					}				
				;82					
				;83					if(Task500msFlag)
				_L12:
0CA9	4723	mov     a, LEDH[0]
0CAA	40DB	mov     ra, a
0CAB	0F02	mov     a, 2H
0CAC	46DB	andm    a, ra
0CAD	50DB	sz      ra
0CAE	6CB0	jmp     _LI7
0CAF	6D36	jmp     _L19
				;84					{
				;85						Task500msFlag = false;
				_LI7:
0CB0	74A3	clr     LEDH[0].1
				;86						switch(StaFlick)
0CB1	475A	mov     a, StaFlick[0]
0CB2	40DB	mov     ra, a
0CB3	5F5C	clr     rb
0CB4	475B	mov     a, ra
0CB5	455C	or      a, rb
0CB6	3D0A	sz      Z
0CB7	6CC3	jmp     _L15
0CB8	475B	mov     a, ra
0CB9	0C01	xor     a, 1H
0CBA	455C	or      a, rb
0CBB	3D0A	sz      Z
0CBC	6CC8	jmp     _L16
0CBD	475B	mov     a, ra
0CBE	0C02	xor     a, 2H
0CBF	455C	or      a, rb
0CC0	3D0A	sz      Z
0CC1	6CCD	jmp     _L17
				;87						{
				;88							case 0:
				;89								LEDSta[LED_RED_INDEX] = LED_ON;
				_L15:
0CC3	0F01	mov     a, 1H
0CC4	40AF	mov     LEDSta[0], a
				;90								LEDSta[LED_GREEN_INDEX] = LED_OFF;
0CC5	5F32	clr     LEDSta[3]
				;91								LEDSta[LED_BLUE_INDEX] = LED_OFF;
0CC6	5F30	clr     LEDSta[1]
				;92								break;
0CC7	6CD1	jmp     _L18
				;93							case 1:
				;94								LEDSta[LED_RED_INDEX] = LED_OFF;
				_L16:
0CC8	5F2F	clr     LEDSta[0]
				;95								LEDSta[LED_GREEN_INDEX] = LED_ON;
0CC9	0F01	mov     a, 1H
0CCA	40B2	mov     LEDSta[3], a
				;96								LEDSta[LED_BLUE_INDEX] = LED_OFF;
0CCB	5F30	clr     LEDSta[1]
				;97								break;
0CCC	6CD1	jmp     _L18
				;98							case 2:
				;99								LEDSta[LED_RED_INDEX] = LED_OFF;
				_L17:
0CCD	5F2F	clr     LEDSta[0]
				;100								LEDSta[LED_GREEN_INDEX] = LED_OFF;
0CCE	5F32	clr     LEDSta[3]
				;101								LEDSta[LED_BLUE_INDEX] = LED_ON;
0CCF	0F01	mov     a, 1H
0CD0	40B0	mov     LEDSta[1], a
				;102								break;
				;103							default:
				;104								break;
0CC2	6CD1	jmp     _L18
				;105						}
				;106						if(StaFlick++ >= 2)
				_L18:
0CD1	475A	mov     a, StaFlick[0]
0CD2	40DB	mov     ra, a
0CD3	475B	mov     a, ra
0CD4	40DC	mov     rb, a
0CD5	545C	inca    rb
0CD6	40DB	mov     ra, a
0CD7	475B	mov     a, ra
0CD8	40DA	mov     StaFlick[0], a
0CD9	0F01	mov     a, 1H
0CDA	425C	sub     a, rb
0CDB	3C0A	sz      C
0CDC	6D36	jmp     _L19
				;107							StaFlick = 0;
0CDD	5F5A	clr     StaFlick[0]
0CDE	6D36	jmp     _L19
				;108					}
				;109				}
				;110				else
				;111				{			
				;112					switch(TempSta)
				_L11:
0CDF	4734	mov     a, TempSta[0]
0CE0	40DB	mov     ra, a
0CE1	5F5C	clr     rb
0CE2	475B	mov     a, ra
0CE3	455C	or      a, rb
0CE4	3D0A	sz      Z
0CE5	6CF6	jmp     _L21
0CE6	475B	mov     a, ra
0CE7	0C01	xor     a, 1H
0CE8	455C	or      a, rb
0CE9	3D0A	sz      Z
0CEA	6D00	jmp     _L22
0CEB	475B	mov     a, ra
0CEC	0C02	xor     a, 2H
0CED	455C	or      a, rb
0CEE	3D0A	sz      Z
0CEF	6D0F	jmp     _L23
0CF0	475B	mov     a, ra
0CF1	0C03	xor     a, 3H
0CF2	455C	or      a, rb
0CF3	3D0A	sz      Z
0CF4	6D19	jmp     _L24
0CF5	6D2D	jmp     _L29
				;113					{
				;114						case DOWN_22:
				;115							LEDSta[LED_BLUE_INDEX] = LED_ON;
				_L21:
0CF6	0F01	mov     a, 1H
0CF7	40B0	mov     LEDSta[1], a
				;116							LEDSta[LED_GREEN_INDEX] = LED_OFF;
0CF8	5F32	clr     LEDSta[3]
				;117							LEDSta[LED_RED_INDEX] = LED_OFF;					
0CF9	5F2F	clr     LEDSta[0]
				;118							HeatCtrDuty(2048);   	// 0CFA	5F78	clr     i
0CFB	0F08	mov     a, 8H
0CFC	40F9	mov     min, a
0CFD	2246	call    _HeatCtrDuty
				;119							MOTOR_OFF;
0CFE	3694	clr     PA5
				;120							break;
0CFF	6D36	jmp     _L19
				;121						case IN_22_37:
				;122							LEDSta[LED_RED_INDEX] = LED_OFF;
				_L22:
0D00	5F2F	clr     LEDSta[0]
				;123							LEDSta[LED_GREEN_INDEX] = LED_ON;
0D01	0F01	mov     a, 1H
0D02	40B2	mov     LEDSta[3], a
				;124							LEDSta[LED_BLUE_INDEX] = LED_OFF;
0D03	5F30	clr     LEDSta[1]
				;125							MOTOR_OFF;
0D04	3694	clr     PA5
				;126							HeatCtrDuty(ntc_val);		// 0D05	4735	mov     a, ntc_val[0]
0D06	40DB	mov     ra, a
0D07	4736	mov     a, ntc_val[1]
0D08	40DC	mov     rb, a
0D09	475B	mov     a, ra
0D0A	40F8	mov     i, a
0D0B	475C	mov     a, rb
0D0C	40F9	mov     min, a
0D0D	2246	call    _HeatCtrDuty
				;127							break;
0D0E	6D36	jmp     _L19
				;128						case IN_37_45:					//				;129							LEDSta[LED_BLUE_INDEX] = LED_OFF;
				_L23:
0D0F	5F30	clr     LEDSta[1]
				;130							LEDSta[LED_GREEN_INDEX] = LED_OFF;
0D10	5F32	clr     LEDSta[3]
				;131							LEDSta[LED_RED_INDEX] = LED_ON;
0D11	0F01	mov     a, 1H
0D12	40AF	mov     LEDSta[0], a
				;132							HeatCtrDuty(2);
0D13	0F02	mov     a, 2H
0D14	40F8	mov     i, a
0D15	5F79	clr     min
0D16	2246	call    _HeatCtrDuty
				;133							MOTOR_OFF;
0D17	3694	clr     PA5
				;134							break;
0D18	6D36	jmp     _L19
				;135						case UP_45:						//				;136							SumOfEdge = 0;
				_L24:
0D19	5F3D	clr     SumOfEdge[0]
				;137							LEDSta[LED_BLUE_INDEX] = LED_OFF;
0D1A	5F30	clr     LEDSta[1]
				;138							LEDSta[LED_GREEN_INDEX] = LED_OFF;
0D1B	5F32	clr     LEDSta[3]
				;139							LEDSta[LED_RED_INDEX] = LED_ON;
0D1C	0F01	mov     a, 1H
0D1D	40AF	mov     LEDSta[0], a
				;140							HeatCtrDuty(2);
0D1E	0F02	mov     a, 2H
0D1F	40F8	mov     i, a
0D20	5F79	clr     min
0D21	2246	call    _HeatCtrDuty
				;141							if(NormalWinterFlag)
0D22	4722	mov     a, LEDG[0]
0D23	40DB	mov     ra, a
0D24	0F10	mov     a, 10H
0D25	46DB	andm    a, ra
0D26	50DB	sz      ra
0D27	6D29	jmp     _LI8
0D28	6D2B	jmp     _L25
				;142							{							
				;143								MOTOR_OFF;
				_LI8:
0D29	3694	clr     PA5
				;144							}
				;145							else
				;146							{							
				;147								MOTOR_ON;
				_L25:
0D2B	3294	set     PA5
				;148							}
				;149							break;
0D2A	6D36	jmp     _L19
0D2C	6D36	jmp     _L19
				;150						default:
				;151							SumOfEdge = 0;
				_L29:
0D2D	5F3D	clr     SumOfEdge[0]
				;152							LEDSta[LED_BLUE_INDEX] = LED_OFF;
0D2E	5F30	clr     LEDSta[1]
				;153							LEDSta[LED_GREEN_INDEX] = LED_OFF;
0D2F	5F32	clr     LEDSta[3]
				;154							LEDSta[LED_RED_INDEX] = LED_OFF;
0D30	5F2F	clr     LEDSta[0]
				;155							HeatCtrDuty(2);
0D31	0F02	mov     a, 2H
0D32	40F8	mov     i, a
0D33	5F79	clr     min
0D34	2246	call    _HeatCtrDuty
				;156							MOTOR_OFF;
0D35	3694	clr     PA5
				;157							break;
				;158					}
				;159				}
				;160				if(NormalWinterFlag)
				_L19:
0D36	4722	mov     a, LEDG[0]
0D37	40DB	mov     ra, a
0D38	0F10	mov     a, 10H
0D39	46DB	andm    a, ra
0D3A	50DB	sz      ra
0D3B	6D3D	jmp     _LI9
0D3C	6D40	jmp     _L27
				;161				{
				;162					LEDSta[LED_WHITE_INDEX] = LED_OFF;
				_LI9:
0D3D	5F31	clr     LEDSta[2]
				;163					LED_WHITE_2_ON;					
0D3E	3514	clr     PA2
				;164				}
				;165				else
				;166				{			
				;167					LED_WHITE_2_OFF;
				_L27:
0D40	3114	set     PA2
				;168					LEDSta[LED_WHITE_INDEX] = LED_ON;
0D41	0F01	mov     a, 1H
0D42	40B1	mov     LEDSta[2], a
				;169				}
				;170				
				;171				break;		
0D3F	6D43	jmp     _L1
				_L1:
				_L30:
0D43	0003	ret
				L0D44:
0D44	1483	inc     MP1
0D45	3D0A	sz      Z
0D46	1481	inc     MP0
				L0D47:
0D47	3F81	sz      MP0.7
0D48	6D4D	jmp     L0D4D
0D49	0701	mov     a, MP0
0D4A	0084	mov     BP, a
0D4B	0702	mov     a, [02H]
0D4C	0003	ret
				L0D4D:
0D4D	1B01	rrca    MP0
0D4E	0E3F	and     a, 3FH
0D4F	0089	mov     TBHP, a
0D50	1B03	rrca    MP1
0D51	0087	mov     TBLP, a
0D52	1D05	tabrd   ACC
0D53	3C0A	sz      C
0D54	0708	mov     a, TBLH
0D55	0003	ret
				L0D56:
0D56	5F75	clr     rb04[3]
0D57	0F08	mov     a, 8H
0D58	40F7	mov     rb04[5], a
				L0D59:
0D59	340A	clr     C
0D5A	5AF3	rlc     rb04[1]
0D5B	5AF5	rlc     rb04[3]
0D5C	4775	mov     a, rb04[3]
0D5D	4274	sub     a, rb04[2]
0D5E	380A	snz     C
0D5F	6D64	jmp     L0D64
0D60	4775	mov     a, rb04[3]
0D61	4274	sub     a, rb04[2]
0D62	40F5	mov     rb04[3], a
0D63	54F3	inc     rb04[1]
				L0D64:
0D64	57F7	sdz     rb04[5]
0D65	6D59	jmp     L0D59
0D66	7C76	sz      rb04[4].0
0D67	41F5	cpl     rb04[3]
0D68	7C76	sz      rb04[4].0
0D69	54F5	inc     rb04[3]
0D6A	7CF6	sz      rb04[4].1
0D6B	41F3	cpl     rb04[1]
0D6C	7CF6	sz      rb04[4].1
0D6D	54F3	inc     rb04[1]
0D6E	0003	ret
				;172			default:
				;173				break;
0C2A	6D43	jmp     _L1
				;174		}
				;175	}
				data .SECTION 'DATA'
				__smod DB DUP (?) ; __smod
				__lvdc DB DUP (?) ; __lvdc
				__integ DB DUP (?) ; __integ
				__intc0 DB DUP (?) ; __intc0
				__intc1 DB DUP (?) ; __intc1
				__mfi0 DB DUP (?) ; __mfi0
				__mfi1 DB DUP (?) ; __mfi1
				__pa DB DUP (?) ; __pa
				__pac DB DUP (?) ; __pac
				__papu DB DUP (?) ; __papu
				__pawu DB DUP (?) ; __pawu
				__tmpc DB DUP (?) ; __tmpc
				__wdtc DB DUP (?) ; __wdtc
				__lvrc DB DUP (?) ; __lvrc
				__adrl DB DUP (?) ; __adrl
				__adrh DB DUP (?) ; __adrh
				__adcr0 DB DUP (?) ; __adcr0
				__adcr1 DB DUP (?) ; __adcr1
				__acerl DB DUP (?) ; __acerl
				__pb DB DUP (?) ; __pb
				__pbc DB DUP (?) ; __pbc
				__pbpu DB DUP (?) ; __pbpu
				__tm2c0 DB DUP (?) ; __tm2c0
				__tm2c1 DB DUP (?) ; __tm2c1
				__tm2al DB DUP (?) ; __tm2al
				__tm2ah DB DUP (?) ; __tm2ah
				__tm2rp DB DUP (?) ; __tm2rp
				__tm0c0 DB DUP (?) ; __tm0c0
				__tm0c1 DB DUP (?) ; __tm0c1
				__tm0dl DB DUP (?) ; __tm0dl
				__tm0dh DB DUP (?) ; __tm0dh
				__tm0al DB DUP (?) ; __tm0al
				__tm0ah DB DUP (?) ; __tm0ah
				__tm0rp DB DUP (?) ; __tm0rp
				__cpc DB DUP (?) ; __cpc
				__pc DB DUP (?) ; __pc
				__pcc DB DUP (?) ; __pcc
				__pcpu DB DUP (?) ; __pcpu
				maiFlagA DB DUP (?) ; maiFlagA
				maiFlagB DB DUP (?) ; maiFlagB
				LEDG DB DUP (?) ; LEDG
				LEDH DB DUP (?) ; LEDH
				SleepCnt DB DUP (?) ; SleepCnt
				Buzzer DB DUP (?) ; Buzzer
				Output5V DB DUP (?) ; Output5V
				LEDSta DB DUP (?) ; LEDSta
				WorkMode DB DUP (?) ; WorkMode
				TempSta DB DUP (?) ; TempSta
				ntc_val DB 2 DUP (?) ; ntc_val
				Open5V200msCnt DB 2 DUP (?) ; Open5V200msCnt
				Time1SCnt DB DUP (?) ; Time1SCnt
				Sys1SCnt DB DUP (?) ; Sys1SCnt
				LowBatShutDnSCnt DB DUP (?) ; LowBatShutDnSCnt
				BATChargeFullCnt DB DUP (?) ; BATChargeFullCnt
				SumOfEdge DB DUP (?) ; SumOfEdge
				BatSta DB DUP (?) ; BatSta
				IntCnt DB DUP (?) ; IntCnt
				Time500mSCnt DB DUP (?) ; Time500mSCnt
				Time4mSCnt DB DUP (?) ; Time4mSCnt
				PWMCnt DB 2 DUP (?) ; PWMCnt
				HuxiCnt DB 2 DUP (?) ; HuxiCnt
				PWMValu DB 2 DUP (?) ; PWMValu
				Time100uSCnt DB 2 DUP (?) ; Time100uSCnt
				ChargPlusDly DB 2 DUP (?) ; ChargPlusDly
				scan_num DB DUP (?) ; scan_num
				adcsp DB DUP (?) ; adcsp
				adcsp_2 DB DUP (?) ; adcsp_2
				adcsp_1 DB DUP (?) ; adcsp_1
				AroudTempIndex DB DUP (?) ; AroudTempIndex
				k DB 2 DUP (?) ; k
				k1 DB 2 DUP (?) ; k1
				k2 DB 2 DUP (?) ; k2
				TimesCnt DB DUP (?) ; TimesCnt
				TimesFullDnCnt DB DUP (?) ; TimesFullDnCnt
				TimesFullCnt DB DUP (?) ; TimesFullCnt
				StaFlick DB DUP (?) ; StaFlick
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				rd DB DUP (?)
				ra10 DB DUP (?)
				rb10 DB DUP (?)
				rc10 DB DUP (?)
				rd10 DB DUP (?)
				r110 DB DUP (?)
				r210 DB DUP (?)
				r310 DB DUP (?)
				r410 DB DUP (?)
				r510 DB DUP (?)
				r610 DB DUP (?)
				r710 DB DUP (?)
				r10c DB DUP (?)
				r20c DB DUP (?)
				r104 DB DUP (?)
				r204 DB DUP (?)
				r304 DB DUP (?)
				r404 DB DUP (?)
				r504 DB DUP (?)
				ra04 DB DUP (?)
				rb04 DB DUP (?)
				i DB DUP (?) ; i
				min DB 2 DUP (?) ; min
				j DB 2 DUP (?) ; j
				max DB 2 DUP (?) ; max
				adcBuf DB DUP (?) ; adcBuf
				adcBuf DB DUP (?) ; adcBuf
				Time1SClearCnt DB DUP (?) ; Time1SClearCnt
				Forward_Buf DB DUP (?) ; Forward_Buf
				Pre_Forward_Buf DB DUP (?) ; Pre_Forward_Buf
				Key_Forward_Time DB DUP (?) ; Key_Forward_Time
				Key_Forward_Delay DB 2 DUP (?) ; Key_Forward_Delay
				Key_Forward_Ms DB 2 DUP (?) ; Key_Forward_Ms
				Double_Click_timer DB 2 DUP (?) ; Double_Click_timer
				Change_Key_Mode DB DUP (?) ; Change_Key_Mode
				adcBuf DB DUP (?) ; adcBuf
